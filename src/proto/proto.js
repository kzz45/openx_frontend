/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const github = $root.github = (() => {

    /**
     * Namespace github.
     * @exports github
     * @namespace
     */
    const github = {};

    github.com = (function() {

        /**
         * Namespace com.
         * @memberof github
         * @namespace
         */
        const com = {};

        com.nevercase = (function() {

            /**
             * Namespace nevercase.
             * @memberof github.com
             * @namespace
             */
            const nevercase = {};

            nevercase.discovery = (function() {

                /**
                 * Namespace discovery.
                 * @memberof github.com.nevercase
                 * @namespace
                 */
                const discovery = {};

                discovery.pkg = (function() {

                    /**
                     * Namespace pkg.
                     * @memberof github.com.nevercase.discovery
                     * @namespace
                     */
                    const pkg = {};

                    pkg.apis = (function() {

                        /**
                         * Namespace apis.
                         * @memberof github.com.nevercase.discovery.pkg
                         * @namespace
                         */
                        const apis = {};

                        apis.rbac = (function() {

                            /**
                             * Namespace rbac.
                             * @memberof github.com.nevercase.discovery.pkg.apis
                             * @namespace
                             */
                            const rbac = {};

                            rbac.v1 = (function() {

                                /**
                                 * Namespace v1.
                                 * @memberof github.com.nevercase.discovery.pkg.apis.rbac
                                 * @namespace
                                 */
                                const v1 = {};

                                v1.AccountMeta = (function() {

                                    /**
                                     * Properties of an AccountMeta.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IAccountMeta
                                     * @property {string|null} [username] AccountMeta username
                                     * @property {string|null} [password] AccountMeta password
                                     */

                                    /**
                                     * Constructs a new AccountMeta.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents an AccountMeta.
                                     * @implements IAccountMeta
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAccountMeta=} [properties] Properties to set
                                     */
                                    function AccountMeta(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * AccountMeta username.
                                     * @member {string} username
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @instance
                                     */
                                    AccountMeta.prototype.username = "";

                                    /**
                                     * AccountMeta password.
                                     * @member {string} password
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @instance
                                     */
                                    AccountMeta.prototype.password = "";

                                    /**
                                     * Creates a new AccountMeta instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAccountMeta=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta} AccountMeta instance
                                     */
                                    AccountMeta.create = function create(properties) {
                                        return new AccountMeta(properties);
                                    };

                                    /**
                                     * Encodes the specified AccountMeta message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAccountMeta} message AccountMeta message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AccountMeta.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.username != null && Object.hasOwnProperty.call(message, "username"))
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);
                                        if (message.password != null && Object.hasOwnProperty.call(message, "password"))
                                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified AccountMeta message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAccountMeta} message AccountMeta message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AccountMeta.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes an AccountMeta message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta} AccountMeta
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AccountMeta.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.username = reader.string();
                                                    break;
                                                }
                                            case 2: {
                                                    message.password = reader.string();
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes an AccountMeta message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta} AccountMeta
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AccountMeta.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies an AccountMeta message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    AccountMeta.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.username != null && message.hasOwnProperty("username"))
                                            if (!$util.isString(message.username))
                                                return "username: string expected";
                                        if (message.password != null && message.hasOwnProperty("password"))
                                            if (!$util.isString(message.password))
                                                return "password: string expected";
                                        return null;
                                    };

                                    /**
                                     * Creates an AccountMeta message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta} AccountMeta
                                     */
                                    AccountMeta.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta();
                                        if (object.username != null)
                                            message.username = String(object.username);
                                        if (object.password != null)
                                            message.password = String(object.password);
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from an AccountMeta message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta} message AccountMeta
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    AccountMeta.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.username = "";
                                            object.password = "";
                                        }
                                        if (message.username != null && message.hasOwnProperty("username"))
                                            object.username = message.username;
                                        if (message.password != null && message.hasOwnProperty("password"))
                                            object.password = message.password;
                                        return object;
                                    };

                                    /**
                                     * Converts this AccountMeta to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    AccountMeta.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for AccountMeta
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    AccountMeta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta";
                                    };

                                    return AccountMeta;
                                })();

                                v1.App = (function() {

                                    /**
                                     * Properties of an App.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IApp
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null} [metadata] App metadata
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppSpec|null} [spec] App spec
                                     */

                                    /**
                                     * Constructs a new App.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents an App.
                                     * @implements IApp
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IApp=} [properties] Properties to set
                                     */
                                    function App(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * App metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @instance
                                     */
                                    App.prototype.metadata = null;

                                    /**
                                     * App spec.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppSpec|null|undefined} spec
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @instance
                                     */
                                    App.prototype.spec = null;

                                    /**
                                     * Creates a new App instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IApp=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.App} App instance
                                     */
                                    App.create = function create(properties) {
                                        return new App(properties);
                                    };

                                    /**
                                     * Encodes the specified App message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.App.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IApp} message App message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    App.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec.encode(message.spec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified App message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.App.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IApp} message App message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    App.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes an App message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.App} App
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    App.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.App();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes an App message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.App} App
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    App.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies an App message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    App.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.spec != null && message.hasOwnProperty("spec")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec.verify(message.spec);
                                            if (error)
                                                return "spec." + error;
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates an App message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.App} App
                                     */
                                    App.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.App)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.App();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.App.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.fromObject(object.metadata);
                                        }
                                        if (object.spec != null) {
                                            if (typeof object.spec !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.App.spec: object expected");
                                            message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec.fromObject(object.spec);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from an App message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.App} message App
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    App.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.metadata = null;
                                            object.spec = null;
                                        }
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.toObject(message.metadata, options);
                                        if (message.spec != null && message.hasOwnProperty("spec"))
                                            object.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec.toObject(message.spec, options);
                                        return object;
                                    };

                                    /**
                                     * Converts this App to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    App.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for App
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.App
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    App.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.App";
                                    };

                                    return App;
                                })();

                                v1.AppList = (function() {

                                    /**
                                     * Properties of an AppList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IAppList
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null} [metadata] AppList metadata
                                     * @property {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IApp>|null} [items] AppList items
                                     */

                                    /**
                                     * Constructs a new AppList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents an AppList.
                                     * @implements IAppList
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppList=} [properties] Properties to set
                                     */
                                    function AppList(properties) {
                                        this.items = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * AppList metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @instance
                                     */
                                    AppList.prototype.metadata = null;

                                    /**
                                     * AppList items.
                                     * @member {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IApp>} items
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @instance
                                     */
                                    AppList.prototype.items = $util.emptyArray;

                                    /**
                                     * Creates a new AppList instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppList=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList} AppList instance
                                     */
                                    AppList.create = function create(properties) {
                                        return new AppList(properties);
                                    };

                                    /**
                                     * Encodes the specified AppList message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppList} message AppList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppList.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.items != null && message.items.length)
                                            for (let i = 0; i < message.items.length; ++i)
                                                $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.App.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified AppList message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppList} message AppList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppList.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes an AppList message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList} AppList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppList.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    if (!(message.items && message.items.length))
                                                        message.items = [];
                                                    message.items.push($root.github.com.nevercase.discovery.pkg.apis.rbac.v1.App.decode(reader, reader.uint32()));
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes an AppList message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList} AppList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppList.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies an AppList message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    AppList.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.items != null && message.hasOwnProperty("items")) {
                                            if (!Array.isArray(message.items))
                                                return "items: array expected";
                                            for (let i = 0; i < message.items.length; ++i) {
                                                let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.App.verify(message.items[i]);
                                                if (error)
                                                    return "items." + error;
                                            }
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates an AppList message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList} AppList
                                     */
                                    AppList.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.fromObject(object.metadata);
                                        }
                                        if (object.items) {
                                            if (!Array.isArray(object.items))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList.items: array expected");
                                            message.items = [];
                                            for (let i = 0; i < object.items.length; ++i) {
                                                if (typeof object.items[i] !== "object")
                                                    throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList.items: object expected");
                                                message.items[i] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.App.fromObject(object.items[i]);
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from an AppList message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList} message AppList
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    AppList.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.items = [];
                                        if (options.defaults)
                                            object.metadata = null;
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.toObject(message.metadata, options);
                                        if (message.items && message.items.length) {
                                            object.items = [];
                                            for (let j = 0; j < message.items.length; ++j)
                                                object.items[j] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.App.toObject(message.items[j], options);
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this AppList to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    AppList.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for AppList
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    AppList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.AppList";
                                    };

                                    return AppList;
                                })();

                                v1.AppServiceAccount = (function() {

                                    /**
                                     * Properties of an AppServiceAccount.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IAppServiceAccount
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null} [metadata] AppServiceAccount metadata
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountSpec|null} [spec] AppServiceAccount spec
                                     */

                                    /**
                                     * Constructs a new AppServiceAccount.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents an AppServiceAccount.
                                     * @implements IAppServiceAccount
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccount=} [properties] Properties to set
                                     */
                                    function AppServiceAccount(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * AppServiceAccount metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @instance
                                     */
                                    AppServiceAccount.prototype.metadata = null;

                                    /**
                                     * AppServiceAccount spec.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountSpec|null|undefined} spec
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @instance
                                     */
                                    AppServiceAccount.prototype.spec = null;

                                    /**
                                     * Creates a new AppServiceAccount instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccount=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount} AppServiceAccount instance
                                     */
                                    AppServiceAccount.create = function create(properties) {
                                        return new AppServiceAccount(properties);
                                    };

                                    /**
                                     * Encodes the specified AppServiceAccount message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccount} message AppServiceAccount message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppServiceAccount.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.encode(message.spec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified AppServiceAccount message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccount} message AppServiceAccount message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppServiceAccount.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes an AppServiceAccount message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount} AppServiceAccount
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppServiceAccount.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes an AppServiceAccount message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount} AppServiceAccount
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppServiceAccount.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies an AppServiceAccount message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    AppServiceAccount.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.spec != null && message.hasOwnProperty("spec")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.verify(message.spec);
                                            if (error)
                                                return "spec." + error;
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates an AppServiceAccount message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount} AppServiceAccount
                                     */
                                    AppServiceAccount.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.fromObject(object.metadata);
                                        }
                                        if (object.spec != null) {
                                            if (typeof object.spec !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.spec: object expected");
                                            message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.fromObject(object.spec);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from an AppServiceAccount message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount} message AppServiceAccount
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    AppServiceAccount.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.metadata = null;
                                            object.spec = null;
                                        }
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.toObject(message.metadata, options);
                                        if (message.spec != null && message.hasOwnProperty("spec"))
                                            object.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.toObject(message.spec, options);
                                        return object;
                                    };

                                    /**
                                     * Converts this AppServiceAccount to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    AppServiceAccount.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for AppServiceAccount
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    AppServiceAccount.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount";
                                    };

                                    return AppServiceAccount;
                                })();

                                v1.AppServiceAccountList = (function() {

                                    /**
                                     * Properties of an AppServiceAccountList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IAppServiceAccountList
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null} [metadata] AppServiceAccountList metadata
                                     * @property {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccount>|null} [items] AppServiceAccountList items
                                     */

                                    /**
                                     * Constructs a new AppServiceAccountList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents an AppServiceAccountList.
                                     * @implements IAppServiceAccountList
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountList=} [properties] Properties to set
                                     */
                                    function AppServiceAccountList(properties) {
                                        this.items = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * AppServiceAccountList metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @instance
                                     */
                                    AppServiceAccountList.prototype.metadata = null;

                                    /**
                                     * AppServiceAccountList items.
                                     * @member {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccount>} items
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @instance
                                     */
                                    AppServiceAccountList.prototype.items = $util.emptyArray;

                                    /**
                                     * Creates a new AppServiceAccountList instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountList=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList} AppServiceAccountList instance
                                     */
                                    AppServiceAccountList.create = function create(properties) {
                                        return new AppServiceAccountList(properties);
                                    };

                                    /**
                                     * Encodes the specified AppServiceAccountList message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountList} message AppServiceAccountList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppServiceAccountList.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.items != null && message.items.length)
                                            for (let i = 0; i < message.items.length; ++i)
                                                $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified AppServiceAccountList message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountList} message AppServiceAccountList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppServiceAccountList.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes an AppServiceAccountList message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList} AppServiceAccountList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppServiceAccountList.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    if (!(message.items && message.items.length))
                                                        message.items = [];
                                                    message.items.push($root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.decode(reader, reader.uint32()));
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes an AppServiceAccountList message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList} AppServiceAccountList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppServiceAccountList.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies an AppServiceAccountList message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    AppServiceAccountList.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.items != null && message.hasOwnProperty("items")) {
                                            if (!Array.isArray(message.items))
                                                return "items: array expected";
                                            for (let i = 0; i < message.items.length; ++i) {
                                                let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.verify(message.items[i]);
                                                if (error)
                                                    return "items." + error;
                                            }
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates an AppServiceAccountList message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList} AppServiceAccountList
                                     */
                                    AppServiceAccountList.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.fromObject(object.metadata);
                                        }
                                        if (object.items) {
                                            if (!Array.isArray(object.items))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList.items: array expected");
                                            message.items = [];
                                            for (let i = 0; i < object.items.length; ++i) {
                                                if (typeof object.items[i] !== "object")
                                                    throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList.items: object expected");
                                                message.items[i] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.fromObject(object.items[i]);
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from an AppServiceAccountList message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList} message AppServiceAccountList
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    AppServiceAccountList.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.items = [];
                                        if (options.defaults)
                                            object.metadata = null;
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.toObject(message.metadata, options);
                                        if (message.items && message.items.length) {
                                            object.items = [];
                                            for (let j = 0; j < message.items.length; ++j)
                                                object.items[j] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccount.toObject(message.items[j], options);
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this AppServiceAccountList to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    AppServiceAccountList.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for AppServiceAccountList
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    AppServiceAccountList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountList";
                                    };

                                    return AppServiceAccountList;
                                })();

                                v1.AppServiceAccountSpec = (function() {

                                    /**
                                     * Properties of an AppServiceAccountSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IAppServiceAccountSpec
                                     * @property {string|null} [desc] AppServiceAccountSpec desc
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRoleRef|null} [roleRef] AppServiceAccountSpec roleRef
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAccountMeta|null} [accountMeta] AppServiceAccountSpec accountMeta
                                     */

                                    /**
                                     * Constructs a new AppServiceAccountSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents an AppServiceAccountSpec.
                                     * @implements IAppServiceAccountSpec
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountSpec=} [properties] Properties to set
                                     */
                                    function AppServiceAccountSpec(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * AppServiceAccountSpec desc.
                                     * @member {string} desc
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @instance
                                     */
                                    AppServiceAccountSpec.prototype.desc = "";

                                    /**
                                     * AppServiceAccountSpec roleRef.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRoleRef|null|undefined} roleRef
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @instance
                                     */
                                    AppServiceAccountSpec.prototype.roleRef = null;

                                    /**
                                     * AppServiceAccountSpec accountMeta.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAccountMeta|null|undefined} accountMeta
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @instance
                                     */
                                    AppServiceAccountSpec.prototype.accountMeta = null;

                                    /**
                                     * Creates a new AppServiceAccountSpec instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountSpec=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec} AppServiceAccountSpec instance
                                     */
                                    AppServiceAccountSpec.create = function create(properties) {
                                        return new AppServiceAccountSpec(properties);
                                    };

                                    /**
                                     * Encodes the specified AppServiceAccountSpec message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountSpec} message AppServiceAccountSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppServiceAccountSpec.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.desc != null && Object.hasOwnProperty.call(message, "desc"))
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.desc);
                                        if (message.roleRef != null && Object.hasOwnProperty.call(message, "roleRef"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef.encode(message.roleRef, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        if (message.accountMeta != null && Object.hasOwnProperty.call(message, "accountMeta"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.encode(message.accountMeta, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified AppServiceAccountSpec message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppServiceAccountSpec} message AppServiceAccountSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppServiceAccountSpec.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes an AppServiceAccountSpec message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec} AppServiceAccountSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppServiceAccountSpec.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.desc = reader.string();
                                                    break;
                                                }
                                            case 2: {
                                                    message.roleRef = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 3: {
                                                    message.accountMeta = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes an AppServiceAccountSpec message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec} AppServiceAccountSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppServiceAccountSpec.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies an AppServiceAccountSpec message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    AppServiceAccountSpec.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.desc != null && message.hasOwnProperty("desc"))
                                            if (!$util.isString(message.desc))
                                                return "desc: string expected";
                                        if (message.roleRef != null && message.hasOwnProperty("roleRef")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef.verify(message.roleRef);
                                            if (error)
                                                return "roleRef." + error;
                                        }
                                        if (message.accountMeta != null && message.hasOwnProperty("accountMeta")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.verify(message.accountMeta);
                                            if (error)
                                                return "accountMeta." + error;
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates an AppServiceAccountSpec message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec} AppServiceAccountSpec
                                     */
                                    AppServiceAccountSpec.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec();
                                        if (object.desc != null)
                                            message.desc = String(object.desc);
                                        if (object.roleRef != null) {
                                            if (typeof object.roleRef !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.roleRef: object expected");
                                            message.roleRef = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef.fromObject(object.roleRef);
                                        }
                                        if (object.accountMeta != null) {
                                            if (typeof object.accountMeta !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec.accountMeta: object expected");
                                            message.accountMeta = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.fromObject(object.accountMeta);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from an AppServiceAccountSpec message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec} message AppServiceAccountSpec
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    AppServiceAccountSpec.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.desc = "";
                                            object.roleRef = null;
                                            object.accountMeta = null;
                                        }
                                        if (message.desc != null && message.hasOwnProperty("desc"))
                                            object.desc = message.desc;
                                        if (message.roleRef != null && message.hasOwnProperty("roleRef"))
                                            object.roleRef = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef.toObject(message.roleRef, options);
                                        if (message.accountMeta != null && message.hasOwnProperty("accountMeta"))
                                            object.accountMeta = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.toObject(message.accountMeta, options);
                                        return object;
                                    };

                                    /**
                                     * Converts this AppServiceAccountSpec to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    AppServiceAccountSpec.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for AppServiceAccountSpec
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    AppServiceAccountSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.AppServiceAccountSpec";
                                    };

                                    return AppServiceAccountSpec;
                                })();

                                v1.AppSpec = (function() {

                                    /**
                                     * Properties of an AppSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IAppSpec
                                     * @property {string|null} [id] AppSpec id
                                     * @property {string|null} [secret] AppSpec secret
                                     * @property {string|null} [desc] AppSpec desc
                                     */

                                    /**
                                     * Constructs a new AppSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents an AppSpec.
                                     * @implements IAppSpec
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppSpec=} [properties] Properties to set
                                     */
                                    function AppSpec(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * AppSpec id.
                                     * @member {string} id
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @instance
                                     */
                                    AppSpec.prototype.id = "";

                                    /**
                                     * AppSpec secret.
                                     * @member {string} secret
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @instance
                                     */
                                    AppSpec.prototype.secret = "";

                                    /**
                                     * AppSpec desc.
                                     * @member {string} desc
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @instance
                                     */
                                    AppSpec.prototype.desc = "";

                                    /**
                                     * Creates a new AppSpec instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppSpec=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec} AppSpec instance
                                     */
                                    AppSpec.create = function create(properties) {
                                        return new AppSpec(properties);
                                    };

                                    /**
                                     * Encodes the specified AppSpec message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppSpec} message AppSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppSpec.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                                        if (message.secret != null && Object.hasOwnProperty.call(message, "secret"))
                                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.secret);
                                        if (message.desc != null && Object.hasOwnProperty.call(message, "desc"))
                                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.desc);
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified AppSpec message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAppSpec} message AppSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    AppSpec.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes an AppSpec message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec} AppSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppSpec.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.id = reader.string();
                                                    break;
                                                }
                                            case 2: {
                                                    message.secret = reader.string();
                                                    break;
                                                }
                                            case 3: {
                                                    message.desc = reader.string();
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes an AppSpec message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec} AppSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    AppSpec.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies an AppSpec message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    AppSpec.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.id != null && message.hasOwnProperty("id"))
                                            if (!$util.isString(message.id))
                                                return "id: string expected";
                                        if (message.secret != null && message.hasOwnProperty("secret"))
                                            if (!$util.isString(message.secret))
                                                return "secret: string expected";
                                        if (message.desc != null && message.hasOwnProperty("desc"))
                                            if (!$util.isString(message.desc))
                                                return "desc: string expected";
                                        return null;
                                    };

                                    /**
                                     * Creates an AppSpec message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec} AppSpec
                                     */
                                    AppSpec.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec();
                                        if (object.id != null)
                                            message.id = String(object.id);
                                        if (object.secret != null)
                                            message.secret = String(object.secret);
                                        if (object.desc != null)
                                            message.desc = String(object.desc);
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from an AppSpec message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec} message AppSpec
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    AppSpec.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.id = "";
                                            object.secret = "";
                                            object.desc = "";
                                        }
                                        if (message.id != null && message.hasOwnProperty("id"))
                                            object.id = message.id;
                                        if (message.secret != null && message.hasOwnProperty("secret"))
                                            object.secret = message.secret;
                                        if (message.desc != null && message.hasOwnProperty("desc"))
                                            object.desc = message.desc;
                                        return object;
                                    };

                                    /**
                                     * Converts this AppSpec to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    AppSpec.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for AppSpec
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    AppSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.AppSpec";
                                    };

                                    return AppSpec;
                                })();

                                v1.ClusterRole = (function() {

                                    /**
                                     * Properties of a ClusterRole.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IClusterRole
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null} [metadata] ClusterRole metadata
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleSpec|null} [spec] ClusterRole spec
                                     */

                                    /**
                                     * Constructs a new ClusterRole.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a ClusterRole.
                                     * @implements IClusterRole
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRole=} [properties] Properties to set
                                     */
                                    function ClusterRole(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * ClusterRole metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @instance
                                     */
                                    ClusterRole.prototype.metadata = null;

                                    /**
                                     * ClusterRole spec.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleSpec|null|undefined} spec
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @instance
                                     */
                                    ClusterRole.prototype.spec = null;

                                    /**
                                     * Creates a new ClusterRole instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRole=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole} ClusterRole instance
                                     */
                                    ClusterRole.create = function create(properties) {
                                        return new ClusterRole(properties);
                                    };

                                    /**
                                     * Encodes the specified ClusterRole message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRole} message ClusterRole message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    ClusterRole.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.encode(message.spec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified ClusterRole message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRole} message ClusterRole message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    ClusterRole.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a ClusterRole message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole} ClusterRole
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    ClusterRole.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a ClusterRole message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole} ClusterRole
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    ClusterRole.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a ClusterRole message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    ClusterRole.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.spec != null && message.hasOwnProperty("spec")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.verify(message.spec);
                                            if (error)
                                                return "spec." + error;
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a ClusterRole message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole} ClusterRole
                                     */
                                    ClusterRole.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.fromObject(object.metadata);
                                        }
                                        if (object.spec != null) {
                                            if (typeof object.spec !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.spec: object expected");
                                            message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.fromObject(object.spec);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a ClusterRole message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole} message ClusterRole
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    ClusterRole.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.metadata = null;
                                            object.spec = null;
                                        }
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.toObject(message.metadata, options);
                                        if (message.spec != null && message.hasOwnProperty("spec"))
                                            object.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.toObject(message.spec, options);
                                        return object;
                                    };

                                    /**
                                     * Converts this ClusterRole to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    ClusterRole.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for ClusterRole
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    ClusterRole.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole";
                                    };

                                    return ClusterRole;
                                })();

                                v1.ClusterRoleList = (function() {

                                    /**
                                     * Properties of a ClusterRoleList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IClusterRoleList
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null} [metadata] ClusterRoleList metadata
                                     * @property {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRole>|null} [items] ClusterRoleList items
                                     */

                                    /**
                                     * Constructs a new ClusterRoleList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a ClusterRoleList.
                                     * @implements IClusterRoleList
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleList=} [properties] Properties to set
                                     */
                                    function ClusterRoleList(properties) {
                                        this.items = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * ClusterRoleList metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @instance
                                     */
                                    ClusterRoleList.prototype.metadata = null;

                                    /**
                                     * ClusterRoleList items.
                                     * @member {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRole>} items
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @instance
                                     */
                                    ClusterRoleList.prototype.items = $util.emptyArray;

                                    /**
                                     * Creates a new ClusterRoleList instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleList=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList} ClusterRoleList instance
                                     */
                                    ClusterRoleList.create = function create(properties) {
                                        return new ClusterRoleList(properties);
                                    };

                                    /**
                                     * Encodes the specified ClusterRoleList message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleList} message ClusterRoleList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    ClusterRoleList.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.items != null && message.items.length)
                                            for (let i = 0; i < message.items.length; ++i)
                                                $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified ClusterRoleList message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleList} message ClusterRoleList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    ClusterRoleList.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a ClusterRoleList message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList} ClusterRoleList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    ClusterRoleList.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    if (!(message.items && message.items.length))
                                                        message.items = [];
                                                    message.items.push($root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.decode(reader, reader.uint32()));
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a ClusterRoleList message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList} ClusterRoleList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    ClusterRoleList.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a ClusterRoleList message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    ClusterRoleList.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.items != null && message.hasOwnProperty("items")) {
                                            if (!Array.isArray(message.items))
                                                return "items: array expected";
                                            for (let i = 0; i < message.items.length; ++i) {
                                                let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.verify(message.items[i]);
                                                if (error)
                                                    return "items." + error;
                                            }
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a ClusterRoleList message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList} ClusterRoleList
                                     */
                                    ClusterRoleList.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.fromObject(object.metadata);
                                        }
                                        if (object.items) {
                                            if (!Array.isArray(object.items))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList.items: array expected");
                                            message.items = [];
                                            for (let i = 0; i < object.items.length; ++i) {
                                                if (typeof object.items[i] !== "object")
                                                    throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList.items: object expected");
                                                message.items[i] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.fromObject(object.items[i]);
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a ClusterRoleList message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList} message ClusterRoleList
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    ClusterRoleList.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.items = [];
                                        if (options.defaults)
                                            object.metadata = null;
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.toObject(message.metadata, options);
                                        if (message.items && message.items.length) {
                                            object.items = [];
                                            for (let j = 0; j < message.items.length; ++j)
                                                object.items[j] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRole.toObject(message.items[j], options);
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this ClusterRoleList to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    ClusterRoleList.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for ClusterRoleList
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    ClusterRoleList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleList";
                                    };

                                    return ClusterRoleList;
                                })();

                                v1.ClusterRoleSpec = (function() {

                                    /**
                                     * Properties of a ClusterRoleSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IClusterRoleSpec
                                     * @property {string|null} [desc] ClusterRoleSpec desc
                                     * @property {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IPolicyRule>|null} [rules] ClusterRoleSpec rules
                                     */

                                    /**
                                     * Constructs a new ClusterRoleSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a ClusterRoleSpec.
                                     * @implements IClusterRoleSpec
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleSpec=} [properties] Properties to set
                                     */
                                    function ClusterRoleSpec(properties) {
                                        this.rules = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * ClusterRoleSpec desc.
                                     * @member {string} desc
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @instance
                                     */
                                    ClusterRoleSpec.prototype.desc = "";

                                    /**
                                     * ClusterRoleSpec rules.
                                     * @member {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IPolicyRule>} rules
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @instance
                                     */
                                    ClusterRoleSpec.prototype.rules = $util.emptyArray;

                                    /**
                                     * Creates a new ClusterRoleSpec instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleSpec=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec} ClusterRoleSpec instance
                                     */
                                    ClusterRoleSpec.create = function create(properties) {
                                        return new ClusterRoleSpec(properties);
                                    };

                                    /**
                                     * Encodes the specified ClusterRoleSpec message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleSpec} message ClusterRoleSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    ClusterRoleSpec.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.desc != null && Object.hasOwnProperty.call(message, "desc"))
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.desc);
                                        if (message.rules != null && message.rules.length)
                                            for (let i = 0; i < message.rules.length; ++i)
                                                $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.encode(message.rules[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified ClusterRoleSpec message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IClusterRoleSpec} message ClusterRoleSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    ClusterRoleSpec.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a ClusterRoleSpec message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec} ClusterRoleSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    ClusterRoleSpec.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.desc = reader.string();
                                                    break;
                                                }
                                            case 2: {
                                                    if (!(message.rules && message.rules.length))
                                                        message.rules = [];
                                                    message.rules.push($root.github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.decode(reader, reader.uint32()));
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a ClusterRoleSpec message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec} ClusterRoleSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    ClusterRoleSpec.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a ClusterRoleSpec message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    ClusterRoleSpec.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.desc != null && message.hasOwnProperty("desc"))
                                            if (!$util.isString(message.desc))
                                                return "desc: string expected";
                                        if (message.rules != null && message.hasOwnProperty("rules")) {
                                            if (!Array.isArray(message.rules))
                                                return "rules: array expected";
                                            for (let i = 0; i < message.rules.length; ++i) {
                                                let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.verify(message.rules[i]);
                                                if (error)
                                                    return "rules." + error;
                                            }
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a ClusterRoleSpec message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec} ClusterRoleSpec
                                     */
                                    ClusterRoleSpec.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec();
                                        if (object.desc != null)
                                            message.desc = String(object.desc);
                                        if (object.rules) {
                                            if (!Array.isArray(object.rules))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.rules: array expected");
                                            message.rules = [];
                                            for (let i = 0; i < object.rules.length; ++i) {
                                                if (typeof object.rules[i] !== "object")
                                                    throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec.rules: object expected");
                                                message.rules[i] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.fromObject(object.rules[i]);
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a ClusterRoleSpec message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec} message ClusterRoleSpec
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    ClusterRoleSpec.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.rules = [];
                                        if (options.defaults)
                                            object.desc = "";
                                        if (message.desc != null && message.hasOwnProperty("desc"))
                                            object.desc = message.desc;
                                        if (message.rules && message.rules.length) {
                                            object.rules = [];
                                            for (let j = 0; j < message.rules.length; ++j)
                                                object.rules[j] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.toObject(message.rules[j], options);
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this ClusterRoleSpec to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    ClusterRoleSpec.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for ClusterRoleSpec
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    ClusterRoleSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.ClusterRoleSpec";
                                    };

                                    return ClusterRoleSpec;
                                })();

                                v1.GroupVersionKind = (function() {

                                    /**
                                     * Properties of a GroupVersionKind.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IGroupVersionKind
                                     * @property {string|null} [group] GroupVersionKind group
                                     * @property {string|null} [version] GroupVersionKind version
                                     * @property {string|null} [kind] GroupVersionKind kind
                                     */

                                    /**
                                     * Constructs a new GroupVersionKind.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a GroupVersionKind.
                                     * @implements IGroupVersionKind
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKind=} [properties] Properties to set
                                     */
                                    function GroupVersionKind(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * GroupVersionKind group.
                                     * @member {string} group
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @instance
                                     */
                                    GroupVersionKind.prototype.group = "";

                                    /**
                                     * GroupVersionKind version.
                                     * @member {string} version
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @instance
                                     */
                                    GroupVersionKind.prototype.version = "";

                                    /**
                                     * GroupVersionKind kind.
                                     * @member {string} kind
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @instance
                                     */
                                    GroupVersionKind.prototype.kind = "";

                                    /**
                                     * Creates a new GroupVersionKind instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKind=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind} GroupVersionKind instance
                                     */
                                    GroupVersionKind.create = function create(properties) {
                                        return new GroupVersionKind(properties);
                                    };

                                    /**
                                     * Encodes the specified GroupVersionKind message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKind} message GroupVersionKind message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    GroupVersionKind.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.group);
                                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                                        if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.kind);
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified GroupVersionKind message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKind} message GroupVersionKind message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    GroupVersionKind.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a GroupVersionKind message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind} GroupVersionKind
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    GroupVersionKind.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.group = reader.string();
                                                    break;
                                                }
                                            case 2: {
                                                    message.version = reader.string();
                                                    break;
                                                }
                                            case 3: {
                                                    message.kind = reader.string();
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a GroupVersionKind message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind} GroupVersionKind
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    GroupVersionKind.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a GroupVersionKind message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    GroupVersionKind.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.group != null && message.hasOwnProperty("group"))
                                            if (!$util.isString(message.group))
                                                return "group: string expected";
                                        if (message.version != null && message.hasOwnProperty("version"))
                                            if (!$util.isString(message.version))
                                                return "version: string expected";
                                        if (message.kind != null && message.hasOwnProperty("kind"))
                                            if (!$util.isString(message.kind))
                                                return "kind: string expected";
                                        return null;
                                    };

                                    /**
                                     * Creates a GroupVersionKind message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind} GroupVersionKind
                                     */
                                    GroupVersionKind.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind();
                                        if (object.group != null)
                                            message.group = String(object.group);
                                        if (object.version != null)
                                            message.version = String(object.version);
                                        if (object.kind != null)
                                            message.kind = String(object.kind);
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a GroupVersionKind message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind} message GroupVersionKind
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    GroupVersionKind.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.group = "";
                                            object.version = "";
                                            object.kind = "";
                                        }
                                        if (message.group != null && message.hasOwnProperty("group"))
                                            object.group = message.group;
                                        if (message.version != null && message.hasOwnProperty("version"))
                                            object.version = message.version;
                                        if (message.kind != null && message.hasOwnProperty("kind"))
                                            object.kind = message.kind;
                                        return object;
                                    };

                                    /**
                                     * Converts this GroupVersionKind to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    GroupVersionKind.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for GroupVersionKind
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    GroupVersionKind.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind";
                                    };

                                    return GroupVersionKind;
                                })();

                                v1.GroupVersionKindRule = (function() {

                                    /**
                                     * Properties of a GroupVersionKindRule.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IGroupVersionKindRule
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null} [metadata] GroupVersionKindRule metadata
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRuleSpec|null} [spec] GroupVersionKindRule spec
                                     */

                                    /**
                                     * Constructs a new GroupVersionKindRule.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a GroupVersionKindRule.
                                     * @implements IGroupVersionKindRule
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRule=} [properties] Properties to set
                                     */
                                    function GroupVersionKindRule(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * GroupVersionKindRule metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @instance
                                     */
                                    GroupVersionKindRule.prototype.metadata = null;

                                    /**
                                     * GroupVersionKindRule spec.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRuleSpec|null|undefined} spec
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @instance
                                     */
                                    GroupVersionKindRule.prototype.spec = null;

                                    /**
                                     * Creates a new GroupVersionKindRule instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRule=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule} GroupVersionKindRule instance
                                     */
                                    GroupVersionKindRule.create = function create(properties) {
                                        return new GroupVersionKindRule(properties);
                                    };

                                    /**
                                     * Encodes the specified GroupVersionKindRule message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRule} message GroupVersionKindRule message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    GroupVersionKindRule.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.encode(message.spec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified GroupVersionKindRule message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRule} message GroupVersionKindRule message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    GroupVersionKindRule.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a GroupVersionKindRule message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule} GroupVersionKindRule
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    GroupVersionKindRule.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a GroupVersionKindRule message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule} GroupVersionKindRule
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    GroupVersionKindRule.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a GroupVersionKindRule message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    GroupVersionKindRule.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.spec != null && message.hasOwnProperty("spec")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.verify(message.spec);
                                            if (error)
                                                return "spec." + error;
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a GroupVersionKindRule message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule} GroupVersionKindRule
                                     */
                                    GroupVersionKindRule.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.fromObject(object.metadata);
                                        }
                                        if (object.spec != null) {
                                            if (typeof object.spec !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.spec: object expected");
                                            message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.fromObject(object.spec);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a GroupVersionKindRule message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule} message GroupVersionKindRule
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    GroupVersionKindRule.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.metadata = null;
                                            object.spec = null;
                                        }
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.toObject(message.metadata, options);
                                        if (message.spec != null && message.hasOwnProperty("spec"))
                                            object.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.toObject(message.spec, options);
                                        return object;
                                    };

                                    /**
                                     * Converts this GroupVersionKindRule to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    GroupVersionKindRule.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for GroupVersionKindRule
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    GroupVersionKindRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule";
                                    };

                                    return GroupVersionKindRule;
                                })();

                                v1.GroupVersionKindRuleList = (function() {

                                    /**
                                     * Properties of a GroupVersionKindRuleList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IGroupVersionKindRuleList
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null} [metadata] GroupVersionKindRuleList metadata
                                     * @property {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRule>|null} [items] GroupVersionKindRuleList items
                                     */

                                    /**
                                     * Constructs a new GroupVersionKindRuleList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a GroupVersionKindRuleList.
                                     * @implements IGroupVersionKindRuleList
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRuleList=} [properties] Properties to set
                                     */
                                    function GroupVersionKindRuleList(properties) {
                                        this.items = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * GroupVersionKindRuleList metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @instance
                                     */
                                    GroupVersionKindRuleList.prototype.metadata = null;

                                    /**
                                     * GroupVersionKindRuleList items.
                                     * @member {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRule>} items
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @instance
                                     */
                                    GroupVersionKindRuleList.prototype.items = $util.emptyArray;

                                    /**
                                     * Creates a new GroupVersionKindRuleList instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRuleList=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList} GroupVersionKindRuleList instance
                                     */
                                    GroupVersionKindRuleList.create = function create(properties) {
                                        return new GroupVersionKindRuleList(properties);
                                    };

                                    /**
                                     * Encodes the specified GroupVersionKindRuleList message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRuleList} message GroupVersionKindRuleList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    GroupVersionKindRuleList.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.items != null && message.items.length)
                                            for (let i = 0; i < message.items.length; ++i)
                                                $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified GroupVersionKindRuleList message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKindRuleList} message GroupVersionKindRuleList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    GroupVersionKindRuleList.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a GroupVersionKindRuleList message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList} GroupVersionKindRuleList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    GroupVersionKindRuleList.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    if (!(message.items && message.items.length))
                                                        message.items = [];
                                                    message.items.push($root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.decode(reader, reader.uint32()));
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a GroupVersionKindRuleList message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList} GroupVersionKindRuleList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    GroupVersionKindRuleList.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a GroupVersionKindRuleList message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    GroupVersionKindRuleList.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.items != null && message.hasOwnProperty("items")) {
                                            if (!Array.isArray(message.items))
                                                return "items: array expected";
                                            for (let i = 0; i < message.items.length; ++i) {
                                                let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.verify(message.items[i]);
                                                if (error)
                                                    return "items." + error;
                                            }
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a GroupVersionKindRuleList message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList} GroupVersionKindRuleList
                                     */
                                    GroupVersionKindRuleList.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.fromObject(object.metadata);
                                        }
                                        if (object.items) {
                                            if (!Array.isArray(object.items))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList.items: array expected");
                                            message.items = [];
                                            for (let i = 0; i < object.items.length; ++i) {
                                                if (typeof object.items[i] !== "object")
                                                    throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList.items: object expected");
                                                message.items[i] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.fromObject(object.items[i]);
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a GroupVersionKindRuleList message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList} message GroupVersionKindRuleList
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    GroupVersionKindRuleList.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.items = [];
                                        if (options.defaults)
                                            object.metadata = null;
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.toObject(message.metadata, options);
                                        if (message.items && message.items.length) {
                                            object.items = [];
                                            for (let j = 0; j < message.items.length; ++j)
                                                object.items[j] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRule.toObject(message.items[j], options);
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this GroupVersionKindRuleList to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    GroupVersionKindRuleList.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for GroupVersionKindRuleList
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    GroupVersionKindRuleList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKindRuleList";
                                    };

                                    return GroupVersionKindRuleList;
                                })();

                                v1.PolicyRule = (function() {

                                    /**
                                     * Properties of a PolicyRule.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IPolicyRule
                                     * @property {string|null} [namespace] PolicyRule namespace
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKind|null} [groupVersionKind] PolicyRule groupVersionKind
                                     * @property {Array.<string>|null} [verbs] PolicyRule verbs
                                     */

                                    /**
                                     * Constructs a new PolicyRule.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a PolicyRule.
                                     * @implements IPolicyRule
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IPolicyRule=} [properties] Properties to set
                                     */
                                    function PolicyRule(properties) {
                                        this.verbs = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * PolicyRule namespace.
                                     * @member {string} namespace
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @instance
                                     */
                                    PolicyRule.prototype.namespace = "";

                                    /**
                                     * PolicyRule groupVersionKind.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKind|null|undefined} groupVersionKind
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @instance
                                     */
                                    PolicyRule.prototype.groupVersionKind = null;

                                    /**
                                     * PolicyRule verbs.
                                     * @member {Array.<string>} verbs
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @instance
                                     */
                                    PolicyRule.prototype.verbs = $util.emptyArray;

                                    /**
                                     * Creates a new PolicyRule instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IPolicyRule=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule} PolicyRule instance
                                     */
                                    PolicyRule.create = function create(properties) {
                                        return new PolicyRule(properties);
                                    };

                                    /**
                                     * Encodes the specified PolicyRule message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IPolicyRule} message PolicyRule message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    PolicyRule.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.namespace != null && Object.hasOwnProperty.call(message, "namespace"))
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.namespace);
                                        if (message.groupVersionKind != null && Object.hasOwnProperty.call(message, "groupVersionKind"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.encode(message.groupVersionKind, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        if (message.verbs != null && message.verbs.length)
                                            for (let i = 0; i < message.verbs.length; ++i)
                                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.verbs[i]);
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified PolicyRule message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IPolicyRule} message PolicyRule message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    PolicyRule.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a PolicyRule message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule} PolicyRule
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    PolicyRule.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.namespace = reader.string();
                                                    break;
                                                }
                                            case 2: {
                                                    message.groupVersionKind = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 3: {
                                                    if (!(message.verbs && message.verbs.length))
                                                        message.verbs = [];
                                                    message.verbs.push(reader.string());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a PolicyRule message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule} PolicyRule
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    PolicyRule.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a PolicyRule message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    PolicyRule.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.namespace != null && message.hasOwnProperty("namespace"))
                                            if (!$util.isString(message.namespace))
                                                return "namespace: string expected";
                                        if (message.groupVersionKind != null && message.hasOwnProperty("groupVersionKind")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.verify(message.groupVersionKind);
                                            if (error)
                                                return "groupVersionKind." + error;
                                        }
                                        if (message.verbs != null && message.hasOwnProperty("verbs")) {
                                            if (!Array.isArray(message.verbs))
                                                return "verbs: array expected";
                                            for (let i = 0; i < message.verbs.length; ++i)
                                                if (!$util.isString(message.verbs[i]))
                                                    return "verbs: string[] expected";
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a PolicyRule message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule} PolicyRule
                                     */
                                    PolicyRule.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule();
                                        if (object.namespace != null)
                                            message.namespace = String(object.namespace);
                                        if (object.groupVersionKind != null) {
                                            if (typeof object.groupVersionKind !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.groupVersionKind: object expected");
                                            message.groupVersionKind = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.fromObject(object.groupVersionKind);
                                        }
                                        if (object.verbs) {
                                            if (!Array.isArray(object.verbs))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule.verbs: array expected");
                                            message.verbs = [];
                                            for (let i = 0; i < object.verbs.length; ++i)
                                                message.verbs[i] = String(object.verbs[i]);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a PolicyRule message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule} message PolicyRule
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    PolicyRule.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.verbs = [];
                                        if (options.defaults) {
                                            object.namespace = "";
                                            object.groupVersionKind = null;
                                        }
                                        if (message.namespace != null && message.hasOwnProperty("namespace"))
                                            object.namespace = message.namespace;
                                        if (message.groupVersionKind != null && message.hasOwnProperty("groupVersionKind"))
                                            object.groupVersionKind = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.toObject(message.groupVersionKind, options);
                                        if (message.verbs && message.verbs.length) {
                                            object.verbs = [];
                                            for (let j = 0; j < message.verbs.length; ++j)
                                                object.verbs[j] = message.verbs[j];
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this PolicyRule to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    PolicyRule.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for PolicyRule
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    PolicyRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.PolicyRule";
                                    };

                                    return PolicyRule;
                                })();

                                v1.RbacServiceAccount = (function() {

                                    /**
                                     * Properties of a RbacServiceAccount.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IRbacServiceAccount
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null} [metadata] RbacServiceAccount metadata
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountSpec|null} [spec] RbacServiceAccount spec
                                     */

                                    /**
                                     * Constructs a new RbacServiceAccount.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a RbacServiceAccount.
                                     * @implements IRbacServiceAccount
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccount=} [properties] Properties to set
                                     */
                                    function RbacServiceAccount(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * RbacServiceAccount metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @instance
                                     */
                                    RbacServiceAccount.prototype.metadata = null;

                                    /**
                                     * RbacServiceAccount spec.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountSpec|null|undefined} spec
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @instance
                                     */
                                    RbacServiceAccount.prototype.spec = null;

                                    /**
                                     * Creates a new RbacServiceAccount instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccount=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount} RbacServiceAccount instance
                                     */
                                    RbacServiceAccount.create = function create(properties) {
                                        return new RbacServiceAccount(properties);
                                    };

                                    /**
                                     * Encodes the specified RbacServiceAccount message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccount} message RbacServiceAccount message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RbacServiceAccount.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.encode(message.spec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified RbacServiceAccount message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccount} message RbacServiceAccount message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RbacServiceAccount.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a RbacServiceAccount message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount} RbacServiceAccount
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RbacServiceAccount.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a RbacServiceAccount message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount} RbacServiceAccount
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RbacServiceAccount.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a RbacServiceAccount message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    RbacServiceAccount.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.spec != null && message.hasOwnProperty("spec")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.verify(message.spec);
                                            if (error)
                                                return "spec." + error;
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a RbacServiceAccount message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount} RbacServiceAccount
                                     */
                                    RbacServiceAccount.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.fromObject(object.metadata);
                                        }
                                        if (object.spec != null) {
                                            if (typeof object.spec !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.spec: object expected");
                                            message.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.fromObject(object.spec);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a RbacServiceAccount message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount} message RbacServiceAccount
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    RbacServiceAccount.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults) {
                                            object.metadata = null;
                                            object.spec = null;
                                        }
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.toObject(message.metadata, options);
                                        if (message.spec != null && message.hasOwnProperty("spec"))
                                            object.spec = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.toObject(message.spec, options);
                                        return object;
                                    };

                                    /**
                                     * Converts this RbacServiceAccount to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    RbacServiceAccount.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for RbacServiceAccount
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    RbacServiceAccount.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount";
                                    };

                                    return RbacServiceAccount;
                                })();

                                v1.RbacServiceAccountList = (function() {

                                    /**
                                     * Properties of a RbacServiceAccountList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IRbacServiceAccountList
                                     * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null} [metadata] RbacServiceAccountList metadata
                                     * @property {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccount>|null} [items] RbacServiceAccountList items
                                     */

                                    /**
                                     * Constructs a new RbacServiceAccountList.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a RbacServiceAccountList.
                                     * @implements IRbacServiceAccountList
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountList=} [properties] Properties to set
                                     */
                                    function RbacServiceAccountList(properties) {
                                        this.items = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * RbacServiceAccountList metadata.
                                     * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null|undefined} metadata
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @instance
                                     */
                                    RbacServiceAccountList.prototype.metadata = null;

                                    /**
                                     * RbacServiceAccountList items.
                                     * @member {Array.<github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccount>} items
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @instance
                                     */
                                    RbacServiceAccountList.prototype.items = $util.emptyArray;

                                    /**
                                     * Creates a new RbacServiceAccountList instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountList=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList} RbacServiceAccountList instance
                                     */
                                    RbacServiceAccountList.create = function create(properties) {
                                        return new RbacServiceAccountList(properties);
                                    };

                                    /**
                                     * Encodes the specified RbacServiceAccountList message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountList} message RbacServiceAccountList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RbacServiceAccountList.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.items != null && message.items.length)
                                            for (let i = 0; i < message.items.length; ++i)
                                                $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified RbacServiceAccountList message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountList} message RbacServiceAccountList message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RbacServiceAccountList.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a RbacServiceAccountList message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList} RbacServiceAccountList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RbacServiceAccountList.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    if (!(message.items && message.items.length))
                                                        message.items = [];
                                                    message.items.push($root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.decode(reader, reader.uint32()));
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a RbacServiceAccountList message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList} RbacServiceAccountList
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RbacServiceAccountList.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a RbacServiceAccountList message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    RbacServiceAccountList.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify(message.metadata);
                                            if (error)
                                                return "metadata." + error;
                                        }
                                        if (message.items != null && message.hasOwnProperty("items")) {
                                            if (!Array.isArray(message.items))
                                                return "items: array expected";
                                            for (let i = 0; i < message.items.length; ++i) {
                                                let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.verify(message.items[i]);
                                                if (error)
                                                    return "items." + error;
                                            }
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a RbacServiceAccountList message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList} RbacServiceAccountList
                                     */
                                    RbacServiceAccountList.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList();
                                        if (object.metadata != null) {
                                            if (typeof object.metadata !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList.metadata: object expected");
                                            message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.fromObject(object.metadata);
                                        }
                                        if (object.items) {
                                            if (!Array.isArray(object.items))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList.items: array expected");
                                            message.items = [];
                                            for (let i = 0; i < object.items.length; ++i) {
                                                if (typeof object.items[i] !== "object")
                                                    throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList.items: object expected");
                                                message.items[i] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.fromObject(object.items[i]);
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a RbacServiceAccountList message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList} message RbacServiceAccountList
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    RbacServiceAccountList.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.items = [];
                                        if (options.defaults)
                                            object.metadata = null;
                                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                                            object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.toObject(message.metadata, options);
                                        if (message.items && message.items.length) {
                                            object.items = [];
                                            for (let j = 0; j < message.items.length; ++j)
                                                object.items[j] = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccount.toObject(message.items[j], options);
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this RbacServiceAccountList to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    RbacServiceAccountList.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for RbacServiceAccountList
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    RbacServiceAccountList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountList";
                                    };

                                    return RbacServiceAccountList;
                                })();

                                v1.RbacServiceAccountSpec = (function() {

                                    /**
                                     * Properties of a RbacServiceAccountSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IRbacServiceAccountSpec
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAccountMeta|null} [accountMeta] RbacServiceAccountSpec accountMeta
                                     * @property {Array.<string>|null} [apps] RbacServiceAccountSpec apps
                                     */

                                    /**
                                     * Constructs a new RbacServiceAccountSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a RbacServiceAccountSpec.
                                     * @implements IRbacServiceAccountSpec
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountSpec=} [properties] Properties to set
                                     */
                                    function RbacServiceAccountSpec(properties) {
                                        this.apps = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * RbacServiceAccountSpec accountMeta.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IAccountMeta|null|undefined} accountMeta
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @instance
                                     */
                                    RbacServiceAccountSpec.prototype.accountMeta = null;

                                    /**
                                     * RbacServiceAccountSpec apps.
                                     * @member {Array.<string>} apps
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @instance
                                     */
                                    RbacServiceAccountSpec.prototype.apps = $util.emptyArray;

                                    /**
                                     * Creates a new RbacServiceAccountSpec instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountSpec=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec} RbacServiceAccountSpec instance
                                     */
                                    RbacServiceAccountSpec.create = function create(properties) {
                                        return new RbacServiceAccountSpec(properties);
                                    };

                                    /**
                                     * Encodes the specified RbacServiceAccountSpec message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountSpec} message RbacServiceAccountSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RbacServiceAccountSpec.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.accountMeta != null && Object.hasOwnProperty.call(message, "accountMeta"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.encode(message.accountMeta, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.apps != null && message.apps.length)
                                            for (let i = 0; i < message.apps.length; ++i)
                                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.apps[i]);
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified RbacServiceAccountSpec message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRbacServiceAccountSpec} message RbacServiceAccountSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RbacServiceAccountSpec.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a RbacServiceAccountSpec message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec} RbacServiceAccountSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RbacServiceAccountSpec.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.accountMeta = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    if (!(message.apps && message.apps.length))
                                                        message.apps = [];
                                                    message.apps.push(reader.string());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a RbacServiceAccountSpec message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec} RbacServiceAccountSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RbacServiceAccountSpec.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a RbacServiceAccountSpec message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    RbacServiceAccountSpec.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.accountMeta != null && message.hasOwnProperty("accountMeta")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.verify(message.accountMeta);
                                            if (error)
                                                return "accountMeta." + error;
                                        }
                                        if (message.apps != null && message.hasOwnProperty("apps")) {
                                            if (!Array.isArray(message.apps))
                                                return "apps: array expected";
                                            for (let i = 0; i < message.apps.length; ++i)
                                                if (!$util.isString(message.apps[i]))
                                                    return "apps: string[] expected";
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a RbacServiceAccountSpec message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec} RbacServiceAccountSpec
                                     */
                                    RbacServiceAccountSpec.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec();
                                        if (object.accountMeta != null) {
                                            if (typeof object.accountMeta !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.accountMeta: object expected");
                                            message.accountMeta = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.fromObject(object.accountMeta);
                                        }
                                        if (object.apps) {
                                            if (!Array.isArray(object.apps))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec.apps: array expected");
                                            message.apps = [];
                                            for (let i = 0; i < object.apps.length; ++i)
                                                message.apps[i] = String(object.apps[i]);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a RbacServiceAccountSpec message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec} message RbacServiceAccountSpec
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    RbacServiceAccountSpec.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.apps = [];
                                        if (options.defaults)
                                            object.accountMeta = null;
                                        if (message.accountMeta != null && message.hasOwnProperty("accountMeta"))
                                            object.accountMeta = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.AccountMeta.toObject(message.accountMeta, options);
                                        if (message.apps && message.apps.length) {
                                            object.apps = [];
                                            for (let j = 0; j < message.apps.length; ++j)
                                                object.apps[j] = message.apps[j];
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this RbacServiceAccountSpec to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    RbacServiceAccountSpec.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for RbacServiceAccountSpec
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    RbacServiceAccountSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.RbacServiceAccountSpec";
                                    };

                                    return RbacServiceAccountSpec;
                                })();

                                v1.RoleRef = (function() {

                                    /**
                                     * Properties of a RoleRef.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IRoleRef
                                     * @property {string|null} [clusterRoleName] RoleRef clusterRoleName
                                     */

                                    /**
                                     * Constructs a new RoleRef.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a RoleRef.
                                     * @implements IRoleRef
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRoleRef=} [properties] Properties to set
                                     */
                                    function RoleRef(properties) {
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * RoleRef clusterRoleName.
                                     * @member {string} clusterRoleName
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @instance
                                     */
                                    RoleRef.prototype.clusterRoleName = "";

                                    /**
                                     * Creates a new RoleRef instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRoleRef=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef} RoleRef instance
                                     */
                                    RoleRef.create = function create(properties) {
                                        return new RoleRef(properties);
                                    };

                                    /**
                                     * Encodes the specified RoleRef message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRoleRef} message RoleRef message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RoleRef.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.clusterRoleName != null && Object.hasOwnProperty.call(message, "clusterRoleName"))
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.clusterRoleName);
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified RoleRef message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRoleRef} message RoleRef message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RoleRef.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a RoleRef message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef} RoleRef
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RoleRef.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.clusterRoleName = reader.string();
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a RoleRef message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef} RoleRef
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RoleRef.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a RoleRef message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    RoleRef.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.clusterRoleName != null && message.hasOwnProperty("clusterRoleName"))
                                            if (!$util.isString(message.clusterRoleName))
                                                return "clusterRoleName: string expected";
                                        return null;
                                    };

                                    /**
                                     * Creates a RoleRef message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef} RoleRef
                                     */
                                    RoleRef.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef();
                                        if (object.clusterRoleName != null)
                                            message.clusterRoleName = String(object.clusterRoleName);
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a RoleRef message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef} message RoleRef
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    RoleRef.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.defaults)
                                            object.clusterRoleName = "";
                                        if (message.clusterRoleName != null && message.hasOwnProperty("clusterRoleName"))
                                            object.clusterRoleName = message.clusterRoleName;
                                        return object;
                                    };

                                    /**
                                     * Converts this RoleRef to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    RoleRef.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for RoleRef
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    RoleRef.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.RoleRef";
                                    };

                                    return RoleRef;
                                })();

                                v1.RuleSpec = (function() {

                                    /**
                                     * Properties of a RuleSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @interface IRuleSpec
                                     * @property {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKind|null} [groupVersionKind] RuleSpec groupVersionKind
                                     * @property {Array.<string>|null} [verbs] RuleSpec verbs
                                     */

                                    /**
                                     * Constructs a new RuleSpec.
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1
                                     * @classdesc Represents a RuleSpec.
                                     * @implements IRuleSpec
                                     * @constructor
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRuleSpec=} [properties] Properties to set
                                     */
                                    function RuleSpec(properties) {
                                        this.verbs = [];
                                        if (properties)
                                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * RuleSpec groupVersionKind.
                                     * @member {github.com.nevercase.discovery.pkg.apis.rbac.v1.IGroupVersionKind|null|undefined} groupVersionKind
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @instance
                                     */
                                    RuleSpec.prototype.groupVersionKind = null;

                                    /**
                                     * RuleSpec verbs.
                                     * @member {Array.<string>} verbs
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @instance
                                     */
                                    RuleSpec.prototype.verbs = $util.emptyArray;

                                    /**
                                     * Creates a new RuleSpec instance using the specified properties.
                                     * @function create
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRuleSpec=} [properties] Properties to set
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec} RuleSpec instance
                                     */
                                    RuleSpec.create = function create(properties) {
                                        return new RuleSpec(properties);
                                    };

                                    /**
                                     * Encodes the specified RuleSpec message. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.verify|verify} messages.
                                     * @function encode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRuleSpec} message RuleSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RuleSpec.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.groupVersionKind != null && Object.hasOwnProperty.call(message, "groupVersionKind"))
                                            $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.encode(message.groupVersionKind, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                        if (message.verbs != null && message.verbs.length)
                                            for (let i = 0; i < message.verbs.length; ++i)
                                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.verbs[i]);
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified RuleSpec message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.IRuleSpec} message RuleSpec message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    RuleSpec.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a RuleSpec message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec} RuleSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RuleSpec.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec();
                                        while (reader.pos < end) {
                                            let tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1: {
                                                    message.groupVersionKind = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.decode(reader, reader.uint32());
                                                    break;
                                                }
                                            case 2: {
                                                    if (!(message.verbs && message.verbs.length))
                                                        message.verbs = [];
                                                    message.verbs.push(reader.string());
                                                    break;
                                                }
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a RuleSpec message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec} RuleSpec
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    RuleSpec.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a RuleSpec message.
                                     * @function verify
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    RuleSpec.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.groupVersionKind != null && message.hasOwnProperty("groupVersionKind")) {
                                            let error = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.verify(message.groupVersionKind);
                                            if (error)
                                                return "groupVersionKind." + error;
                                        }
                                        if (message.verbs != null && message.hasOwnProperty("verbs")) {
                                            if (!Array.isArray(message.verbs))
                                                return "verbs: array expected";
                                            for (let i = 0; i < message.verbs.length; ++i)
                                                if (!$util.isString(message.verbs[i]))
                                                    return "verbs: string[] expected";
                                        }
                                        return null;
                                    };

                                    /**
                                     * Creates a RuleSpec message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec} RuleSpec
                                     */
                                    RuleSpec.fromObject = function fromObject(object) {
                                        if (object instanceof $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec)
                                            return object;
                                        let message = new $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec();
                                        if (object.groupVersionKind != null) {
                                            if (typeof object.groupVersionKind !== "object")
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.groupVersionKind: object expected");
                                            message.groupVersionKind = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.fromObject(object.groupVersionKind);
                                        }
                                        if (object.verbs) {
                                            if (!Array.isArray(object.verbs))
                                                throw TypeError(".github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec.verbs: array expected");
                                            message.verbs = [];
                                            for (let i = 0; i < object.verbs.length; ++i)
                                                message.verbs[i] = String(object.verbs[i]);
                                        }
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a RuleSpec message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec} message RuleSpec
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    RuleSpec.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        let object = {};
                                        if (options.arrays || options.defaults)
                                            object.verbs = [];
                                        if (options.defaults)
                                            object.groupVersionKind = null;
                                        if (message.groupVersionKind != null && message.hasOwnProperty("groupVersionKind"))
                                            object.groupVersionKind = $root.github.com.nevercase.discovery.pkg.apis.rbac.v1.GroupVersionKind.toObject(message.groupVersionKind, options);
                                        if (message.verbs && message.verbs.length) {
                                            object.verbs = [];
                                            for (let j = 0; j < message.verbs.length; ++j)
                                                object.verbs[j] = message.verbs[j];
                                        }
                                        return object;
                                    };

                                    /**
                                     * Converts this RuleSpec to JSON.
                                     * @function toJSON
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    RuleSpec.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    /**
                                     * Gets the default type url for RuleSpec
                                     * @function getTypeUrl
                                     * @memberof github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec
                                     * @static
                                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                     * @returns {string} The default type url
                                     */
                                    RuleSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                        if (typeUrlPrefix === undefined) {
                                            typeUrlPrefix = "type.googleapis.com";
                                        }
                                        return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.apis.rbac.v1.RuleSpec";
                                    };

                                    return RuleSpec;
                                })();

                                return v1;
                            })();

                            return rbac;
                        })();

                        return apis;
                    })();

                    pkg.authority = (function() {

                        /**
                         * Namespace authority.
                         * @memberof github.com.nevercase.discovery.pkg
                         * @namespace
                         */
                        const authority = {};

                        authority.proto = (function() {

                            /**
                             * Namespace proto.
                             * @memberof github.com.nevercase.discovery.pkg.authority
                             * @namespace
                             */
                            const proto = {};

                            proto.Context = (function() {

                                /**
                                 * Properties of a Context.
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto
                                 * @interface IContext
                                 * @property {string|null} [token] Context token
                                 * @property {boolean|null} [isAdmin] Context isAdmin
                                 * @property {number|null} [expireAt] Context expireAt
                                 */

                                /**
                                 * Constructs a new Context.
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto
                                 * @classdesc Represents a Context.
                                 * @implements IContext
                                 * @constructor
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IContext=} [properties] Properties to set
                                 */
                                function Context(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Context token.
                                 * @member {string} token
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @instance
                                 */
                                Context.prototype.token = "";

                                /**
                                 * Context isAdmin.
                                 * @member {boolean} isAdmin
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @instance
                                 */
                                Context.prototype.isAdmin = false;

                                /**
                                 * Context expireAt.
                                 * @member {number} expireAt
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @instance
                                 */
                                Context.prototype.expireAt = 0;

                                /**
                                 * Creates a new Context instance using the specified properties.
                                 * @function create
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IContext=} [properties] Properties to set
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Context} Context instance
                                 */
                                Context.create = function create(properties) {
                                    return new Context(properties);
                                };

                                /**
                                 * Encodes the specified Context message. Does not implicitly {@link github.com.nevercase.discovery.pkg.authority.proto.Context.verify|verify} messages.
                                 * @function encode
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IContext} message Context message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Context.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                                    if (message.isAdmin != null && Object.hasOwnProperty.call(message, "isAdmin"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isAdmin);
                                    if (message.expireAt != null && Object.hasOwnProperty.call(message, "expireAt"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.expireAt);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Context message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.authority.proto.Context.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IContext} message Context message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Context.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Context message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Context} Context
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Context.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.authority.proto.Context();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.token = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.isAdmin = reader.bool();
                                                break;
                                            }
                                        case 3: {
                                                message.expireAt = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Context message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Context} Context
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Context.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Context message.
                                 * @function verify
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Context.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.token != null && message.hasOwnProperty("token"))
                                        if (!$util.isString(message.token))
                                            return "token: string expected";
                                    if (message.isAdmin != null && message.hasOwnProperty("isAdmin"))
                                        if (typeof message.isAdmin !== "boolean")
                                            return "isAdmin: boolean expected";
                                    if (message.expireAt != null && message.hasOwnProperty("expireAt"))
                                        if (!$util.isInteger(message.expireAt))
                                            return "expireAt: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Context message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Context} Context
                                 */
                                Context.fromObject = function fromObject(object) {
                                    if (object instanceof $root.github.com.nevercase.discovery.pkg.authority.proto.Context)
                                        return object;
                                    let message = new $root.github.com.nevercase.discovery.pkg.authority.proto.Context();
                                    if (object.token != null)
                                        message.token = String(object.token);
                                    if (object.isAdmin != null)
                                        message.isAdmin = Boolean(object.isAdmin);
                                    if (object.expireAt != null)
                                        message.expireAt = object.expireAt | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Context message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.Context} message Context
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Context.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.token = "";
                                        object.isAdmin = false;
                                        object.expireAt = 0;
                                    }
                                    if (message.token != null && message.hasOwnProperty("token"))
                                        object.token = message.token;
                                    if (message.isAdmin != null && message.hasOwnProperty("isAdmin"))
                                        object.isAdmin = message.isAdmin;
                                    if (message.expireAt != null && message.hasOwnProperty("expireAt"))
                                        object.expireAt = message.expireAt;
                                    return object;
                                };

                                /**
                                 * Converts this Context to JSON.
                                 * @function toJSON
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Context.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Context
                                 * @function getTypeUrl
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Context
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Context.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.authority.proto.Context";
                                };

                                return Context;
                            })();

                            proto.Request = (function() {

                                /**
                                 * Properties of a Request.
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto
                                 * @interface IRequest
                                 * @property {string|null} [serviceRoute] Request serviceRoute
                                 * @property {Uint8Array|null} [data] Request data
                                 */

                                /**
                                 * Constructs a new Request.
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto
                                 * @classdesc Represents a Request.
                                 * @implements IRequest
                                 * @constructor
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IRequest=} [properties] Properties to set
                                 */
                                function Request(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Request serviceRoute.
                                 * @member {string} serviceRoute
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @instance
                                 */
                                Request.prototype.serviceRoute = "";

                                /**
                                 * Request data.
                                 * @member {Uint8Array} data
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @instance
                                 */
                                Request.prototype.data = $util.newBuffer([]);

                                /**
                                 * Creates a new Request instance using the specified properties.
                                 * @function create
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IRequest=} [properties] Properties to set
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Request} Request instance
                                 */
                                Request.create = function create(properties) {
                                    return new Request(properties);
                                };

                                /**
                                 * Encodes the specified Request message. Does not implicitly {@link github.com.nevercase.discovery.pkg.authority.proto.Request.verify|verify} messages.
                                 * @function encode
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IRequest} message Request message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Request.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.serviceRoute != null && Object.hasOwnProperty.call(message, "serviceRoute"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceRoute);
                                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Request message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.authority.proto.Request.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IRequest} message Request message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Request.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Request message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Request} Request
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Request.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.authority.proto.Request();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.serviceRoute = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.data = reader.bytes();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Request message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Request} Request
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Request.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Request message.
                                 * @function verify
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Request.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.serviceRoute != null && message.hasOwnProperty("serviceRoute"))
                                        if (!$util.isString(message.serviceRoute))
                                            return "serviceRoute: string expected";
                                    if (message.data != null && message.hasOwnProperty("data"))
                                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                            return "data: buffer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Request message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Request} Request
                                 */
                                Request.fromObject = function fromObject(object) {
                                    if (object instanceof $root.github.com.nevercase.discovery.pkg.authority.proto.Request)
                                        return object;
                                    let message = new $root.github.com.nevercase.discovery.pkg.authority.proto.Request();
                                    if (object.serviceRoute != null)
                                        message.serviceRoute = String(object.serviceRoute);
                                    if (object.data != null)
                                        if (typeof object.data === "string")
                                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                                        else if (object.data.length >= 0)
                                            message.data = object.data;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Request message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.Request} message Request
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Request.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.serviceRoute = "";
                                        if (options.bytes === String)
                                            object.data = "";
                                        else {
                                            object.data = [];
                                            if (options.bytes !== Array)
                                                object.data = $util.newBuffer(object.data);
                                        }
                                    }
                                    if (message.serviceRoute != null && message.hasOwnProperty("serviceRoute"))
                                        object.serviceRoute = message.serviceRoute;
                                    if (message.data != null && message.hasOwnProperty("data"))
                                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                                    return object;
                                };

                                /**
                                 * Converts this Request to JSON.
                                 * @function toJSON
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Request.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Request
                                 * @function getTypeUrl
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Request
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Request.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.authority.proto.Request";
                                };

                                return Request;
                            })();

                            proto.Response = (function() {

                                /**
                                 * Properties of a Response.
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto
                                 * @interface IResponse
                                 * @property {string|null} [serviceRoute] Response serviceRoute
                                 * @property {number|null} [code] Response code
                                 * @property {string|null} [message] Response message
                                 * @property {Uint8Array|null} [data] Response data
                                 */

                                /**
                                 * Constructs a new Response.
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto
                                 * @classdesc Represents a Response.
                                 * @implements IResponse
                                 * @constructor
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IResponse=} [properties] Properties to set
                                 */
                                function Response(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Response serviceRoute.
                                 * @member {string} serviceRoute
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @instance
                                 */
                                Response.prototype.serviceRoute = "";

                                /**
                                 * Response code.
                                 * @member {number} code
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @instance
                                 */
                                Response.prototype.code = 0;

                                /**
                                 * Response message.
                                 * @member {string} message
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @instance
                                 */
                                Response.prototype.message = "";

                                /**
                                 * Response data.
                                 * @member {Uint8Array} data
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @instance
                                 */
                                Response.prototype.data = $util.newBuffer([]);

                                /**
                                 * Creates a new Response instance using the specified properties.
                                 * @function create
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IResponse=} [properties] Properties to set
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Response} Response instance
                                 */
                                Response.create = function create(properties) {
                                    return new Response(properties);
                                };

                                /**
                                 * Encodes the specified Response message. Does not implicitly {@link github.com.nevercase.discovery.pkg.authority.proto.Response.verify|verify} messages.
                                 * @function encode
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IResponse} message Response message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Response.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.serviceRoute != null && Object.hasOwnProperty.call(message, "serviceRoute"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceRoute);
                                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
                                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
                                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Response message, length delimited. Does not implicitly {@link github.com.nevercase.discovery.pkg.authority.proto.Response.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.IResponse} message Response message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Response.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Response message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Response} Response
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Response.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.github.com.nevercase.discovery.pkg.authority.proto.Response();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.serviceRoute = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.code = reader.int32();
                                                break;
                                            }
                                        case 3: {
                                                message.message = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.data = reader.bytes();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Response message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Response} Response
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Response.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Response message.
                                 * @function verify
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Response.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.serviceRoute != null && message.hasOwnProperty("serviceRoute"))
                                        if (!$util.isString(message.serviceRoute))
                                            return "serviceRoute: string expected";
                                    if (message.code != null && message.hasOwnProperty("code"))
                                        if (!$util.isInteger(message.code))
                                            return "code: integer expected";
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    if (message.data != null && message.hasOwnProperty("data"))
                                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                            return "data: buffer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Response message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {github.com.nevercase.discovery.pkg.authority.proto.Response} Response
                                 */
                                Response.fromObject = function fromObject(object) {
                                    if (object instanceof $root.github.com.nevercase.discovery.pkg.authority.proto.Response)
                                        return object;
                                    let message = new $root.github.com.nevercase.discovery.pkg.authority.proto.Response();
                                    if (object.serviceRoute != null)
                                        message.serviceRoute = String(object.serviceRoute);
                                    if (object.code != null)
                                        message.code = object.code | 0;
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    if (object.data != null)
                                        if (typeof object.data === "string")
                                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                                        else if (object.data.length >= 0)
                                            message.data = object.data;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Response message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {github.com.nevercase.discovery.pkg.authority.proto.Response} message Response
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Response.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.serviceRoute = "";
                                        object.code = 0;
                                        object.message = "";
                                        if (options.bytes === String)
                                            object.data = "";
                                        else {
                                            object.data = [];
                                            if (options.bytes !== Array)
                                                object.data = $util.newBuffer(object.data);
                                        }
                                    }
                                    if (message.serviceRoute != null && message.hasOwnProperty("serviceRoute"))
                                        object.serviceRoute = message.serviceRoute;
                                    if (message.code != null && message.hasOwnProperty("code"))
                                        object.code = message.code;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    if (message.data != null && message.hasOwnProperty("data"))
                                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                                    return object;
                                };

                                /**
                                 * Converts this Response to JSON.
                                 * @function toJSON
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Response.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Response
                                 * @function getTypeUrl
                                 * @memberof github.com.nevercase.discovery.pkg.authority.proto.Response
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Response.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/github.com.nevercase.discovery.pkg.authority.proto.Response";
                                };

                                return Response;
                            })();

                            return proto;
                        })();

                        return authority;
                    })();

                    return pkg;
                })();

                return discovery;
            })();

            return nevercase;
        })();

        return com;
    })();

    return github;
})();

export const k8s = $root.k8s = (() => {

    /**
     * Namespace k8s.
     * @exports k8s
     * @namespace
     */
    const k8s = {};

    k8s.io = (function() {

        /**
         * Namespace io.
         * @memberof k8s
         * @namespace
         */
        const io = {};

        io.apimachinery = (function() {

            /**
             * Namespace apimachinery.
             * @memberof k8s.io
             * @namespace
             */
            const apimachinery = {};

            apimachinery.pkg = (function() {

                /**
                 * Namespace pkg.
                 * @memberof k8s.io.apimachinery
                 * @namespace
                 */
                const pkg = {};

                pkg.apis = (function() {

                    /**
                     * Namespace apis.
                     * @memberof k8s.io.apimachinery.pkg
                     * @namespace
                     */
                    const apis = {};

                    apis.meta = (function() {

                        /**
                         * Namespace meta.
                         * @memberof k8s.io.apimachinery.pkg.apis
                         * @namespace
                         */
                        const meta = {};

                        meta.v1 = (function() {

                            /**
                             * Namespace v1.
                             * @memberof k8s.io.apimachinery.pkg.apis.meta
                             * @namespace
                             */
                            const v1 = {};

                            v1.APIGroup = (function() {

                                /**
                                 * Properties of a APIGroup.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IAPIGroup
                                 * @property {string|null} [name] APIGroup name
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionForDiscovery>|null} [versions] APIGroup versions
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionForDiscovery|null} [preferredVersion] APIGroup preferredVersion
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IServerAddressByClientCIDR>|null} [serverAddressByClientCIDRs] APIGroup serverAddressByClientCIDRs
                                 */

                                /**
                                 * Constructs a new APIGroup.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a APIGroup.
                                 * @implements IAPIGroup
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroup=} [properties] Properties to set
                                 */
                                function APIGroup(properties) {
                                    this.versions = [];
                                    this.serverAddressByClientCIDRs = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * APIGroup name.
                                 * @member {string} name
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @instance
                                 */
                                APIGroup.prototype.name = "";

                                /**
                                 * APIGroup versions.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionForDiscovery>} versions
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @instance
                                 */
                                APIGroup.prototype.versions = $util.emptyArray;

                                /**
                                 * APIGroup preferredVersion.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionForDiscovery|null|undefined} preferredVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @instance
                                 */
                                APIGroup.prototype.preferredVersion = null;

                                /**
                                 * APIGroup serverAddressByClientCIDRs.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IServerAddressByClientCIDR>} serverAddressByClientCIDRs
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @instance
                                 */
                                APIGroup.prototype.serverAddressByClientCIDRs = $util.emptyArray;

                                /**
                                 * Creates a new APIGroup instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroup=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup} APIGroup instance
                                 */
                                APIGroup.create = function create(properties) {
                                    return new APIGroup(properties);
                                };

                                /**
                                 * Encodes the specified APIGroup message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroup} message APIGroup message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIGroup.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                    if (message.versions != null && message.versions.length)
                                        for (let i = 0; i < message.versions.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.encode(message.versions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.preferredVersion != null && Object.hasOwnProperty.call(message, "preferredVersion"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.encode(message.preferredVersion, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.serverAddressByClientCIDRs != null && message.serverAddressByClientCIDRs.length)
                                        for (let i = 0; i < message.serverAddressByClientCIDRs.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.encode(message.serverAddressByClientCIDRs[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified APIGroup message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroup} message APIGroup message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIGroup.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a APIGroup message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup} APIGroup
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIGroup.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.name = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                if (!(message.versions && message.versions.length))
                                                    message.versions = [];
                                                message.versions.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        case 3: {
                                                message.preferredVersion = $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 4: {
                                                if (!(message.serverAddressByClientCIDRs && message.serverAddressByClientCIDRs.length))
                                                    message.serverAddressByClientCIDRs = [];
                                                message.serverAddressByClientCIDRs.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a APIGroup message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup} APIGroup
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIGroup.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a APIGroup message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                APIGroup.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.versions != null && message.hasOwnProperty("versions")) {
                                        if (!Array.isArray(message.versions))
                                            return "versions: array expected";
                                        for (let i = 0; i < message.versions.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.verify(message.versions[i]);
                                            if (error)
                                                return "versions." + error;
                                        }
                                    }
                                    if (message.preferredVersion != null && message.hasOwnProperty("preferredVersion")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.verify(message.preferredVersion);
                                        if (error)
                                            return "preferredVersion." + error;
                                    }
                                    if (message.serverAddressByClientCIDRs != null && message.hasOwnProperty("serverAddressByClientCIDRs")) {
                                        if (!Array.isArray(message.serverAddressByClientCIDRs))
                                            return "serverAddressByClientCIDRs: array expected";
                                        for (let i = 0; i < message.serverAddressByClientCIDRs.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.verify(message.serverAddressByClientCIDRs[i]);
                                            if (error)
                                                return "serverAddressByClientCIDRs." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a APIGroup message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup} APIGroup
                                 */
                                APIGroup.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup();
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.versions) {
                                        if (!Array.isArray(object.versions))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.versions: array expected");
                                        message.versions = [];
                                        for (let i = 0; i < object.versions.length; ++i) {
                                            if (typeof object.versions[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.versions: object expected");
                                            message.versions[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.fromObject(object.versions[i]);
                                        }
                                    }
                                    if (object.preferredVersion != null) {
                                        if (typeof object.preferredVersion !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.preferredVersion: object expected");
                                        message.preferredVersion = $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.fromObject(object.preferredVersion);
                                    }
                                    if (object.serverAddressByClientCIDRs) {
                                        if (!Array.isArray(object.serverAddressByClientCIDRs))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.serverAddressByClientCIDRs: array expected");
                                        message.serverAddressByClientCIDRs = [];
                                        for (let i = 0; i < object.serverAddressByClientCIDRs.length; ++i) {
                                            if (typeof object.serverAddressByClientCIDRs[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.serverAddressByClientCIDRs: object expected");
                                            message.serverAddressByClientCIDRs[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.fromObject(object.serverAddressByClientCIDRs[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a APIGroup message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup} message APIGroup
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                APIGroup.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults) {
                                        object.versions = [];
                                        object.serverAddressByClientCIDRs = [];
                                    }
                                    if (options.defaults) {
                                        object.name = "";
                                        object.preferredVersion = null;
                                    }
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.versions && message.versions.length) {
                                        object.versions = [];
                                        for (let j = 0; j < message.versions.length; ++j)
                                            object.versions[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.toObject(message.versions[j], options);
                                    }
                                    if (message.preferredVersion != null && message.hasOwnProperty("preferredVersion"))
                                        object.preferredVersion = $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.toObject(message.preferredVersion, options);
                                    if (message.serverAddressByClientCIDRs && message.serverAddressByClientCIDRs.length) {
                                        object.serverAddressByClientCIDRs = [];
                                        for (let j = 0; j < message.serverAddressByClientCIDRs.length; ++j)
                                            object.serverAddressByClientCIDRs[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.toObject(message.serverAddressByClientCIDRs[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this APIGroup to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                APIGroup.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for APIGroup
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                APIGroup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup";
                                };

                                return APIGroup;
                            })();

                            v1.APIGroupList = (function() {

                                /**
                                 * Properties of a APIGroupList.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IAPIGroupList
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroup>|null} [groups] APIGroupList groups
                                 */

                                /**
                                 * Constructs a new APIGroupList.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a APIGroupList.
                                 * @implements IAPIGroupList
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroupList=} [properties] Properties to set
                                 */
                                function APIGroupList(properties) {
                                    this.groups = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * APIGroupList groups.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroup>} groups
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @instance
                                 */
                                APIGroupList.prototype.groups = $util.emptyArray;

                                /**
                                 * Creates a new APIGroupList instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroupList=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList} APIGroupList instance
                                 */
                                APIGroupList.create = function create(properties) {
                                    return new APIGroupList(properties);
                                };

                                /**
                                 * Encodes the specified APIGroupList message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroupList} message APIGroupList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIGroupList.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.groups != null && message.groups.length)
                                        for (let i = 0; i < message.groups.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.encode(message.groups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified APIGroupList message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIGroupList} message APIGroupList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIGroupList.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a APIGroupList message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList} APIGroupList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIGroupList.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (!(message.groups && message.groups.length))
                                                    message.groups = [];
                                                message.groups.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a APIGroupList message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList} APIGroupList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIGroupList.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a APIGroupList message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                APIGroupList.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.groups != null && message.hasOwnProperty("groups")) {
                                        if (!Array.isArray(message.groups))
                                            return "groups: array expected";
                                        for (let i = 0; i < message.groups.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.verify(message.groups[i]);
                                            if (error)
                                                return "groups." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a APIGroupList message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList} APIGroupList
                                 */
                                APIGroupList.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList();
                                    if (object.groups) {
                                        if (!Array.isArray(object.groups))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList.groups: array expected");
                                        message.groups = [];
                                        for (let i = 0; i < object.groups.length; ++i) {
                                            if (typeof object.groups[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList.groups: object expected");
                                            message.groups[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.fromObject(object.groups[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a APIGroupList message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList} message APIGroupList
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                APIGroupList.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.groups = [];
                                    if (message.groups && message.groups.length) {
                                        object.groups = [];
                                        for (let j = 0; j < message.groups.length; ++j)
                                            object.groups[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup.toObject(message.groups[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this APIGroupList to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                APIGroupList.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for APIGroupList
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                APIGroupList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList";
                                };

                                return APIGroupList;
                            })();

                            v1.APIResource = (function() {

                                /**
                                 * Properties of a APIResource.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IAPIResource
                                 * @property {string|null} [name] APIResource name
                                 * @property {string|null} [singularName] APIResource singularName
                                 * @property {boolean|null} [namespaced] APIResource namespaced
                                 * @property {string|null} [group] APIResource group
                                 * @property {string|null} [version] APIResource version
                                 * @property {string|null} [kind] APIResource kind
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IVerbs|null} [verbs] APIResource verbs
                                 * @property {Array.<string>|null} [shortNames] APIResource shortNames
                                 * @property {Array.<string>|null} [categories] APIResource categories
                                 * @property {string|null} [storageVersionHash] APIResource storageVersionHash
                                 */

                                /**
                                 * Constructs a new APIResource.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a APIResource.
                                 * @implements IAPIResource
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResource=} [properties] Properties to set
                                 */
                                function APIResource(properties) {
                                    this.shortNames = [];
                                    this.categories = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * APIResource name.
                                 * @member {string} name
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.name = "";

                                /**
                                 * APIResource singularName.
                                 * @member {string} singularName
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.singularName = "";

                                /**
                                 * APIResource namespaced.
                                 * @member {boolean} namespaced
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.namespaced = false;

                                /**
                                 * APIResource group.
                                 * @member {string} group
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.group = "";

                                /**
                                 * APIResource version.
                                 * @member {string} version
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.version = "";

                                /**
                                 * APIResource kind.
                                 * @member {string} kind
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.kind = "";

                                /**
                                 * APIResource verbs.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IVerbs|null|undefined} verbs
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.verbs = null;

                                /**
                                 * APIResource shortNames.
                                 * @member {Array.<string>} shortNames
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.shortNames = $util.emptyArray;

                                /**
                                 * APIResource categories.
                                 * @member {Array.<string>} categories
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.categories = $util.emptyArray;

                                /**
                                 * APIResource storageVersionHash.
                                 * @member {string} storageVersionHash
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 */
                                APIResource.prototype.storageVersionHash = "";

                                /**
                                 * Creates a new APIResource instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResource=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIResource} APIResource instance
                                 */
                                APIResource.create = function create(properties) {
                                    return new APIResource(properties);
                                };

                                /**
                                 * Encodes the specified APIResource message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResource} message APIResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIResource.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                    if (message.namespaced != null && Object.hasOwnProperty.call(message, "namespaced"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.namespaced);
                                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.kind);
                                    if (message.verbs != null && Object.hasOwnProperty.call(message, "verbs"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.encode(message.verbs, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.shortNames != null && message.shortNames.length)
                                        for (let i = 0; i < message.shortNames.length; ++i)
                                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.shortNames[i]);
                                    if (message.singularName != null && Object.hasOwnProperty.call(message, "singularName"))
                                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singularName);
                                    if (message.categories != null && message.categories.length)
                                        for (let i = 0; i < message.categories.length; ++i)
                                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.categories[i]);
                                    if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.group);
                                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.version);
                                    if (message.storageVersionHash != null && Object.hasOwnProperty.call(message, "storageVersionHash"))
                                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.storageVersionHash);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified APIResource message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResource} message APIResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIResource.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a APIResource message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIResource} APIResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIResource.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResource();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.name = reader.string();
                                                break;
                                            }
                                        case 6: {
                                                message.singularName = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.namespaced = reader.bool();
                                                break;
                                            }
                                        case 8: {
                                                message.group = reader.string();
                                                break;
                                            }
                                        case 9: {
                                                message.version = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.kind = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.verbs = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 5: {
                                                if (!(message.shortNames && message.shortNames.length))
                                                    message.shortNames = [];
                                                message.shortNames.push(reader.string());
                                                break;
                                            }
                                        case 7: {
                                                if (!(message.categories && message.categories.length))
                                                    message.categories = [];
                                                message.categories.push(reader.string());
                                                break;
                                            }
                                        case 10: {
                                                message.storageVersionHash = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a APIResource message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIResource} APIResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIResource.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a APIResource message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                APIResource.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.singularName != null && message.hasOwnProperty("singularName"))
                                        if (!$util.isString(message.singularName))
                                            return "singularName: string expected";
                                    if (message.namespaced != null && message.hasOwnProperty("namespaced"))
                                        if (typeof message.namespaced !== "boolean")
                                            return "namespaced: boolean expected";
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        if (!$util.isString(message.group))
                                            return "group: string expected";
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        if (!$util.isString(message.version))
                                            return "version: string expected";
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        if (!$util.isString(message.kind))
                                            return "kind: string expected";
                                    if (message.verbs != null && message.hasOwnProperty("verbs")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.verify(message.verbs);
                                        if (error)
                                            return "verbs." + error;
                                    }
                                    if (message.shortNames != null && message.hasOwnProperty("shortNames")) {
                                        if (!Array.isArray(message.shortNames))
                                            return "shortNames: array expected";
                                        for (let i = 0; i < message.shortNames.length; ++i)
                                            if (!$util.isString(message.shortNames[i]))
                                                return "shortNames: string[] expected";
                                    }
                                    if (message.categories != null && message.hasOwnProperty("categories")) {
                                        if (!Array.isArray(message.categories))
                                            return "categories: array expected";
                                        for (let i = 0; i < message.categories.length; ++i)
                                            if (!$util.isString(message.categories[i]))
                                                return "categories: string[] expected";
                                    }
                                    if (message.storageVersionHash != null && message.hasOwnProperty("storageVersionHash"))
                                        if (!$util.isString(message.storageVersionHash))
                                            return "storageVersionHash: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a APIResource message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIResource} APIResource
                                 */
                                APIResource.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResource)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResource();
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.singularName != null)
                                        message.singularName = String(object.singularName);
                                    if (object.namespaced != null)
                                        message.namespaced = Boolean(object.namespaced);
                                    if (object.group != null)
                                        message.group = String(object.group);
                                    if (object.version != null)
                                        message.version = String(object.version);
                                    if (object.kind != null)
                                        message.kind = String(object.kind);
                                    if (object.verbs != null) {
                                        if (typeof object.verbs !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.verbs: object expected");
                                        message.verbs = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.fromObject(object.verbs);
                                    }
                                    if (object.shortNames) {
                                        if (!Array.isArray(object.shortNames))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.shortNames: array expected");
                                        message.shortNames = [];
                                        for (let i = 0; i < object.shortNames.length; ++i)
                                            message.shortNames[i] = String(object.shortNames[i]);
                                    }
                                    if (object.categories) {
                                        if (!Array.isArray(object.categories))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.categories: array expected");
                                        message.categories = [];
                                        for (let i = 0; i < object.categories.length; ++i)
                                            message.categories[i] = String(object.categories[i]);
                                    }
                                    if (object.storageVersionHash != null)
                                        message.storageVersionHash = String(object.storageVersionHash);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a APIResource message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.APIResource} message APIResource
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                APIResource.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults) {
                                        object.shortNames = [];
                                        object.categories = [];
                                    }
                                    if (options.defaults) {
                                        object.name = "";
                                        object.namespaced = false;
                                        object.kind = "";
                                        object.verbs = null;
                                        object.singularName = "";
                                        object.group = "";
                                        object.version = "";
                                        object.storageVersionHash = "";
                                    }
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.namespaced != null && message.hasOwnProperty("namespaced"))
                                        object.namespaced = message.namespaced;
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        object.kind = message.kind;
                                    if (message.verbs != null && message.hasOwnProperty("verbs"))
                                        object.verbs = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.toObject(message.verbs, options);
                                    if (message.shortNames && message.shortNames.length) {
                                        object.shortNames = [];
                                        for (let j = 0; j < message.shortNames.length; ++j)
                                            object.shortNames[j] = message.shortNames[j];
                                    }
                                    if (message.singularName != null && message.hasOwnProperty("singularName"))
                                        object.singularName = message.singularName;
                                    if (message.categories && message.categories.length) {
                                        object.categories = [];
                                        for (let j = 0; j < message.categories.length; ++j)
                                            object.categories[j] = message.categories[j];
                                    }
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        object.group = message.group;
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        object.version = message.version;
                                    if (message.storageVersionHash != null && message.hasOwnProperty("storageVersionHash"))
                                        object.storageVersionHash = message.storageVersionHash;
                                    return object;
                                };

                                /**
                                 * Converts this APIResource to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                APIResource.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for APIResource
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResource
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                APIResource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.APIResource";
                                };

                                return APIResource;
                            })();

                            v1.APIResourceList = (function() {

                                /**
                                 * Properties of a APIResourceList.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IAPIResourceList
                                 * @property {string|null} [groupVersion] APIResourceList groupVersion
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResource>|null} [resources] APIResourceList resources
                                 */

                                /**
                                 * Constructs a new APIResourceList.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a APIResourceList.
                                 * @implements IAPIResourceList
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResourceList=} [properties] Properties to set
                                 */
                                function APIResourceList(properties) {
                                    this.resources = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * APIResourceList groupVersion.
                                 * @member {string} groupVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @instance
                                 */
                                APIResourceList.prototype.groupVersion = "";

                                /**
                                 * APIResourceList resources.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResource>} resources
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @instance
                                 */
                                APIResourceList.prototype.resources = $util.emptyArray;

                                /**
                                 * Creates a new APIResourceList instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResourceList=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList} APIResourceList instance
                                 */
                                APIResourceList.create = function create(properties) {
                                    return new APIResourceList(properties);
                                };

                                /**
                                 * Encodes the specified APIResourceList message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResourceList} message APIResourceList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIResourceList.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.groupVersion != null && Object.hasOwnProperty.call(message, "groupVersion"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupVersion);
                                    if (message.resources != null && message.resources.length)
                                        for (let i = 0; i < message.resources.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.encode(message.resources[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified APIResourceList message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIResourceList} message APIResourceList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIResourceList.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a APIResourceList message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList} APIResourceList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIResourceList.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.groupVersion = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                if (!(message.resources && message.resources.length))
                                                    message.resources = [];
                                                message.resources.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a APIResourceList message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList} APIResourceList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIResourceList.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a APIResourceList message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                APIResourceList.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.groupVersion != null && message.hasOwnProperty("groupVersion"))
                                        if (!$util.isString(message.groupVersion))
                                            return "groupVersion: string expected";
                                    if (message.resources != null && message.hasOwnProperty("resources")) {
                                        if (!Array.isArray(message.resources))
                                            return "resources: array expected";
                                        for (let i = 0; i < message.resources.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.verify(message.resources[i]);
                                            if (error)
                                                return "resources." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a APIResourceList message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList} APIResourceList
                                 */
                                APIResourceList.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList();
                                    if (object.groupVersion != null)
                                        message.groupVersion = String(object.groupVersion);
                                    if (object.resources) {
                                        if (!Array.isArray(object.resources))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList.resources: array expected");
                                        message.resources = [];
                                        for (let i = 0; i < object.resources.length; ++i) {
                                            if (typeof object.resources[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList.resources: object expected");
                                            message.resources[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.fromObject(object.resources[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a APIResourceList message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList} message APIResourceList
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                APIResourceList.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.resources = [];
                                    if (options.defaults)
                                        object.groupVersion = "";
                                    if (message.groupVersion != null && message.hasOwnProperty("groupVersion"))
                                        object.groupVersion = message.groupVersion;
                                    if (message.resources && message.resources.length) {
                                        object.resources = [];
                                        for (let j = 0; j < message.resources.length; ++j)
                                            object.resources[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIResource.toObject(message.resources[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this APIResourceList to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                APIResourceList.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for APIResourceList
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                APIResourceList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList";
                                };

                                return APIResourceList;
                            })();

                            v1.APIVersions = (function() {

                                /**
                                 * Properties of a APIVersions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IAPIVersions
                                 * @property {Array.<string>|null} [versions] APIVersions versions
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IServerAddressByClientCIDR>|null} [serverAddressByClientCIDRs] APIVersions serverAddressByClientCIDRs
                                 */

                                /**
                                 * Constructs a new APIVersions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a APIVersions.
                                 * @implements IAPIVersions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIVersions=} [properties] Properties to set
                                 */
                                function APIVersions(properties) {
                                    this.versions = [];
                                    this.serverAddressByClientCIDRs = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * APIVersions versions.
                                 * @member {Array.<string>} versions
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @instance
                                 */
                                APIVersions.prototype.versions = $util.emptyArray;

                                /**
                                 * APIVersions serverAddressByClientCIDRs.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IServerAddressByClientCIDR>} serverAddressByClientCIDRs
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @instance
                                 */
                                APIVersions.prototype.serverAddressByClientCIDRs = $util.emptyArray;

                                /**
                                 * Creates a new APIVersions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIVersions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions} APIVersions instance
                                 */
                                APIVersions.create = function create(properties) {
                                    return new APIVersions(properties);
                                };

                                /**
                                 * Encodes the specified APIVersions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIVersions} message APIVersions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIVersions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.versions != null && message.versions.length)
                                        for (let i = 0; i < message.versions.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.versions[i]);
                                    if (message.serverAddressByClientCIDRs != null && message.serverAddressByClientCIDRs.length)
                                        for (let i = 0; i < message.serverAddressByClientCIDRs.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.encode(message.serverAddressByClientCIDRs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified APIVersions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IAPIVersions} message APIVersions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                APIVersions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a APIVersions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions} APIVersions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIVersions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (!(message.versions && message.versions.length))
                                                    message.versions = [];
                                                message.versions.push(reader.string());
                                                break;
                                            }
                                        case 2: {
                                                if (!(message.serverAddressByClientCIDRs && message.serverAddressByClientCIDRs.length))
                                                    message.serverAddressByClientCIDRs = [];
                                                message.serverAddressByClientCIDRs.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a APIVersions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions} APIVersions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                APIVersions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a APIVersions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                APIVersions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.versions != null && message.hasOwnProperty("versions")) {
                                        if (!Array.isArray(message.versions))
                                            return "versions: array expected";
                                        for (let i = 0; i < message.versions.length; ++i)
                                            if (!$util.isString(message.versions[i]))
                                                return "versions: string[] expected";
                                    }
                                    if (message.serverAddressByClientCIDRs != null && message.hasOwnProperty("serverAddressByClientCIDRs")) {
                                        if (!Array.isArray(message.serverAddressByClientCIDRs))
                                            return "serverAddressByClientCIDRs: array expected";
                                        for (let i = 0; i < message.serverAddressByClientCIDRs.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.verify(message.serverAddressByClientCIDRs[i]);
                                            if (error)
                                                return "serverAddressByClientCIDRs." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a APIVersions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions} APIVersions
                                 */
                                APIVersions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions();
                                    if (object.versions) {
                                        if (!Array.isArray(object.versions))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions.versions: array expected");
                                        message.versions = [];
                                        for (let i = 0; i < object.versions.length; ++i)
                                            message.versions[i] = String(object.versions[i]);
                                    }
                                    if (object.serverAddressByClientCIDRs) {
                                        if (!Array.isArray(object.serverAddressByClientCIDRs))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions.serverAddressByClientCIDRs: array expected");
                                        message.serverAddressByClientCIDRs = [];
                                        for (let i = 0; i < object.serverAddressByClientCIDRs.length; ++i) {
                                            if (typeof object.serverAddressByClientCIDRs[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions.serverAddressByClientCIDRs: object expected");
                                            message.serverAddressByClientCIDRs[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.fromObject(object.serverAddressByClientCIDRs[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a APIVersions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions} message APIVersions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                APIVersions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults) {
                                        object.versions = [];
                                        object.serverAddressByClientCIDRs = [];
                                    }
                                    if (message.versions && message.versions.length) {
                                        object.versions = [];
                                        for (let j = 0; j < message.versions.length; ++j)
                                            object.versions[j] = message.versions[j];
                                    }
                                    if (message.serverAddressByClientCIDRs && message.serverAddressByClientCIDRs.length) {
                                        object.serverAddressByClientCIDRs = [];
                                        for (let j = 0; j < message.serverAddressByClientCIDRs.length; ++j)
                                            object.serverAddressByClientCIDRs[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.toObject(message.serverAddressByClientCIDRs[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this APIVersions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                APIVersions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for APIVersions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                APIVersions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.APIVersions";
                                };

                                return APIVersions;
                            })();

                            v1.ApplyOptions = (function() {

                                /**
                                 * Properties of an ApplyOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IApplyOptions
                                 * @property {Array.<string>|null} [dryRun] ApplyOptions dryRun
                                 * @property {boolean|null} [force] ApplyOptions force
                                 * @property {string|null} [fieldManager] ApplyOptions fieldManager
                                 */

                                /**
                                 * Constructs a new ApplyOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents an ApplyOptions.
                                 * @implements IApplyOptions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IApplyOptions=} [properties] Properties to set
                                 */
                                function ApplyOptions(properties) {
                                    this.dryRun = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ApplyOptions dryRun.
                                 * @member {Array.<string>} dryRun
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @instance
                                 */
                                ApplyOptions.prototype.dryRun = $util.emptyArray;

                                /**
                                 * ApplyOptions force.
                                 * @member {boolean} force
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @instance
                                 */
                                ApplyOptions.prototype.force = false;

                                /**
                                 * ApplyOptions fieldManager.
                                 * @member {string} fieldManager
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @instance
                                 */
                                ApplyOptions.prototype.fieldManager = "";

                                /**
                                 * Creates a new ApplyOptions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IApplyOptions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions} ApplyOptions instance
                                 */
                                ApplyOptions.create = function create(properties) {
                                    return new ApplyOptions(properties);
                                };

                                /**
                                 * Encodes the specified ApplyOptions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IApplyOptions} message ApplyOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ApplyOptions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.dryRun != null && message.dryRun.length)
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dryRun[i]);
                                    if (message.force != null && Object.hasOwnProperty.call(message, "force"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.force);
                                    if (message.fieldManager != null && Object.hasOwnProperty.call(message, "fieldManager"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.fieldManager);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ApplyOptions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IApplyOptions} message ApplyOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ApplyOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an ApplyOptions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions} ApplyOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ApplyOptions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (!(message.dryRun && message.dryRun.length))
                                                    message.dryRun = [];
                                                message.dryRun.push(reader.string());
                                                break;
                                            }
                                        case 2: {
                                                message.force = reader.bool();
                                                break;
                                            }
                                        case 3: {
                                                message.fieldManager = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an ApplyOptions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions} ApplyOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ApplyOptions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an ApplyOptions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ApplyOptions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.dryRun != null && message.hasOwnProperty("dryRun")) {
                                        if (!Array.isArray(message.dryRun))
                                            return "dryRun: array expected";
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            if (!$util.isString(message.dryRun[i]))
                                                return "dryRun: string[] expected";
                                    }
                                    if (message.force != null && message.hasOwnProperty("force"))
                                        if (typeof message.force !== "boolean")
                                            return "force: boolean expected";
                                    if (message.fieldManager != null && message.hasOwnProperty("fieldManager"))
                                        if (!$util.isString(message.fieldManager))
                                            return "fieldManager: string expected";
                                    return null;
                                };

                                /**
                                 * Creates an ApplyOptions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions} ApplyOptions
                                 */
                                ApplyOptions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions();
                                    if (object.dryRun) {
                                        if (!Array.isArray(object.dryRun))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions.dryRun: array expected");
                                        message.dryRun = [];
                                        for (let i = 0; i < object.dryRun.length; ++i)
                                            message.dryRun[i] = String(object.dryRun[i]);
                                    }
                                    if (object.force != null)
                                        message.force = Boolean(object.force);
                                    if (object.fieldManager != null)
                                        message.fieldManager = String(object.fieldManager);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an ApplyOptions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions} message ApplyOptions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ApplyOptions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.dryRun = [];
                                    if (options.defaults) {
                                        object.force = false;
                                        object.fieldManager = "";
                                    }
                                    if (message.dryRun && message.dryRun.length) {
                                        object.dryRun = [];
                                        for (let j = 0; j < message.dryRun.length; ++j)
                                            object.dryRun[j] = message.dryRun[j];
                                    }
                                    if (message.force != null && message.hasOwnProperty("force"))
                                        object.force = message.force;
                                    if (message.fieldManager != null && message.hasOwnProperty("fieldManager"))
                                        object.fieldManager = message.fieldManager;
                                    return object;
                                };

                                /**
                                 * Converts this ApplyOptions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ApplyOptions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for ApplyOptions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                ApplyOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.ApplyOptions";
                                };

                                return ApplyOptions;
                            })();

                            v1.Condition = (function() {

                                /**
                                 * Properties of a Condition.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface ICondition
                                 * @property {string|null} [type] Condition type
                                 * @property {string|null} [status] Condition status
                                 * @property {number|Long|null} [observedGeneration] Condition observedGeneration
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.ITime|null} [lastTransitionTime] Condition lastTransitionTime
                                 * @property {string|null} [reason] Condition reason
                                 * @property {string|null} [message] Condition message
                                 */

                                /**
                                 * Constructs a new Condition.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a Condition.
                                 * @implements ICondition
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ICondition=} [properties] Properties to set
                                 */
                                function Condition(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Condition type.
                                 * @member {string} type
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @instance
                                 */
                                Condition.prototype.type = "";

                                /**
                                 * Condition status.
                                 * @member {string} status
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @instance
                                 */
                                Condition.prototype.status = "";

                                /**
                                 * Condition observedGeneration.
                                 * @member {number|Long} observedGeneration
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @instance
                                 */
                                Condition.prototype.observedGeneration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Condition lastTransitionTime.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.ITime|null|undefined} lastTransitionTime
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @instance
                                 */
                                Condition.prototype.lastTransitionTime = null;

                                /**
                                 * Condition reason.
                                 * @member {string} reason
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @instance
                                 */
                                Condition.prototype.reason = "";

                                /**
                                 * Condition message.
                                 * @member {string} message
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @instance
                                 */
                                Condition.prototype.message = "";

                                /**
                                 * Creates a new Condition instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ICondition=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Condition} Condition instance
                                 */
                                Condition.create = function create(properties) {
                                    return new Condition(properties);
                                };

                                /**
                                 * Encodes the specified Condition message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Condition.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ICondition} message Condition message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Condition.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                                    if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.status);
                                    if (message.observedGeneration != null && Object.hasOwnProperty.call(message, "observedGeneration"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.observedGeneration);
                                    if (message.lastTransitionTime != null && Object.hasOwnProperty.call(message, "lastTransitionTime"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.encode(message.lastTransitionTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.reason);
                                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.message);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Condition message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Condition.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ICondition} message Condition message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Condition.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Condition message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Condition} Condition
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Condition.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Condition();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.type = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.status = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.observedGeneration = reader.int64();
                                                break;
                                            }
                                        case 4: {
                                                message.lastTransitionTime = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 5: {
                                                message.reason = reader.string();
                                                break;
                                            }
                                        case 6: {
                                                message.message = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Condition message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Condition} Condition
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Condition.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Condition message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Condition.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isString(message.type))
                                            return "type: string expected";
                                    if (message.status != null && message.hasOwnProperty("status"))
                                        if (!$util.isString(message.status))
                                            return "status: string expected";
                                    if (message.observedGeneration != null && message.hasOwnProperty("observedGeneration"))
                                        if (!$util.isInteger(message.observedGeneration) && !(message.observedGeneration && $util.isInteger(message.observedGeneration.low) && $util.isInteger(message.observedGeneration.high)))
                                            return "observedGeneration: integer|Long expected";
                                    if (message.lastTransitionTime != null && message.hasOwnProperty("lastTransitionTime")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.verify(message.lastTransitionTime);
                                        if (error)
                                            return "lastTransitionTime." + error;
                                    }
                                    if (message.reason != null && message.hasOwnProperty("reason"))
                                        if (!$util.isString(message.reason))
                                            return "reason: string expected";
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a Condition message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Condition} Condition
                                 */
                                Condition.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.Condition)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Condition();
                                    if (object.type != null)
                                        message.type = String(object.type);
                                    if (object.status != null)
                                        message.status = String(object.status);
                                    if (object.observedGeneration != null)
                                        if ($util.Long)
                                            (message.observedGeneration = $util.Long.fromValue(object.observedGeneration)).unsigned = false;
                                        else if (typeof object.observedGeneration === "string")
                                            message.observedGeneration = parseInt(object.observedGeneration, 10);
                                        else if (typeof object.observedGeneration === "number")
                                            message.observedGeneration = object.observedGeneration;
                                        else if (typeof object.observedGeneration === "object")
                                            message.observedGeneration = new $util.LongBits(object.observedGeneration.low >>> 0, object.observedGeneration.high >>> 0).toNumber();
                                    if (object.lastTransitionTime != null) {
                                        if (typeof object.lastTransitionTime !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.Condition.lastTransitionTime: object expected");
                                        message.lastTransitionTime = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.fromObject(object.lastTransitionTime);
                                    }
                                    if (object.reason != null)
                                        message.reason = String(object.reason);
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Condition message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.Condition} message Condition
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Condition.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.type = "";
                                        object.status = "";
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.observedGeneration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.observedGeneration = options.longs === String ? "0" : 0;
                                        object.lastTransitionTime = null;
                                        object.reason = "";
                                        object.message = "";
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    if (message.status != null && message.hasOwnProperty("status"))
                                        object.status = message.status;
                                    if (message.observedGeneration != null && message.hasOwnProperty("observedGeneration"))
                                        if (typeof message.observedGeneration === "number")
                                            object.observedGeneration = options.longs === String ? String(message.observedGeneration) : message.observedGeneration;
                                        else
                                            object.observedGeneration = options.longs === String ? $util.Long.prototype.toString.call(message.observedGeneration) : options.longs === Number ? new $util.LongBits(message.observedGeneration.low >>> 0, message.observedGeneration.high >>> 0).toNumber() : message.observedGeneration;
                                    if (message.lastTransitionTime != null && message.hasOwnProperty("lastTransitionTime"))
                                        object.lastTransitionTime = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.toObject(message.lastTransitionTime, options);
                                    if (message.reason != null && message.hasOwnProperty("reason"))
                                        object.reason = message.reason;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    return object;
                                };

                                /**
                                 * Converts this Condition to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Condition.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Condition
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Condition
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Condition.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.Condition";
                                };

                                return Condition;
                            })();

                            v1.CreateOptions = (function() {

                                /**
                                 * Properties of a CreateOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface ICreateOptions
                                 * @property {Array.<string>|null} [dryRun] CreateOptions dryRun
                                 * @property {string|null} [fieldManager] CreateOptions fieldManager
                                 * @property {string|null} [fieldValidation] CreateOptions fieldValidation
                                 */

                                /**
                                 * Constructs a new CreateOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a CreateOptions.
                                 * @implements ICreateOptions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ICreateOptions=} [properties] Properties to set
                                 */
                                function CreateOptions(properties) {
                                    this.dryRun = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * CreateOptions dryRun.
                                 * @member {Array.<string>} dryRun
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @instance
                                 */
                                CreateOptions.prototype.dryRun = $util.emptyArray;

                                /**
                                 * CreateOptions fieldManager.
                                 * @member {string} fieldManager
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @instance
                                 */
                                CreateOptions.prototype.fieldManager = "";

                                /**
                                 * CreateOptions fieldValidation.
                                 * @member {string} fieldValidation
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @instance
                                 */
                                CreateOptions.prototype.fieldValidation = "";

                                /**
                                 * Creates a new CreateOptions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ICreateOptions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions} CreateOptions instance
                                 */
                                CreateOptions.create = function create(properties) {
                                    return new CreateOptions(properties);
                                };

                                /**
                                 * Encodes the specified CreateOptions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ICreateOptions} message CreateOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                CreateOptions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.dryRun != null && message.dryRun.length)
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dryRun[i]);
                                    if (message.fieldManager != null && Object.hasOwnProperty.call(message, "fieldManager"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.fieldManager);
                                    if (message.fieldValidation != null && Object.hasOwnProperty.call(message, "fieldValidation"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.fieldValidation);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified CreateOptions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ICreateOptions} message CreateOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                CreateOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a CreateOptions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions} CreateOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                CreateOptions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (!(message.dryRun && message.dryRun.length))
                                                    message.dryRun = [];
                                                message.dryRun.push(reader.string());
                                                break;
                                            }
                                        case 3: {
                                                message.fieldManager = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.fieldValidation = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a CreateOptions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions} CreateOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                CreateOptions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a CreateOptions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                CreateOptions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.dryRun != null && message.hasOwnProperty("dryRun")) {
                                        if (!Array.isArray(message.dryRun))
                                            return "dryRun: array expected";
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            if (!$util.isString(message.dryRun[i]))
                                                return "dryRun: string[] expected";
                                    }
                                    if (message.fieldManager != null && message.hasOwnProperty("fieldManager"))
                                        if (!$util.isString(message.fieldManager))
                                            return "fieldManager: string expected";
                                    if (message.fieldValidation != null && message.hasOwnProperty("fieldValidation"))
                                        if (!$util.isString(message.fieldValidation))
                                            return "fieldValidation: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a CreateOptions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions} CreateOptions
                                 */
                                CreateOptions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions();
                                    if (object.dryRun) {
                                        if (!Array.isArray(object.dryRun))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions.dryRun: array expected");
                                        message.dryRun = [];
                                        for (let i = 0; i < object.dryRun.length; ++i)
                                            message.dryRun[i] = String(object.dryRun[i]);
                                    }
                                    if (object.fieldManager != null)
                                        message.fieldManager = String(object.fieldManager);
                                    if (object.fieldValidation != null)
                                        message.fieldValidation = String(object.fieldValidation);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a CreateOptions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions} message CreateOptions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                CreateOptions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.dryRun = [];
                                    if (options.defaults) {
                                        object.fieldManager = "";
                                        object.fieldValidation = "";
                                    }
                                    if (message.dryRun && message.dryRun.length) {
                                        object.dryRun = [];
                                        for (let j = 0; j < message.dryRun.length; ++j)
                                            object.dryRun[j] = message.dryRun[j];
                                    }
                                    if (message.fieldManager != null && message.hasOwnProperty("fieldManager"))
                                        object.fieldManager = message.fieldManager;
                                    if (message.fieldValidation != null && message.hasOwnProperty("fieldValidation"))
                                        object.fieldValidation = message.fieldValidation;
                                    return object;
                                };

                                /**
                                 * Converts this CreateOptions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                CreateOptions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for CreateOptions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                CreateOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions";
                                };

                                return CreateOptions;
                            })();

                            v1.DeleteOptions = (function() {

                                /**
                                 * Properties of a DeleteOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IDeleteOptions
                                 * @property {number|Long|null} [gracePeriodSeconds] DeleteOptions gracePeriodSeconds
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IPreconditions|null} [preconditions] DeleteOptions preconditions
                                 * @property {boolean|null} [orphanDependents] DeleteOptions orphanDependents
                                 * @property {string|null} [propagationPolicy] DeleteOptions propagationPolicy
                                 * @property {Array.<string>|null} [dryRun] DeleteOptions dryRun
                                 */

                                /**
                                 * Constructs a new DeleteOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a DeleteOptions.
                                 * @implements IDeleteOptions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IDeleteOptions=} [properties] Properties to set
                                 */
                                function DeleteOptions(properties) {
                                    this.dryRun = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * DeleteOptions gracePeriodSeconds.
                                 * @member {number|Long} gracePeriodSeconds
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @instance
                                 */
                                DeleteOptions.prototype.gracePeriodSeconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * DeleteOptions preconditions.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IPreconditions|null|undefined} preconditions
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @instance
                                 */
                                DeleteOptions.prototype.preconditions = null;

                                /**
                                 * DeleteOptions orphanDependents.
                                 * @member {boolean} orphanDependents
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @instance
                                 */
                                DeleteOptions.prototype.orphanDependents = false;

                                /**
                                 * DeleteOptions propagationPolicy.
                                 * @member {string} propagationPolicy
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @instance
                                 */
                                DeleteOptions.prototype.propagationPolicy = "";

                                /**
                                 * DeleteOptions dryRun.
                                 * @member {Array.<string>} dryRun
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @instance
                                 */
                                DeleteOptions.prototype.dryRun = $util.emptyArray;

                                /**
                                 * Creates a new DeleteOptions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IDeleteOptions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions} DeleteOptions instance
                                 */
                                DeleteOptions.create = function create(properties) {
                                    return new DeleteOptions(properties);
                                };

                                /**
                                 * Encodes the specified DeleteOptions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IDeleteOptions} message DeleteOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DeleteOptions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.gracePeriodSeconds != null && Object.hasOwnProperty.call(message, "gracePeriodSeconds"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gracePeriodSeconds);
                                    if (message.preconditions != null && Object.hasOwnProperty.call(message, "preconditions"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions.encode(message.preconditions, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.orphanDependents != null && Object.hasOwnProperty.call(message, "orphanDependents"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.orphanDependents);
                                    if (message.propagationPolicy != null && Object.hasOwnProperty.call(message, "propagationPolicy"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.propagationPolicy);
                                    if (message.dryRun != null && message.dryRun.length)
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.dryRun[i]);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified DeleteOptions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IDeleteOptions} message DeleteOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DeleteOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a DeleteOptions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions} DeleteOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DeleteOptions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.gracePeriodSeconds = reader.int64();
                                                break;
                                            }
                                        case 2: {
                                                message.preconditions = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 3: {
                                                message.orphanDependents = reader.bool();
                                                break;
                                            }
                                        case 4: {
                                                message.propagationPolicy = reader.string();
                                                break;
                                            }
                                        case 5: {
                                                if (!(message.dryRun && message.dryRun.length))
                                                    message.dryRun = [];
                                                message.dryRun.push(reader.string());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a DeleteOptions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions} DeleteOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DeleteOptions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a DeleteOptions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                DeleteOptions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.gracePeriodSeconds != null && message.hasOwnProperty("gracePeriodSeconds"))
                                        if (!$util.isInteger(message.gracePeriodSeconds) && !(message.gracePeriodSeconds && $util.isInteger(message.gracePeriodSeconds.low) && $util.isInteger(message.gracePeriodSeconds.high)))
                                            return "gracePeriodSeconds: integer|Long expected";
                                    if (message.preconditions != null && message.hasOwnProperty("preconditions")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions.verify(message.preconditions);
                                        if (error)
                                            return "preconditions." + error;
                                    }
                                    if (message.orphanDependents != null && message.hasOwnProperty("orphanDependents"))
                                        if (typeof message.orphanDependents !== "boolean")
                                            return "orphanDependents: boolean expected";
                                    if (message.propagationPolicy != null && message.hasOwnProperty("propagationPolicy"))
                                        if (!$util.isString(message.propagationPolicy))
                                            return "propagationPolicy: string expected";
                                    if (message.dryRun != null && message.hasOwnProperty("dryRun")) {
                                        if (!Array.isArray(message.dryRun))
                                            return "dryRun: array expected";
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            if (!$util.isString(message.dryRun[i]))
                                                return "dryRun: string[] expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a DeleteOptions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions} DeleteOptions
                                 */
                                DeleteOptions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions();
                                    if (object.gracePeriodSeconds != null)
                                        if ($util.Long)
                                            (message.gracePeriodSeconds = $util.Long.fromValue(object.gracePeriodSeconds)).unsigned = false;
                                        else if (typeof object.gracePeriodSeconds === "string")
                                            message.gracePeriodSeconds = parseInt(object.gracePeriodSeconds, 10);
                                        else if (typeof object.gracePeriodSeconds === "number")
                                            message.gracePeriodSeconds = object.gracePeriodSeconds;
                                        else if (typeof object.gracePeriodSeconds === "object")
                                            message.gracePeriodSeconds = new $util.LongBits(object.gracePeriodSeconds.low >>> 0, object.gracePeriodSeconds.high >>> 0).toNumber();
                                    if (object.preconditions != null) {
                                        if (typeof object.preconditions !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions.preconditions: object expected");
                                        message.preconditions = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions.fromObject(object.preconditions);
                                    }
                                    if (object.orphanDependents != null)
                                        message.orphanDependents = Boolean(object.orphanDependents);
                                    if (object.propagationPolicy != null)
                                        message.propagationPolicy = String(object.propagationPolicy);
                                    if (object.dryRun) {
                                        if (!Array.isArray(object.dryRun))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions.dryRun: array expected");
                                        message.dryRun = [];
                                        for (let i = 0; i < object.dryRun.length; ++i)
                                            message.dryRun[i] = String(object.dryRun[i]);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a DeleteOptions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions} message DeleteOptions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                DeleteOptions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.dryRun = [];
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.gracePeriodSeconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gracePeriodSeconds = options.longs === String ? "0" : 0;
                                        object.preconditions = null;
                                        object.orphanDependents = false;
                                        object.propagationPolicy = "";
                                    }
                                    if (message.gracePeriodSeconds != null && message.hasOwnProperty("gracePeriodSeconds"))
                                        if (typeof message.gracePeriodSeconds === "number")
                                            object.gracePeriodSeconds = options.longs === String ? String(message.gracePeriodSeconds) : message.gracePeriodSeconds;
                                        else
                                            object.gracePeriodSeconds = options.longs === String ? $util.Long.prototype.toString.call(message.gracePeriodSeconds) : options.longs === Number ? new $util.LongBits(message.gracePeriodSeconds.low >>> 0, message.gracePeriodSeconds.high >>> 0).toNumber() : message.gracePeriodSeconds;
                                    if (message.preconditions != null && message.hasOwnProperty("preconditions"))
                                        object.preconditions = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions.toObject(message.preconditions, options);
                                    if (message.orphanDependents != null && message.hasOwnProperty("orphanDependents"))
                                        object.orphanDependents = message.orphanDependents;
                                    if (message.propagationPolicy != null && message.hasOwnProperty("propagationPolicy"))
                                        object.propagationPolicy = message.propagationPolicy;
                                    if (message.dryRun && message.dryRun.length) {
                                        object.dryRun = [];
                                        for (let j = 0; j < message.dryRun.length; ++j)
                                            object.dryRun[j] = message.dryRun[j];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this DeleteOptions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                DeleteOptions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for DeleteOptions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                DeleteOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions";
                                };

                                return DeleteOptions;
                            })();

                            v1.Duration = (function() {

                                /**
                                 * Properties of a Duration.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IDuration
                                 * @property {number|Long|null} [duration] Duration duration
                                 */

                                /**
                                 * Constructs a new Duration.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a Duration.
                                 * @implements IDuration
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IDuration=} [properties] Properties to set
                                 */
                                function Duration(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Duration duration.
                                 * @member {number|Long} duration
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @instance
                                 */
                                Duration.prototype.duration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new Duration instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IDuration=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Duration} Duration instance
                                 */
                                Duration.create = function create(properties) {
                                    return new Duration(properties);
                                };

                                /**
                                 * Encodes the specified Duration message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Duration.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IDuration} message Duration message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Duration.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.duration);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Duration.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IDuration} message Duration message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Duration message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Duration} Duration
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Duration.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Duration();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.duration = reader.int64();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Duration} Duration
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Duration.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Duration message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Duration.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.duration != null && message.hasOwnProperty("duration"))
                                        if (!$util.isInteger(message.duration) && !(message.duration && $util.isInteger(message.duration.low) && $util.isInteger(message.duration.high)))
                                            return "duration: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Duration} Duration
                                 */
                                Duration.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.Duration)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Duration();
                                    if (object.duration != null)
                                        if ($util.Long)
                                            (message.duration = $util.Long.fromValue(object.duration)).unsigned = false;
                                        else if (typeof object.duration === "string")
                                            message.duration = parseInt(object.duration, 10);
                                        else if (typeof object.duration === "number")
                                            message.duration = object.duration;
                                        else if (typeof object.duration === "object")
                                            message.duration = new $util.LongBits(object.duration.low >>> 0, object.duration.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.Duration} message Duration
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Duration.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults)
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.duration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.duration = options.longs === String ? "0" : 0;
                                    if (message.duration != null && message.hasOwnProperty("duration"))
                                        if (typeof message.duration === "number")
                                            object.duration = options.longs === String ? String(message.duration) : message.duration;
                                        else
                                            object.duration = options.longs === String ? $util.Long.prototype.toString.call(message.duration) : options.longs === Number ? new $util.LongBits(message.duration.low >>> 0, message.duration.high >>> 0).toNumber() : message.duration;
                                    return object;
                                };

                                /**
                                 * Converts this Duration to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Duration.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Duration
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Duration
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.Duration";
                                };

                                return Duration;
                            })();

                            v1.FieldsV1 = (function() {

                                /**
                                 * Properties of a FieldsV1.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IFieldsV1
                                 * @property {Uint8Array|null} [Raw] FieldsV1 Raw
                                 */

                                /**
                                 * Constructs a new FieldsV1.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a FieldsV1.
                                 * @implements IFieldsV1
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IFieldsV1=} [properties] Properties to set
                                 */
                                function FieldsV1(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * FieldsV1 Raw.
                                 * @member {Uint8Array} Raw
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @instance
                                 */
                                FieldsV1.prototype.Raw = $util.newBuffer([]);

                                /**
                                 * Creates a new FieldsV1 instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IFieldsV1=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1} FieldsV1 instance
                                 */
                                FieldsV1.create = function create(properties) {
                                    return new FieldsV1(properties);
                                };

                                /**
                                 * Encodes the specified FieldsV1 message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IFieldsV1} message FieldsV1 message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                FieldsV1.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.Raw != null && Object.hasOwnProperty.call(message, "Raw"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.Raw);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified FieldsV1 message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IFieldsV1} message FieldsV1 message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                FieldsV1.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a FieldsV1 message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1} FieldsV1
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                FieldsV1.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.Raw = reader.bytes();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a FieldsV1 message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1} FieldsV1
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                FieldsV1.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a FieldsV1 message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                FieldsV1.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.Raw != null && message.hasOwnProperty("Raw"))
                                        if (!(message.Raw && typeof message.Raw.length === "number" || $util.isString(message.Raw)))
                                            return "Raw: buffer expected";
                                    return null;
                                };

                                /**
                                 * Creates a FieldsV1 message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1} FieldsV1
                                 */
                                FieldsV1.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1();
                                    if (object.Raw != null)
                                        if (typeof object.Raw === "string")
                                            $util.base64.decode(object.Raw, message.Raw = $util.newBuffer($util.base64.length(object.Raw)), 0);
                                        else if (object.Raw.length >= 0)
                                            message.Raw = object.Raw;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a FieldsV1 message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1} message FieldsV1
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                FieldsV1.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults)
                                        if (options.bytes === String)
                                            object.Raw = "";
                                        else {
                                            object.Raw = [];
                                            if (options.bytes !== Array)
                                                object.Raw = $util.newBuffer(object.Raw);
                                        }
                                    if (message.Raw != null && message.hasOwnProperty("Raw"))
                                        object.Raw = options.bytes === String ? $util.base64.encode(message.Raw, 0, message.Raw.length) : options.bytes === Array ? Array.prototype.slice.call(message.Raw) : message.Raw;
                                    return object;
                                };

                                /**
                                 * Converts this FieldsV1 to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                FieldsV1.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for FieldsV1
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                FieldsV1.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1";
                                };

                                return FieldsV1;
                            })();

                            v1.GetOptions = (function() {

                                /**
                                 * Properties of a GetOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IGetOptions
                                 * @property {string|null} [resourceVersion] GetOptions resourceVersion
                                 */

                                /**
                                 * Constructs a new GetOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a GetOptions.
                                 * @implements IGetOptions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGetOptions=} [properties] Properties to set
                                 */
                                function GetOptions(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GetOptions resourceVersion.
                                 * @member {string} resourceVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @instance
                                 */
                                GetOptions.prototype.resourceVersion = "";

                                /**
                                 * Creates a new GetOptions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGetOptions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions} GetOptions instance
                                 */
                                GetOptions.create = function create(properties) {
                                    return new GetOptions(properties);
                                };

                                /**
                                 * Encodes the specified GetOptions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGetOptions} message GetOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GetOptions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.resourceVersion != null && Object.hasOwnProperty.call(message, "resourceVersion"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceVersion);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GetOptions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGetOptions} message GetOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GetOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GetOptions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions} GetOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GetOptions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.resourceVersion = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GetOptions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions} GetOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GetOptions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GetOptions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GetOptions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        if (!$util.isString(message.resourceVersion))
                                            return "resourceVersion: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a GetOptions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions} GetOptions
                                 */
                                GetOptions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions();
                                    if (object.resourceVersion != null)
                                        message.resourceVersion = String(object.resourceVersion);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GetOptions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions} message GetOptions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GetOptions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults)
                                        object.resourceVersion = "";
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        object.resourceVersion = message.resourceVersion;
                                    return object;
                                };

                                /**
                                 * Converts this GetOptions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GetOptions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for GetOptions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                GetOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions";
                                };

                                return GetOptions;
                            })();

                            v1.GroupKind = (function() {

                                /**
                                 * Properties of a GroupKind.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IGroupKind
                                 * @property {string|null} [group] GroupKind group
                                 * @property {string|null} [kind] GroupKind kind
                                 */

                                /**
                                 * Constructs a new GroupKind.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a GroupKind.
                                 * @implements IGroupKind
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupKind=} [properties] Properties to set
                                 */
                                function GroupKind(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GroupKind group.
                                 * @member {string} group
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @instance
                                 */
                                GroupKind.prototype.group = "";

                                /**
                                 * GroupKind kind.
                                 * @member {string} kind
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @instance
                                 */
                                GroupKind.prototype.kind = "";

                                /**
                                 * Creates a new GroupKind instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupKind=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind} GroupKind instance
                                 */
                                GroupKind.create = function create(properties) {
                                    return new GroupKind(properties);
                                };

                                /**
                                 * Encodes the specified GroupKind message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupKind} message GroupKind message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupKind.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.group);
                                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.kind);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GroupKind message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupKind} message GroupKind message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupKind.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GroupKind message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind} GroupKind
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupKind.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.group = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.kind = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GroupKind message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind} GroupKind
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupKind.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GroupKind message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GroupKind.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        if (!$util.isString(message.group))
                                            return "group: string expected";
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        if (!$util.isString(message.kind))
                                            return "kind: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a GroupKind message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind} GroupKind
                                 */
                                GroupKind.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind();
                                    if (object.group != null)
                                        message.group = String(object.group);
                                    if (object.kind != null)
                                        message.kind = String(object.kind);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GroupKind message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind} message GroupKind
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GroupKind.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.group = "";
                                        object.kind = "";
                                    }
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        object.group = message.group;
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        object.kind = message.kind;
                                    return object;
                                };

                                /**
                                 * Converts this GroupKind to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GroupKind.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for GroupKind
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                GroupKind.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind";
                                };

                                return GroupKind;
                            })();

                            v1.GroupResource = (function() {

                                /**
                                 * Properties of a GroupResource.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IGroupResource
                                 * @property {string|null} [group] GroupResource group
                                 * @property {string|null} [resource] GroupResource resource
                                 */

                                /**
                                 * Constructs a new GroupResource.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a GroupResource.
                                 * @implements IGroupResource
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupResource=} [properties] Properties to set
                                 */
                                function GroupResource(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GroupResource group.
                                 * @member {string} group
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @instance
                                 */
                                GroupResource.prototype.group = "";

                                /**
                                 * GroupResource resource.
                                 * @member {string} resource
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @instance
                                 */
                                GroupResource.prototype.resource = "";

                                /**
                                 * Creates a new GroupResource instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupResource=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource} GroupResource instance
                                 */
                                GroupResource.create = function create(properties) {
                                    return new GroupResource(properties);
                                };

                                /**
                                 * Encodes the specified GroupResource message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupResource} message GroupResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupResource.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.group);
                                    if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.resource);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GroupResource message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupResource} message GroupResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupResource.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GroupResource message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource} GroupResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupResource.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.group = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.resource = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GroupResource message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource} GroupResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupResource.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GroupResource message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GroupResource.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        if (!$util.isString(message.group))
                                            return "group: string expected";
                                    if (message.resource != null && message.hasOwnProperty("resource"))
                                        if (!$util.isString(message.resource))
                                            return "resource: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a GroupResource message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource} GroupResource
                                 */
                                GroupResource.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource();
                                    if (object.group != null)
                                        message.group = String(object.group);
                                    if (object.resource != null)
                                        message.resource = String(object.resource);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GroupResource message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource} message GroupResource
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GroupResource.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.group = "";
                                        object.resource = "";
                                    }
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        object.group = message.group;
                                    if (message.resource != null && message.hasOwnProperty("resource"))
                                        object.resource = message.resource;
                                    return object;
                                };

                                /**
                                 * Converts this GroupResource to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GroupResource.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for GroupResource
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                GroupResource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource";
                                };

                                return GroupResource;
                            })();

                            v1.GroupVersion = (function() {

                                /**
                                 * Properties of a GroupVersion.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IGroupVersion
                                 * @property {string|null} [group] GroupVersion group
                                 * @property {string|null} [version] GroupVersion version
                                 */

                                /**
                                 * Constructs a new GroupVersion.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a GroupVersion.
                                 * @implements IGroupVersion
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersion=} [properties] Properties to set
                                 */
                                function GroupVersion(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GroupVersion group.
                                 * @member {string} group
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @instance
                                 */
                                GroupVersion.prototype.group = "";

                                /**
                                 * GroupVersion version.
                                 * @member {string} version
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @instance
                                 */
                                GroupVersion.prototype.version = "";

                                /**
                                 * Creates a new GroupVersion instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersion=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion} GroupVersion instance
                                 */
                                GroupVersion.create = function create(properties) {
                                    return new GroupVersion(properties);
                                };

                                /**
                                 * Encodes the specified GroupVersion message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersion} message GroupVersion message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupVersion.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.group);
                                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GroupVersion message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersion} message GroupVersion message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupVersion.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GroupVersion message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion} GroupVersion
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupVersion.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.group = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.version = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GroupVersion message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion} GroupVersion
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupVersion.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GroupVersion message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GroupVersion.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        if (!$util.isString(message.group))
                                            return "group: string expected";
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        if (!$util.isString(message.version))
                                            return "version: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a GroupVersion message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion} GroupVersion
                                 */
                                GroupVersion.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion();
                                    if (object.group != null)
                                        message.group = String(object.group);
                                    if (object.version != null)
                                        message.version = String(object.version);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GroupVersion message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion} message GroupVersion
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GroupVersion.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.group = "";
                                        object.version = "";
                                    }
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        object.group = message.group;
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        object.version = message.version;
                                    return object;
                                };

                                /**
                                 * Converts this GroupVersion to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GroupVersion.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for GroupVersion
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                GroupVersion.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersion";
                                };

                                return GroupVersion;
                            })();

                            v1.GroupVersionForDiscovery = (function() {

                                /**
                                 * Properties of a GroupVersionForDiscovery.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IGroupVersionForDiscovery
                                 * @property {string|null} [groupVersion] GroupVersionForDiscovery groupVersion
                                 * @property {string|null} [version] GroupVersionForDiscovery version
                                 */

                                /**
                                 * Constructs a new GroupVersionForDiscovery.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a GroupVersionForDiscovery.
                                 * @implements IGroupVersionForDiscovery
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionForDiscovery=} [properties] Properties to set
                                 */
                                function GroupVersionForDiscovery(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GroupVersionForDiscovery groupVersion.
                                 * @member {string} groupVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @instance
                                 */
                                GroupVersionForDiscovery.prototype.groupVersion = "";

                                /**
                                 * GroupVersionForDiscovery version.
                                 * @member {string} version
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @instance
                                 */
                                GroupVersionForDiscovery.prototype.version = "";

                                /**
                                 * Creates a new GroupVersionForDiscovery instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionForDiscovery=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery} GroupVersionForDiscovery instance
                                 */
                                GroupVersionForDiscovery.create = function create(properties) {
                                    return new GroupVersionForDiscovery(properties);
                                };

                                /**
                                 * Encodes the specified GroupVersionForDiscovery message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionForDiscovery} message GroupVersionForDiscovery message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupVersionForDiscovery.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.groupVersion != null && Object.hasOwnProperty.call(message, "groupVersion"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupVersion);
                                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GroupVersionForDiscovery message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionForDiscovery} message GroupVersionForDiscovery message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupVersionForDiscovery.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GroupVersionForDiscovery message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery} GroupVersionForDiscovery
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupVersionForDiscovery.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.groupVersion = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.version = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GroupVersionForDiscovery message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery} GroupVersionForDiscovery
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupVersionForDiscovery.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GroupVersionForDiscovery message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GroupVersionForDiscovery.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.groupVersion != null && message.hasOwnProperty("groupVersion"))
                                        if (!$util.isString(message.groupVersion))
                                            return "groupVersion: string expected";
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        if (!$util.isString(message.version))
                                            return "version: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a GroupVersionForDiscovery message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery} GroupVersionForDiscovery
                                 */
                                GroupVersionForDiscovery.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery();
                                    if (object.groupVersion != null)
                                        message.groupVersion = String(object.groupVersion);
                                    if (object.version != null)
                                        message.version = String(object.version);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GroupVersionForDiscovery message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery} message GroupVersionForDiscovery
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GroupVersionForDiscovery.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.groupVersion = "";
                                        object.version = "";
                                    }
                                    if (message.groupVersion != null && message.hasOwnProperty("groupVersion"))
                                        object.groupVersion = message.groupVersion;
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        object.version = message.version;
                                    return object;
                                };

                                /**
                                 * Converts this GroupVersionForDiscovery to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GroupVersionForDiscovery.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for GroupVersionForDiscovery
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                GroupVersionForDiscovery.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery";
                                };

                                return GroupVersionForDiscovery;
                            })();

                            v1.GroupVersionKind = (function() {

                                /**
                                 * Properties of a GroupVersionKind.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IGroupVersionKind
                                 * @property {string|null} [group] GroupVersionKind group
                                 * @property {string|null} [version] GroupVersionKind version
                                 * @property {string|null} [kind] GroupVersionKind kind
                                 */

                                /**
                                 * Constructs a new GroupVersionKind.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a GroupVersionKind.
                                 * @implements IGroupVersionKind
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionKind=} [properties] Properties to set
                                 */
                                function GroupVersionKind(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GroupVersionKind group.
                                 * @member {string} group
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @instance
                                 */
                                GroupVersionKind.prototype.group = "";

                                /**
                                 * GroupVersionKind version.
                                 * @member {string} version
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @instance
                                 */
                                GroupVersionKind.prototype.version = "";

                                /**
                                 * GroupVersionKind kind.
                                 * @member {string} kind
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @instance
                                 */
                                GroupVersionKind.prototype.kind = "";

                                /**
                                 * Creates a new GroupVersionKind instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionKind=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind} GroupVersionKind instance
                                 */
                                GroupVersionKind.create = function create(properties) {
                                    return new GroupVersionKind(properties);
                                };

                                /**
                                 * Encodes the specified GroupVersionKind message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionKind} message GroupVersionKind message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupVersionKind.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.group);
                                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.kind);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GroupVersionKind message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionKind} message GroupVersionKind message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupVersionKind.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GroupVersionKind message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind} GroupVersionKind
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupVersionKind.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.group = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.version = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.kind = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GroupVersionKind message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind} GroupVersionKind
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupVersionKind.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GroupVersionKind message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GroupVersionKind.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        if (!$util.isString(message.group))
                                            return "group: string expected";
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        if (!$util.isString(message.version))
                                            return "version: string expected";
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        if (!$util.isString(message.kind))
                                            return "kind: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a GroupVersionKind message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind} GroupVersionKind
                                 */
                                GroupVersionKind.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind();
                                    if (object.group != null)
                                        message.group = String(object.group);
                                    if (object.version != null)
                                        message.version = String(object.version);
                                    if (object.kind != null)
                                        message.kind = String(object.kind);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GroupVersionKind message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind} message GroupVersionKind
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GroupVersionKind.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.group = "";
                                        object.version = "";
                                        object.kind = "";
                                    }
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        object.group = message.group;
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        object.version = message.version;
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        object.kind = message.kind;
                                    return object;
                                };

                                /**
                                 * Converts this GroupVersionKind to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GroupVersionKind.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for GroupVersionKind
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                GroupVersionKind.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind";
                                };

                                return GroupVersionKind;
                            })();

                            v1.GroupVersionResource = (function() {

                                /**
                                 * Properties of a GroupVersionResource.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IGroupVersionResource
                                 * @property {string|null} [group] GroupVersionResource group
                                 * @property {string|null} [version] GroupVersionResource version
                                 * @property {string|null} [resource] GroupVersionResource resource
                                 */

                                /**
                                 * Constructs a new GroupVersionResource.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a GroupVersionResource.
                                 * @implements IGroupVersionResource
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionResource=} [properties] Properties to set
                                 */
                                function GroupVersionResource(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GroupVersionResource group.
                                 * @member {string} group
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @instance
                                 */
                                GroupVersionResource.prototype.group = "";

                                /**
                                 * GroupVersionResource version.
                                 * @member {string} version
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @instance
                                 */
                                GroupVersionResource.prototype.version = "";

                                /**
                                 * GroupVersionResource resource.
                                 * @member {string} resource
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @instance
                                 */
                                GroupVersionResource.prototype.resource = "";

                                /**
                                 * Creates a new GroupVersionResource instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionResource=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource} GroupVersionResource instance
                                 */
                                GroupVersionResource.create = function create(properties) {
                                    return new GroupVersionResource(properties);
                                };

                                /**
                                 * Encodes the specified GroupVersionResource message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionResource} message GroupVersionResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupVersionResource.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.group);
                                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                                    if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.resource);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GroupVersionResource message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IGroupVersionResource} message GroupVersionResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GroupVersionResource.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GroupVersionResource message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource} GroupVersionResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupVersionResource.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.group = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.version = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.resource = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GroupVersionResource message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource} GroupVersionResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GroupVersionResource.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GroupVersionResource message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GroupVersionResource.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        if (!$util.isString(message.group))
                                            return "group: string expected";
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        if (!$util.isString(message.version))
                                            return "version: string expected";
                                    if (message.resource != null && message.hasOwnProperty("resource"))
                                        if (!$util.isString(message.resource))
                                            return "resource: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a GroupVersionResource message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource} GroupVersionResource
                                 */
                                GroupVersionResource.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource();
                                    if (object.group != null)
                                        message.group = String(object.group);
                                    if (object.version != null)
                                        message.version = String(object.version);
                                    if (object.resource != null)
                                        message.resource = String(object.resource);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GroupVersionResource message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource} message GroupVersionResource
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GroupVersionResource.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.group = "";
                                        object.version = "";
                                        object.resource = "";
                                    }
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        object.group = message.group;
                                    if (message.version != null && message.hasOwnProperty("version"))
                                        object.version = message.version;
                                    if (message.resource != null && message.hasOwnProperty("resource"))
                                        object.resource = message.resource;
                                    return object;
                                };

                                /**
                                 * Converts this GroupVersionResource to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GroupVersionResource.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for GroupVersionResource
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                GroupVersionResource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource";
                                };

                                return GroupVersionResource;
                            })();

                            v1.LabelSelector = (function() {

                                /**
                                 * Properties of a LabelSelector.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface ILabelSelector
                                 * @property {Object.<string,string>|null} [matchLabels] LabelSelector matchLabels
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelectorRequirement>|null} [matchExpressions] LabelSelector matchExpressions
                                 */

                                /**
                                 * Constructs a new LabelSelector.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a LabelSelector.
                                 * @implements ILabelSelector
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelector=} [properties] Properties to set
                                 */
                                function LabelSelector(properties) {
                                    this.matchLabels = {};
                                    this.matchExpressions = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LabelSelector matchLabels.
                                 * @member {Object.<string,string>} matchLabels
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @instance
                                 */
                                LabelSelector.prototype.matchLabels = $util.emptyObject;

                                /**
                                 * LabelSelector matchExpressions.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelectorRequirement>} matchExpressions
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @instance
                                 */
                                LabelSelector.prototype.matchExpressions = $util.emptyArray;

                                /**
                                 * Creates a new LabelSelector instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelector=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector} LabelSelector instance
                                 */
                                LabelSelector.create = function create(properties) {
                                    return new LabelSelector(properties);
                                };

                                /**
                                 * Encodes the specified LabelSelector message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelector} message LabelSelector message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LabelSelector.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.matchLabels != null && Object.hasOwnProperty.call(message, "matchLabels"))
                                        for (let keys = Object.keys(message.matchLabels), i = 0; i < keys.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.matchLabels[keys[i]]).ldelim();
                                    if (message.matchExpressions != null && message.matchExpressions.length)
                                        for (let i = 0; i < message.matchExpressions.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.encode(message.matchExpressions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LabelSelector message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelector} message LabelSelector message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LabelSelector.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LabelSelector message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector} LabelSelector
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LabelSelector.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector(), key, value;
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (message.matchLabels === $util.emptyObject)
                                                    message.matchLabels = {};
                                                let end2 = reader.uint32() + reader.pos;
                                                key = "";
                                                value = "";
                                                while (reader.pos < end2) {
                                                    let tag2 = reader.uint32();
                                                    switch (tag2 >>> 3) {
                                                    case 1:
                                                        key = reader.string();
                                                        break;
                                                    case 2:
                                                        value = reader.string();
                                                        break;
                                                    default:
                                                        reader.skipType(tag2 & 7);
                                                        break;
                                                    }
                                                }
                                                message.matchLabels[key] = value;
                                                break;
                                            }
                                        case 2: {
                                                if (!(message.matchExpressions && message.matchExpressions.length))
                                                    message.matchExpressions = [];
                                                message.matchExpressions.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LabelSelector message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector} LabelSelector
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LabelSelector.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LabelSelector message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LabelSelector.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.matchLabels != null && message.hasOwnProperty("matchLabels")) {
                                        if (!$util.isObject(message.matchLabels))
                                            return "matchLabels: object expected";
                                        let key = Object.keys(message.matchLabels);
                                        for (let i = 0; i < key.length; ++i)
                                            if (!$util.isString(message.matchLabels[key[i]]))
                                                return "matchLabels: string{k:string} expected";
                                    }
                                    if (message.matchExpressions != null && message.hasOwnProperty("matchExpressions")) {
                                        if (!Array.isArray(message.matchExpressions))
                                            return "matchExpressions: array expected";
                                        for (let i = 0; i < message.matchExpressions.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.verify(message.matchExpressions[i]);
                                            if (error)
                                                return "matchExpressions." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a LabelSelector message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector} LabelSelector
                                 */
                                LabelSelector.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector();
                                    if (object.matchLabels) {
                                        if (typeof object.matchLabels !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector.matchLabels: object expected");
                                        message.matchLabels = {};
                                        for (let keys = Object.keys(object.matchLabels), i = 0; i < keys.length; ++i)
                                            message.matchLabels[keys[i]] = String(object.matchLabels[keys[i]]);
                                    }
                                    if (object.matchExpressions) {
                                        if (!Array.isArray(object.matchExpressions))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector.matchExpressions: array expected");
                                        message.matchExpressions = [];
                                        for (let i = 0; i < object.matchExpressions.length; ++i) {
                                            if (typeof object.matchExpressions[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector.matchExpressions: object expected");
                                            message.matchExpressions[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.fromObject(object.matchExpressions[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LabelSelector message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector} message LabelSelector
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LabelSelector.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.matchExpressions = [];
                                    if (options.objects || options.defaults)
                                        object.matchLabels = {};
                                    let keys2;
                                    if (message.matchLabels && (keys2 = Object.keys(message.matchLabels)).length) {
                                        object.matchLabels = {};
                                        for (let j = 0; j < keys2.length; ++j)
                                            object.matchLabels[keys2[j]] = message.matchLabels[keys2[j]];
                                    }
                                    if (message.matchExpressions && message.matchExpressions.length) {
                                        object.matchExpressions = [];
                                        for (let j = 0; j < message.matchExpressions.length; ++j)
                                            object.matchExpressions[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.toObject(message.matchExpressions[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this LabelSelector to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LabelSelector.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for LabelSelector
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                LabelSelector.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector";
                                };

                                return LabelSelector;
                            })();

                            v1.LabelSelectorRequirement = (function() {

                                /**
                                 * Properties of a LabelSelectorRequirement.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface ILabelSelectorRequirement
                                 * @property {string|null} [key] LabelSelectorRequirement key
                                 * @property {string|null} [operator] LabelSelectorRequirement operator
                                 * @property {Array.<string>|null} [values] LabelSelectorRequirement values
                                 */

                                /**
                                 * Constructs a new LabelSelectorRequirement.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a LabelSelectorRequirement.
                                 * @implements ILabelSelectorRequirement
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelectorRequirement=} [properties] Properties to set
                                 */
                                function LabelSelectorRequirement(properties) {
                                    this.values = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LabelSelectorRequirement key.
                                 * @member {string} key
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @instance
                                 */
                                LabelSelectorRequirement.prototype.key = "";

                                /**
                                 * LabelSelectorRequirement operator.
                                 * @member {string} operator
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @instance
                                 */
                                LabelSelectorRequirement.prototype.operator = "";

                                /**
                                 * LabelSelectorRequirement values.
                                 * @member {Array.<string>} values
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @instance
                                 */
                                LabelSelectorRequirement.prototype.values = $util.emptyArray;

                                /**
                                 * Creates a new LabelSelectorRequirement instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelectorRequirement=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement} LabelSelectorRequirement instance
                                 */
                                LabelSelectorRequirement.create = function create(properties) {
                                    return new LabelSelectorRequirement(properties);
                                };

                                /**
                                 * Encodes the specified LabelSelectorRequirement message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelectorRequirement} message LabelSelectorRequirement message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LabelSelectorRequirement.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                                    if (message.operator != null && Object.hasOwnProperty.call(message, "operator"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.operator);
                                    if (message.values != null && message.values.length)
                                        for (let i = 0; i < message.values.length; ++i)
                                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.values[i]);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LabelSelectorRequirement message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ILabelSelectorRequirement} message LabelSelectorRequirement message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LabelSelectorRequirement.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LabelSelectorRequirement message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement} LabelSelectorRequirement
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LabelSelectorRequirement.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.key = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.operator = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                if (!(message.values && message.values.length))
                                                    message.values = [];
                                                message.values.push(reader.string());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LabelSelectorRequirement message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement} LabelSelectorRequirement
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LabelSelectorRequirement.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LabelSelectorRequirement message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LabelSelectorRequirement.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.key != null && message.hasOwnProperty("key"))
                                        if (!$util.isString(message.key))
                                            return "key: string expected";
                                    if (message.operator != null && message.hasOwnProperty("operator"))
                                        if (!$util.isString(message.operator))
                                            return "operator: string expected";
                                    if (message.values != null && message.hasOwnProperty("values")) {
                                        if (!Array.isArray(message.values))
                                            return "values: array expected";
                                        for (let i = 0; i < message.values.length; ++i)
                                            if (!$util.isString(message.values[i]))
                                                return "values: string[] expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a LabelSelectorRequirement message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement} LabelSelectorRequirement
                                 */
                                LabelSelectorRequirement.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement();
                                    if (object.key != null)
                                        message.key = String(object.key);
                                    if (object.operator != null)
                                        message.operator = String(object.operator);
                                    if (object.values) {
                                        if (!Array.isArray(object.values))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement.values: array expected");
                                        message.values = [];
                                        for (let i = 0; i < object.values.length; ++i)
                                            message.values[i] = String(object.values[i]);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LabelSelectorRequirement message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement} message LabelSelectorRequirement
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LabelSelectorRequirement.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.values = [];
                                    if (options.defaults) {
                                        object.key = "";
                                        object.operator = "";
                                    }
                                    if (message.key != null && message.hasOwnProperty("key"))
                                        object.key = message.key;
                                    if (message.operator != null && message.hasOwnProperty("operator"))
                                        object.operator = message.operator;
                                    if (message.values && message.values.length) {
                                        object.values = [];
                                        for (let j = 0; j < message.values.length; ++j)
                                            object.values[j] = message.values[j];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this LabelSelectorRequirement to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LabelSelectorRequirement.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for LabelSelectorRequirement
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                LabelSelectorRequirement.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement";
                                };

                                return LabelSelectorRequirement;
                            })();

                            v1.List = (function() {

                                /**
                                 * Properties of a List.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IList
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null} [metadata] List metadata
                                 * @property {Array.<k8s.io.apimachinery.pkg.runtime.IRawExtension>|null} [items] List items
                                 */

                                /**
                                 * Constructs a new List.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a List.
                                 * @implements IList
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IList=} [properties] Properties to set
                                 */
                                function List(properties) {
                                    this.items = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * List metadata.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null|undefined} metadata
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @instance
                                 */
                                List.prototype.metadata = null;

                                /**
                                 * List items.
                                 * @member {Array.<k8s.io.apimachinery.pkg.runtime.IRawExtension>} items
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @instance
                                 */
                                List.prototype.items = $util.emptyArray;

                                /**
                                 * Creates a new List instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IList=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.List} List instance
                                 */
                                List.create = function create(properties) {
                                    return new List(properties);
                                };

                                /**
                                 * Encodes the specified List message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.List.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IList} message List message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                List.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.items != null && message.items.length)
                                        for (let i = 0; i < message.items.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.runtime.RawExtension.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified List message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.List.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IList} message List message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                List.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a List message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.List} List
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                List.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.List();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 2: {
                                                if (!(message.items && message.items.length))
                                                    message.items = [];
                                                message.items.push($root.k8s.io.apimachinery.pkg.runtime.RawExtension.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a List message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.List} List
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                List.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a List message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                List.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify(message.metadata);
                                        if (error)
                                            return "metadata." + error;
                                    }
                                    if (message.items != null && message.hasOwnProperty("items")) {
                                        if (!Array.isArray(message.items))
                                            return "items: array expected";
                                        for (let i = 0; i < message.items.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.runtime.RawExtension.verify(message.items[i]);
                                            if (error)
                                                return "items." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a List message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.List} List
                                 */
                                List.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.List)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.List();
                                    if (object.metadata != null) {
                                        if (typeof object.metadata !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.List.metadata: object expected");
                                        message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.fromObject(object.metadata);
                                    }
                                    if (object.items) {
                                        if (!Array.isArray(object.items))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.List.items: array expected");
                                        message.items = [];
                                        for (let i = 0; i < object.items.length; ++i) {
                                            if (typeof object.items[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.List.items: object expected");
                                            message.items[i] = $root.k8s.io.apimachinery.pkg.runtime.RawExtension.fromObject(object.items[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a List message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.List} message List
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                List.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.items = [];
                                    if (options.defaults)
                                        object.metadata = null;
                                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                                        object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.toObject(message.metadata, options);
                                    if (message.items && message.items.length) {
                                        object.items = [];
                                        for (let j = 0; j < message.items.length; ++j)
                                            object.items[j] = $root.k8s.io.apimachinery.pkg.runtime.RawExtension.toObject(message.items[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this List to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                List.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for List
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.List
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                List.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.List";
                                };

                                return List;
                            })();

                            v1.ListMeta = (function() {

                                /**
                                 * Properties of a ListMeta.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IListMeta
                                 * @property {string|null} [selfLink] ListMeta selfLink
                                 * @property {string|null} [resourceVersion] ListMeta resourceVersion
                                 * @property {string|null} ["continue"] ListMeta continue
                                 * @property {number|Long|null} [remainingItemCount] ListMeta remainingItemCount
                                 */

                                /**
                                 * Constructs a new ListMeta.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a ListMeta.
                                 * @implements IListMeta
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta=} [properties] Properties to set
                                 */
                                function ListMeta(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ListMeta selfLink.
                                 * @member {string} selfLink
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @instance
                                 */
                                ListMeta.prototype.selfLink = "";

                                /**
                                 * ListMeta resourceVersion.
                                 * @member {string} resourceVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @instance
                                 */
                                ListMeta.prototype.resourceVersion = "";

                                /**
                                 * ListMeta continue.
                                 * @member {string} continue
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @instance
                                 */
                                ListMeta.prototype["continue"] = "";

                                /**
                                 * ListMeta remainingItemCount.
                                 * @member {number|Long} remainingItemCount
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @instance
                                 */
                                ListMeta.prototype.remainingItemCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new ListMeta instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta} ListMeta instance
                                 */
                                ListMeta.create = function create(properties) {
                                    return new ListMeta(properties);
                                };

                                /**
                                 * Encodes the specified ListMeta message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta} message ListMeta message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ListMeta.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.selfLink != null && Object.hasOwnProperty.call(message, "selfLink"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selfLink);
                                    if (message.resourceVersion != null && Object.hasOwnProperty.call(message, "resourceVersion"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.resourceVersion);
                                    if (message["continue"] != null && Object.hasOwnProperty.call(message, "continue"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message["continue"]);
                                    if (message.remainingItemCount != null && Object.hasOwnProperty.call(message, "remainingItemCount"))
                                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.remainingItemCount);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ListMeta message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta} message ListMeta message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ListMeta.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ListMeta message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta} ListMeta
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ListMeta.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.selfLink = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.resourceVersion = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message["continue"] = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.remainingItemCount = reader.int64();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ListMeta message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta} ListMeta
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ListMeta.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ListMeta message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ListMeta.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.selfLink != null && message.hasOwnProperty("selfLink"))
                                        if (!$util.isString(message.selfLink))
                                            return "selfLink: string expected";
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        if (!$util.isString(message.resourceVersion))
                                            return "resourceVersion: string expected";
                                    if (message["continue"] != null && message.hasOwnProperty("continue"))
                                        if (!$util.isString(message["continue"]))
                                            return "continue: string expected";
                                    if (message.remainingItemCount != null && message.hasOwnProperty("remainingItemCount"))
                                        if (!$util.isInteger(message.remainingItemCount) && !(message.remainingItemCount && $util.isInteger(message.remainingItemCount.low) && $util.isInteger(message.remainingItemCount.high)))
                                            return "remainingItemCount: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a ListMeta message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta} ListMeta
                                 */
                                ListMeta.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta();
                                    if (object.selfLink != null)
                                        message.selfLink = String(object.selfLink);
                                    if (object.resourceVersion != null)
                                        message.resourceVersion = String(object.resourceVersion);
                                    if (object["continue"] != null)
                                        message["continue"] = String(object["continue"]);
                                    if (object.remainingItemCount != null)
                                        if ($util.Long)
                                            (message.remainingItemCount = $util.Long.fromValue(object.remainingItemCount)).unsigned = false;
                                        else if (typeof object.remainingItemCount === "string")
                                            message.remainingItemCount = parseInt(object.remainingItemCount, 10);
                                        else if (typeof object.remainingItemCount === "number")
                                            message.remainingItemCount = object.remainingItemCount;
                                        else if (typeof object.remainingItemCount === "object")
                                            message.remainingItemCount = new $util.LongBits(object.remainingItemCount.low >>> 0, object.remainingItemCount.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ListMeta message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta} message ListMeta
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ListMeta.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.selfLink = "";
                                        object.resourceVersion = "";
                                        object["continue"] = "";
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.remainingItemCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.remainingItemCount = options.longs === String ? "0" : 0;
                                    }
                                    if (message.selfLink != null && message.hasOwnProperty("selfLink"))
                                        object.selfLink = message.selfLink;
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        object.resourceVersion = message.resourceVersion;
                                    if (message["continue"] != null && message.hasOwnProperty("continue"))
                                        object["continue"] = message["continue"];
                                    if (message.remainingItemCount != null && message.hasOwnProperty("remainingItemCount"))
                                        if (typeof message.remainingItemCount === "number")
                                            object.remainingItemCount = options.longs === String ? String(message.remainingItemCount) : message.remainingItemCount;
                                        else
                                            object.remainingItemCount = options.longs === String ? $util.Long.prototype.toString.call(message.remainingItemCount) : options.longs === Number ? new $util.LongBits(message.remainingItemCount.low >>> 0, message.remainingItemCount.high >>> 0).toNumber() : message.remainingItemCount;
                                    return object;
                                };

                                /**
                                 * Converts this ListMeta to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ListMeta.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for ListMeta
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                ListMeta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta";
                                };

                                return ListMeta;
                            })();

                            v1.ListOptions = (function() {

                                /**
                                 * Properties of a ListOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IListOptions
                                 * @property {string|null} [labelSelector] ListOptions labelSelector
                                 * @property {string|null} [fieldSelector] ListOptions fieldSelector
                                 * @property {boolean|null} [watch] ListOptions watch
                                 * @property {boolean|null} [allowWatchBookmarks] ListOptions allowWatchBookmarks
                                 * @property {string|null} [resourceVersion] ListOptions resourceVersion
                                 * @property {string|null} [resourceVersionMatch] ListOptions resourceVersionMatch
                                 * @property {number|Long|null} [timeoutSeconds] ListOptions timeoutSeconds
                                 * @property {number|Long|null} [limit] ListOptions limit
                                 * @property {string|null} ["continue"] ListOptions continue
                                 */

                                /**
                                 * Constructs a new ListOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a ListOptions.
                                 * @implements IListOptions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IListOptions=} [properties] Properties to set
                                 */
                                function ListOptions(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ListOptions labelSelector.
                                 * @member {string} labelSelector
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype.labelSelector = "";

                                /**
                                 * ListOptions fieldSelector.
                                 * @member {string} fieldSelector
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype.fieldSelector = "";

                                /**
                                 * ListOptions watch.
                                 * @member {boolean} watch
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype.watch = false;

                                /**
                                 * ListOptions allowWatchBookmarks.
                                 * @member {boolean} allowWatchBookmarks
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype.allowWatchBookmarks = false;

                                /**
                                 * ListOptions resourceVersion.
                                 * @member {string} resourceVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype.resourceVersion = "";

                                /**
                                 * ListOptions resourceVersionMatch.
                                 * @member {string} resourceVersionMatch
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype.resourceVersionMatch = "";

                                /**
                                 * ListOptions timeoutSeconds.
                                 * @member {number|Long} timeoutSeconds
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype.timeoutSeconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * ListOptions limit.
                                 * @member {number|Long} limit
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * ListOptions continue.
                                 * @member {string} continue
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 */
                                ListOptions.prototype["continue"] = "";

                                /**
                                 * Creates a new ListOptions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IListOptions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions} ListOptions instance
                                 */
                                ListOptions.create = function create(properties) {
                                    return new ListOptions(properties);
                                };

                                /**
                                 * Encodes the specified ListOptions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IListOptions} message ListOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ListOptions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.labelSelector != null && Object.hasOwnProperty.call(message, "labelSelector"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.labelSelector);
                                    if (message.fieldSelector != null && Object.hasOwnProperty.call(message, "fieldSelector"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.fieldSelector);
                                    if (message.watch != null && Object.hasOwnProperty.call(message, "watch"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.watch);
                                    if (message.resourceVersion != null && Object.hasOwnProperty.call(message, "resourceVersion"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.resourceVersion);
                                    if (message.timeoutSeconds != null && Object.hasOwnProperty.call(message, "timeoutSeconds"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.timeoutSeconds);
                                    if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int64(message.limit);
                                    if (message["continue"] != null && Object.hasOwnProperty.call(message, "continue"))
                                        writer.uint32(/* id 8, wireType 2 =*/66).string(message["continue"]);
                                    if (message.allowWatchBookmarks != null && Object.hasOwnProperty.call(message, "allowWatchBookmarks"))
                                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.allowWatchBookmarks);
                                    if (message.resourceVersionMatch != null && Object.hasOwnProperty.call(message, "resourceVersionMatch"))
                                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.resourceVersionMatch);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ListOptions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IListOptions} message ListOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ListOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ListOptions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions} ListOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ListOptions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.labelSelector = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.fieldSelector = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.watch = reader.bool();
                                                break;
                                            }
                                        case 9: {
                                                message.allowWatchBookmarks = reader.bool();
                                                break;
                                            }
                                        case 4: {
                                                message.resourceVersion = reader.string();
                                                break;
                                            }
                                        case 10: {
                                                message.resourceVersionMatch = reader.string();
                                                break;
                                            }
                                        case 5: {
                                                message.timeoutSeconds = reader.int64();
                                                break;
                                            }
                                        case 7: {
                                                message.limit = reader.int64();
                                                break;
                                            }
                                        case 8: {
                                                message["continue"] = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ListOptions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions} ListOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ListOptions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ListOptions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ListOptions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.labelSelector != null && message.hasOwnProperty("labelSelector"))
                                        if (!$util.isString(message.labelSelector))
                                            return "labelSelector: string expected";
                                    if (message.fieldSelector != null && message.hasOwnProperty("fieldSelector"))
                                        if (!$util.isString(message.fieldSelector))
                                            return "fieldSelector: string expected";
                                    if (message.watch != null && message.hasOwnProperty("watch"))
                                        if (typeof message.watch !== "boolean")
                                            return "watch: boolean expected";
                                    if (message.allowWatchBookmarks != null && message.hasOwnProperty("allowWatchBookmarks"))
                                        if (typeof message.allowWatchBookmarks !== "boolean")
                                            return "allowWatchBookmarks: boolean expected";
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        if (!$util.isString(message.resourceVersion))
                                            return "resourceVersion: string expected";
                                    if (message.resourceVersionMatch != null && message.hasOwnProperty("resourceVersionMatch"))
                                        if (!$util.isString(message.resourceVersionMatch))
                                            return "resourceVersionMatch: string expected";
                                    if (message.timeoutSeconds != null && message.hasOwnProperty("timeoutSeconds"))
                                        if (!$util.isInteger(message.timeoutSeconds) && !(message.timeoutSeconds && $util.isInteger(message.timeoutSeconds.low) && $util.isInteger(message.timeoutSeconds.high)))
                                            return "timeoutSeconds: integer|Long expected";
                                    if (message.limit != null && message.hasOwnProperty("limit"))
                                        if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                                            return "limit: integer|Long expected";
                                    if (message["continue"] != null && message.hasOwnProperty("continue"))
                                        if (!$util.isString(message["continue"]))
                                            return "continue: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a ListOptions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions} ListOptions
                                 */
                                ListOptions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions();
                                    if (object.labelSelector != null)
                                        message.labelSelector = String(object.labelSelector);
                                    if (object.fieldSelector != null)
                                        message.fieldSelector = String(object.fieldSelector);
                                    if (object.watch != null)
                                        message.watch = Boolean(object.watch);
                                    if (object.allowWatchBookmarks != null)
                                        message.allowWatchBookmarks = Boolean(object.allowWatchBookmarks);
                                    if (object.resourceVersion != null)
                                        message.resourceVersion = String(object.resourceVersion);
                                    if (object.resourceVersionMatch != null)
                                        message.resourceVersionMatch = String(object.resourceVersionMatch);
                                    if (object.timeoutSeconds != null)
                                        if ($util.Long)
                                            (message.timeoutSeconds = $util.Long.fromValue(object.timeoutSeconds)).unsigned = false;
                                        else if (typeof object.timeoutSeconds === "string")
                                            message.timeoutSeconds = parseInt(object.timeoutSeconds, 10);
                                        else if (typeof object.timeoutSeconds === "number")
                                            message.timeoutSeconds = object.timeoutSeconds;
                                        else if (typeof object.timeoutSeconds === "object")
                                            message.timeoutSeconds = new $util.LongBits(object.timeoutSeconds.low >>> 0, object.timeoutSeconds.high >>> 0).toNumber();
                                    if (object.limit != null)
                                        if ($util.Long)
                                            (message.limit = $util.Long.fromValue(object.limit)).unsigned = false;
                                        else if (typeof object.limit === "string")
                                            message.limit = parseInt(object.limit, 10);
                                        else if (typeof object.limit === "number")
                                            message.limit = object.limit;
                                        else if (typeof object.limit === "object")
                                            message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber();
                                    if (object["continue"] != null)
                                        message["continue"] = String(object["continue"]);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ListOptions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions} message ListOptions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ListOptions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.labelSelector = "";
                                        object.fieldSelector = "";
                                        object.watch = false;
                                        object.resourceVersion = "";
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.timeoutSeconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.timeoutSeconds = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.limit = options.longs === String ? "0" : 0;
                                        object["continue"] = "";
                                        object.allowWatchBookmarks = false;
                                        object.resourceVersionMatch = "";
                                    }
                                    if (message.labelSelector != null && message.hasOwnProperty("labelSelector"))
                                        object.labelSelector = message.labelSelector;
                                    if (message.fieldSelector != null && message.hasOwnProperty("fieldSelector"))
                                        object.fieldSelector = message.fieldSelector;
                                    if (message.watch != null && message.hasOwnProperty("watch"))
                                        object.watch = message.watch;
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        object.resourceVersion = message.resourceVersion;
                                    if (message.timeoutSeconds != null && message.hasOwnProperty("timeoutSeconds"))
                                        if (typeof message.timeoutSeconds === "number")
                                            object.timeoutSeconds = options.longs === String ? String(message.timeoutSeconds) : message.timeoutSeconds;
                                        else
                                            object.timeoutSeconds = options.longs === String ? $util.Long.prototype.toString.call(message.timeoutSeconds) : options.longs === Number ? new $util.LongBits(message.timeoutSeconds.low >>> 0, message.timeoutSeconds.high >>> 0).toNumber() : message.timeoutSeconds;
                                    if (message.limit != null && message.hasOwnProperty("limit"))
                                        if (typeof message.limit === "number")
                                            object.limit = options.longs === String ? String(message.limit) : message.limit;
                                        else
                                            object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber() : message.limit;
                                    if (message["continue"] != null && message.hasOwnProperty("continue"))
                                        object["continue"] = message["continue"];
                                    if (message.allowWatchBookmarks != null && message.hasOwnProperty("allowWatchBookmarks"))
                                        object.allowWatchBookmarks = message.allowWatchBookmarks;
                                    if (message.resourceVersionMatch != null && message.hasOwnProperty("resourceVersionMatch"))
                                        object.resourceVersionMatch = message.resourceVersionMatch;
                                    return object;
                                };

                                /**
                                 * Converts this ListOptions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ListOptions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for ListOptions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                ListOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions";
                                };

                                return ListOptions;
                            })();

                            v1.ManagedFieldsEntry = (function() {

                                /**
                                 * Properties of a ManagedFieldsEntry.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IManagedFieldsEntry
                                 * @property {string|null} [manager] ManagedFieldsEntry manager
                                 * @property {string|null} [operation] ManagedFieldsEntry operation
                                 * @property {string|null} [apiVersion] ManagedFieldsEntry apiVersion
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.ITime|null} [time] ManagedFieldsEntry time
                                 * @property {string|null} [fieldsType] ManagedFieldsEntry fieldsType
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IFieldsV1|null} [fieldsV1] ManagedFieldsEntry fieldsV1
                                 * @property {string|null} [subresource] ManagedFieldsEntry subresource
                                 */

                                /**
                                 * Constructs a new ManagedFieldsEntry.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a ManagedFieldsEntry.
                                 * @implements IManagedFieldsEntry
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IManagedFieldsEntry=} [properties] Properties to set
                                 */
                                function ManagedFieldsEntry(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ManagedFieldsEntry manager.
                                 * @member {string} manager
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @instance
                                 */
                                ManagedFieldsEntry.prototype.manager = "";

                                /**
                                 * ManagedFieldsEntry operation.
                                 * @member {string} operation
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @instance
                                 */
                                ManagedFieldsEntry.prototype.operation = "";

                                /**
                                 * ManagedFieldsEntry apiVersion.
                                 * @member {string} apiVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @instance
                                 */
                                ManagedFieldsEntry.prototype.apiVersion = "";

                                /**
                                 * ManagedFieldsEntry time.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.ITime|null|undefined} time
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @instance
                                 */
                                ManagedFieldsEntry.prototype.time = null;

                                /**
                                 * ManagedFieldsEntry fieldsType.
                                 * @member {string} fieldsType
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @instance
                                 */
                                ManagedFieldsEntry.prototype.fieldsType = "";

                                /**
                                 * ManagedFieldsEntry fieldsV1.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IFieldsV1|null|undefined} fieldsV1
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @instance
                                 */
                                ManagedFieldsEntry.prototype.fieldsV1 = null;

                                /**
                                 * ManagedFieldsEntry subresource.
                                 * @member {string} subresource
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @instance
                                 */
                                ManagedFieldsEntry.prototype.subresource = "";

                                /**
                                 * Creates a new ManagedFieldsEntry instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IManagedFieldsEntry=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry} ManagedFieldsEntry instance
                                 */
                                ManagedFieldsEntry.create = function create(properties) {
                                    return new ManagedFieldsEntry(properties);
                                };

                                /**
                                 * Encodes the specified ManagedFieldsEntry message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IManagedFieldsEntry} message ManagedFieldsEntry message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ManagedFieldsEntry.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.manager != null && Object.hasOwnProperty.call(message, "manager"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.manager);
                                    if (message.operation != null && Object.hasOwnProperty.call(message, "operation"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.operation);
                                    if (message.apiVersion != null && Object.hasOwnProperty.call(message, "apiVersion"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.apiVersion);
                                    if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.fieldsType != null && Object.hasOwnProperty.call(message, "fieldsType"))
                                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.fieldsType);
                                    if (message.fieldsV1 != null && Object.hasOwnProperty.call(message, "fieldsV1"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1.encode(message.fieldsV1, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                                    if (message.subresource != null && Object.hasOwnProperty.call(message, "subresource"))
                                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.subresource);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ManagedFieldsEntry message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IManagedFieldsEntry} message ManagedFieldsEntry message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ManagedFieldsEntry.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ManagedFieldsEntry message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry} ManagedFieldsEntry
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ManagedFieldsEntry.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.manager = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.operation = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.apiVersion = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.time = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 6: {
                                                message.fieldsType = reader.string();
                                                break;
                                            }
                                        case 7: {
                                                message.fieldsV1 = $root.k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 8: {
                                                message.subresource = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ManagedFieldsEntry message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry} ManagedFieldsEntry
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ManagedFieldsEntry.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ManagedFieldsEntry message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ManagedFieldsEntry.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.manager != null && message.hasOwnProperty("manager"))
                                        if (!$util.isString(message.manager))
                                            return "manager: string expected";
                                    if (message.operation != null && message.hasOwnProperty("operation"))
                                        if (!$util.isString(message.operation))
                                            return "operation: string expected";
                                    if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                        if (!$util.isString(message.apiVersion))
                                            return "apiVersion: string expected";
                                    if (message.time != null && message.hasOwnProperty("time")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.verify(message.time);
                                        if (error)
                                            return "time." + error;
                                    }
                                    if (message.fieldsType != null && message.hasOwnProperty("fieldsType"))
                                        if (!$util.isString(message.fieldsType))
                                            return "fieldsType: string expected";
                                    if (message.fieldsV1 != null && message.hasOwnProperty("fieldsV1")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1.verify(message.fieldsV1);
                                        if (error)
                                            return "fieldsV1." + error;
                                    }
                                    if (message.subresource != null && message.hasOwnProperty("subresource"))
                                        if (!$util.isString(message.subresource))
                                            return "subresource: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a ManagedFieldsEntry message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry} ManagedFieldsEntry
                                 */
                                ManagedFieldsEntry.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry();
                                    if (object.manager != null)
                                        message.manager = String(object.manager);
                                    if (object.operation != null)
                                        message.operation = String(object.operation);
                                    if (object.apiVersion != null)
                                        message.apiVersion = String(object.apiVersion);
                                    if (object.time != null) {
                                        if (typeof object.time !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.time: object expected");
                                        message.time = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.fromObject(object.time);
                                    }
                                    if (object.fieldsType != null)
                                        message.fieldsType = String(object.fieldsType);
                                    if (object.fieldsV1 != null) {
                                        if (typeof object.fieldsV1 !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.fieldsV1: object expected");
                                        message.fieldsV1 = $root.k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1.fromObject(object.fieldsV1);
                                    }
                                    if (object.subresource != null)
                                        message.subresource = String(object.subresource);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ManagedFieldsEntry message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry} message ManagedFieldsEntry
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ManagedFieldsEntry.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.manager = "";
                                        object.operation = "";
                                        object.apiVersion = "";
                                        object.time = null;
                                        object.fieldsType = "";
                                        object.fieldsV1 = null;
                                        object.subresource = "";
                                    }
                                    if (message.manager != null && message.hasOwnProperty("manager"))
                                        object.manager = message.manager;
                                    if (message.operation != null && message.hasOwnProperty("operation"))
                                        object.operation = message.operation;
                                    if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                        object.apiVersion = message.apiVersion;
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        object.time = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.toObject(message.time, options);
                                    if (message.fieldsType != null && message.hasOwnProperty("fieldsType"))
                                        object.fieldsType = message.fieldsType;
                                    if (message.fieldsV1 != null && message.hasOwnProperty("fieldsV1"))
                                        object.fieldsV1 = $root.k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1.toObject(message.fieldsV1, options);
                                    if (message.subresource != null && message.hasOwnProperty("subresource"))
                                        object.subresource = message.subresource;
                                    return object;
                                };

                                /**
                                 * Converts this ManagedFieldsEntry to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ManagedFieldsEntry.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for ManagedFieldsEntry
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                ManagedFieldsEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry";
                                };

                                return ManagedFieldsEntry;
                            })();

                            v1.MicroTime = (function() {

                                /**
                                 * Properties of a MicroTime.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IMicroTime
                                 * @property {number|Long|null} [seconds] MicroTime seconds
                                 * @property {number|null} [nanos] MicroTime nanos
                                 */

                                /**
                                 * Constructs a new MicroTime.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a MicroTime.
                                 * @implements IMicroTime
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IMicroTime=} [properties] Properties to set
                                 */
                                function MicroTime(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * MicroTime seconds.
                                 * @member {number|Long} seconds
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @instance
                                 */
                                MicroTime.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * MicroTime nanos.
                                 * @member {number} nanos
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @instance
                                 */
                                MicroTime.prototype.nanos = 0;

                                /**
                                 * Creates a new MicroTime instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IMicroTime=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime} MicroTime instance
                                 */
                                MicroTime.create = function create(properties) {
                                    return new MicroTime(properties);
                                };

                                /**
                                 * Encodes the specified MicroTime message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IMicroTime} message MicroTime message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MicroTime.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MicroTime message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IMicroTime} message MicroTime message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MicroTime.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MicroTime message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime} MicroTime
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MicroTime.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.seconds = reader.int64();
                                                break;
                                            }
                                        case 2: {
                                                message.nanos = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MicroTime message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime} MicroTime
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MicroTime.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MicroTime message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MicroTime.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                                            return "seconds: integer|Long expected";
                                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                                        if (!$util.isInteger(message.nanos))
                                            return "nanos: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a MicroTime message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime} MicroTime
                                 */
                                MicroTime.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime();
                                    if (object.seconds != null)
                                        if ($util.Long)
                                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                                        else if (typeof object.seconds === "string")
                                            message.seconds = parseInt(object.seconds, 10);
                                        else if (typeof object.seconds === "number")
                                            message.seconds = object.seconds;
                                        else if (typeof object.seconds === "object")
                                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                                    if (object.nanos != null)
                                        message.nanos = object.nanos | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MicroTime message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime} message MicroTime
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MicroTime.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.seconds = options.longs === String ? "0" : 0;
                                        object.nanos = 0;
                                    }
                                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                                        if (typeof message.seconds === "number")
                                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                                        else
                                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                                        object.nanos = message.nanos;
                                    return object;
                                };

                                /**
                                 * Converts this MicroTime to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MicroTime.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for MicroTime
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                MicroTime.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime";
                                };

                                return MicroTime;
                            })();

                            v1.ObjectMeta = (function() {

                                /**
                                 * Properties of an ObjectMeta.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IObjectMeta
                                 * @property {string|null} [name] ObjectMeta name
                                 * @property {string|null} [generateName] ObjectMeta generateName
                                 * @property {string|null} [namespace] ObjectMeta namespace
                                 * @property {string|null} [selfLink] ObjectMeta selfLink
                                 * @property {string|null} [uid] ObjectMeta uid
                                 * @property {string|null} [resourceVersion] ObjectMeta resourceVersion
                                 * @property {number|Long|null} [generation] ObjectMeta generation
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.ITime|null} [creationTimestamp] ObjectMeta creationTimestamp
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.ITime|null} [deletionTimestamp] ObjectMeta deletionTimestamp
                                 * @property {number|Long|null} [deletionGracePeriodSeconds] ObjectMeta deletionGracePeriodSeconds
                                 * @property {Object.<string,string>|null} [labels] ObjectMeta labels
                                 * @property {Object.<string,string>|null} [annotations] ObjectMeta annotations
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IOwnerReference>|null} [ownerReferences] ObjectMeta ownerReferences
                                 * @property {Array.<string>|null} [finalizers] ObjectMeta finalizers
                                 * @property {string|null} [clusterName] ObjectMeta clusterName
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IManagedFieldsEntry>|null} [managedFields] ObjectMeta managedFields
                                 */

                                /**
                                 * Constructs a new ObjectMeta.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents an ObjectMeta.
                                 * @implements IObjectMeta
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta=} [properties] Properties to set
                                 */
                                function ObjectMeta(properties) {
                                    this.labels = {};
                                    this.annotations = {};
                                    this.ownerReferences = [];
                                    this.finalizers = [];
                                    this.managedFields = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ObjectMeta name.
                                 * @member {string} name
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.name = "";

                                /**
                                 * ObjectMeta generateName.
                                 * @member {string} generateName
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.generateName = "";

                                /**
                                 * ObjectMeta namespace.
                                 * @member {string} namespace
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.namespace = "";

                                /**
                                 * ObjectMeta selfLink.
                                 * @member {string} selfLink
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.selfLink = "";

                                /**
                                 * ObjectMeta uid.
                                 * @member {string} uid
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.uid = "";

                                /**
                                 * ObjectMeta resourceVersion.
                                 * @member {string} resourceVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.resourceVersion = "";

                                /**
                                 * ObjectMeta generation.
                                 * @member {number|Long} generation
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.generation = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * ObjectMeta creationTimestamp.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.ITime|null|undefined} creationTimestamp
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.creationTimestamp = null;

                                /**
                                 * ObjectMeta deletionTimestamp.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.ITime|null|undefined} deletionTimestamp
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.deletionTimestamp = null;

                                /**
                                 * ObjectMeta deletionGracePeriodSeconds.
                                 * @member {number|Long} deletionGracePeriodSeconds
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.deletionGracePeriodSeconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * ObjectMeta labels.
                                 * @member {Object.<string,string>} labels
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.labels = $util.emptyObject;

                                /**
                                 * ObjectMeta annotations.
                                 * @member {Object.<string,string>} annotations
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.annotations = $util.emptyObject;

                                /**
                                 * ObjectMeta ownerReferences.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IOwnerReference>} ownerReferences
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.ownerReferences = $util.emptyArray;

                                /**
                                 * ObjectMeta finalizers.
                                 * @member {Array.<string>} finalizers
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.finalizers = $util.emptyArray;

                                /**
                                 * ObjectMeta clusterName.
                                 * @member {string} clusterName
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.clusterName = "";

                                /**
                                 * ObjectMeta managedFields.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IManagedFieldsEntry>} managedFields
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 */
                                ObjectMeta.prototype.managedFields = $util.emptyArray;

                                /**
                                 * Creates a new ObjectMeta instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta} ObjectMeta instance
                                 */
                                ObjectMeta.create = function create(properties) {
                                    return new ObjectMeta(properties);
                                };

                                /**
                                 * Encodes the specified ObjectMeta message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta} message ObjectMeta message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ObjectMeta.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                    if (message.generateName != null && Object.hasOwnProperty.call(message, "generateName"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.generateName);
                                    if (message.namespace != null && Object.hasOwnProperty.call(message, "namespace"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.namespace);
                                    if (message.selfLink != null && Object.hasOwnProperty.call(message, "selfLink"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.selfLink);
                                    if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.uid);
                                    if (message.resourceVersion != null && Object.hasOwnProperty.call(message, "resourceVersion"))
                                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.resourceVersion);
                                    if (message.generation != null && Object.hasOwnProperty.call(message, "generation"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int64(message.generation);
                                    if (message.creationTimestamp != null && Object.hasOwnProperty.call(message, "creationTimestamp"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.encode(message.creationTimestamp, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                    if (message.deletionTimestamp != null && Object.hasOwnProperty.call(message, "deletionTimestamp"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.encode(message.deletionTimestamp, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                                    if (message.deletionGracePeriodSeconds != null && Object.hasOwnProperty.call(message, "deletionGracePeriodSeconds"))
                                        writer.uint32(/* id 10, wireType 0 =*/80).int64(message.deletionGracePeriodSeconds);
                                    if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                        for (let keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                            writer.uint32(/* id 11, wireType 2 =*/90).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                                    if (message.annotations != null && Object.hasOwnProperty.call(message, "annotations"))
                                        for (let keys = Object.keys(message.annotations), i = 0; i < keys.length; ++i)
                                            writer.uint32(/* id 12, wireType 2 =*/98).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.annotations[keys[i]]).ldelim();
                                    if (message.ownerReferences != null && message.ownerReferences.length)
                                        for (let i = 0; i < message.ownerReferences.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference.encode(message.ownerReferences[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                                    if (message.finalizers != null && message.finalizers.length)
                                        for (let i = 0; i < message.finalizers.length; ++i)
                                            writer.uint32(/* id 14, wireType 2 =*/114).string(message.finalizers[i]);
                                    if (message.clusterName != null && Object.hasOwnProperty.call(message, "clusterName"))
                                        writer.uint32(/* id 15, wireType 2 =*/122).string(message.clusterName);
                                    if (message.managedFields != null && message.managedFields.length)
                                        for (let i = 0; i < message.managedFields.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.encode(message.managedFields[i], writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ObjectMeta message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta} message ObjectMeta message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ObjectMeta.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an ObjectMeta message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta} ObjectMeta
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ObjectMeta.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta(), key, value;
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.name = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.generateName = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.namespace = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.selfLink = reader.string();
                                                break;
                                            }
                                        case 5: {
                                                message.uid = reader.string();
                                                break;
                                            }
                                        case 6: {
                                                message.resourceVersion = reader.string();
                                                break;
                                            }
                                        case 7: {
                                                message.generation = reader.int64();
                                                break;
                                            }
                                        case 8: {
                                                message.creationTimestamp = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 9: {
                                                message.deletionTimestamp = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 10: {
                                                message.deletionGracePeriodSeconds = reader.int64();
                                                break;
                                            }
                                        case 11: {
                                                if (message.labels === $util.emptyObject)
                                                    message.labels = {};
                                                let end2 = reader.uint32() + reader.pos;
                                                key = "";
                                                value = "";
                                                while (reader.pos < end2) {
                                                    let tag2 = reader.uint32();
                                                    switch (tag2 >>> 3) {
                                                    case 1:
                                                        key = reader.string();
                                                        break;
                                                    case 2:
                                                        value = reader.string();
                                                        break;
                                                    default:
                                                        reader.skipType(tag2 & 7);
                                                        break;
                                                    }
                                                }
                                                message.labels[key] = value;
                                                break;
                                            }
                                        case 12: {
                                                if (message.annotations === $util.emptyObject)
                                                    message.annotations = {};
                                                let end2 = reader.uint32() + reader.pos;
                                                key = "";
                                                value = "";
                                                while (reader.pos < end2) {
                                                    let tag2 = reader.uint32();
                                                    switch (tag2 >>> 3) {
                                                    case 1:
                                                        key = reader.string();
                                                        break;
                                                    case 2:
                                                        value = reader.string();
                                                        break;
                                                    default:
                                                        reader.skipType(tag2 & 7);
                                                        break;
                                                    }
                                                }
                                                message.annotations[key] = value;
                                                break;
                                            }
                                        case 13: {
                                                if (!(message.ownerReferences && message.ownerReferences.length))
                                                    message.ownerReferences = [];
                                                message.ownerReferences.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        case 14: {
                                                if (!(message.finalizers && message.finalizers.length))
                                                    message.finalizers = [];
                                                message.finalizers.push(reader.string());
                                                break;
                                            }
                                        case 15: {
                                                message.clusterName = reader.string();
                                                break;
                                            }
                                        case 17: {
                                                if (!(message.managedFields && message.managedFields.length))
                                                    message.managedFields = [];
                                                message.managedFields.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an ObjectMeta message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta} ObjectMeta
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ObjectMeta.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an ObjectMeta message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ObjectMeta.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.generateName != null && message.hasOwnProperty("generateName"))
                                        if (!$util.isString(message.generateName))
                                            return "generateName: string expected";
                                    if (message.namespace != null && message.hasOwnProperty("namespace"))
                                        if (!$util.isString(message.namespace))
                                            return "namespace: string expected";
                                    if (message.selfLink != null && message.hasOwnProperty("selfLink"))
                                        if (!$util.isString(message.selfLink))
                                            return "selfLink: string expected";
                                    if (message.uid != null && message.hasOwnProperty("uid"))
                                        if (!$util.isString(message.uid))
                                            return "uid: string expected";
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        if (!$util.isString(message.resourceVersion))
                                            return "resourceVersion: string expected";
                                    if (message.generation != null && message.hasOwnProperty("generation"))
                                        if (!$util.isInteger(message.generation) && !(message.generation && $util.isInteger(message.generation.low) && $util.isInteger(message.generation.high)))
                                            return "generation: integer|Long expected";
                                    if (message.creationTimestamp != null && message.hasOwnProperty("creationTimestamp")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.verify(message.creationTimestamp);
                                        if (error)
                                            return "creationTimestamp." + error;
                                    }
                                    if (message.deletionTimestamp != null && message.hasOwnProperty("deletionTimestamp")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.verify(message.deletionTimestamp);
                                        if (error)
                                            return "deletionTimestamp." + error;
                                    }
                                    if (message.deletionGracePeriodSeconds != null && message.hasOwnProperty("deletionGracePeriodSeconds"))
                                        if (!$util.isInteger(message.deletionGracePeriodSeconds) && !(message.deletionGracePeriodSeconds && $util.isInteger(message.deletionGracePeriodSeconds.low) && $util.isInteger(message.deletionGracePeriodSeconds.high)))
                                            return "deletionGracePeriodSeconds: integer|Long expected";
                                    if (message.labels != null && message.hasOwnProperty("labels")) {
                                        if (!$util.isObject(message.labels))
                                            return "labels: object expected";
                                        let key = Object.keys(message.labels);
                                        for (let i = 0; i < key.length; ++i)
                                            if (!$util.isString(message.labels[key[i]]))
                                                return "labels: string{k:string} expected";
                                    }
                                    if (message.annotations != null && message.hasOwnProperty("annotations")) {
                                        if (!$util.isObject(message.annotations))
                                            return "annotations: object expected";
                                        let key = Object.keys(message.annotations);
                                        for (let i = 0; i < key.length; ++i)
                                            if (!$util.isString(message.annotations[key[i]]))
                                                return "annotations: string{k:string} expected";
                                    }
                                    if (message.ownerReferences != null && message.hasOwnProperty("ownerReferences")) {
                                        if (!Array.isArray(message.ownerReferences))
                                            return "ownerReferences: array expected";
                                        for (let i = 0; i < message.ownerReferences.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference.verify(message.ownerReferences[i]);
                                            if (error)
                                                return "ownerReferences." + error;
                                        }
                                    }
                                    if (message.finalizers != null && message.hasOwnProperty("finalizers")) {
                                        if (!Array.isArray(message.finalizers))
                                            return "finalizers: array expected";
                                        for (let i = 0; i < message.finalizers.length; ++i)
                                            if (!$util.isString(message.finalizers[i]))
                                                return "finalizers: string[] expected";
                                    }
                                    if (message.clusterName != null && message.hasOwnProperty("clusterName"))
                                        if (!$util.isString(message.clusterName))
                                            return "clusterName: string expected";
                                    if (message.managedFields != null && message.hasOwnProperty("managedFields")) {
                                        if (!Array.isArray(message.managedFields))
                                            return "managedFields: array expected";
                                        for (let i = 0; i < message.managedFields.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.verify(message.managedFields[i]);
                                            if (error)
                                                return "managedFields." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates an ObjectMeta message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta} ObjectMeta
                                 */
                                ObjectMeta.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta();
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.generateName != null)
                                        message.generateName = String(object.generateName);
                                    if (object.namespace != null)
                                        message.namespace = String(object.namespace);
                                    if (object.selfLink != null)
                                        message.selfLink = String(object.selfLink);
                                    if (object.uid != null)
                                        message.uid = String(object.uid);
                                    if (object.resourceVersion != null)
                                        message.resourceVersion = String(object.resourceVersion);
                                    if (object.generation != null)
                                        if ($util.Long)
                                            (message.generation = $util.Long.fromValue(object.generation)).unsigned = false;
                                        else if (typeof object.generation === "string")
                                            message.generation = parseInt(object.generation, 10);
                                        else if (typeof object.generation === "number")
                                            message.generation = object.generation;
                                        else if (typeof object.generation === "object")
                                            message.generation = new $util.LongBits(object.generation.low >>> 0, object.generation.high >>> 0).toNumber();
                                    if (object.creationTimestamp != null) {
                                        if (typeof object.creationTimestamp !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.creationTimestamp: object expected");
                                        message.creationTimestamp = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.fromObject(object.creationTimestamp);
                                    }
                                    if (object.deletionTimestamp != null) {
                                        if (typeof object.deletionTimestamp !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.deletionTimestamp: object expected");
                                        message.deletionTimestamp = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.fromObject(object.deletionTimestamp);
                                    }
                                    if (object.deletionGracePeriodSeconds != null)
                                        if ($util.Long)
                                            (message.deletionGracePeriodSeconds = $util.Long.fromValue(object.deletionGracePeriodSeconds)).unsigned = false;
                                        else if (typeof object.deletionGracePeriodSeconds === "string")
                                            message.deletionGracePeriodSeconds = parseInt(object.deletionGracePeriodSeconds, 10);
                                        else if (typeof object.deletionGracePeriodSeconds === "number")
                                            message.deletionGracePeriodSeconds = object.deletionGracePeriodSeconds;
                                        else if (typeof object.deletionGracePeriodSeconds === "object")
                                            message.deletionGracePeriodSeconds = new $util.LongBits(object.deletionGracePeriodSeconds.low >>> 0, object.deletionGracePeriodSeconds.high >>> 0).toNumber();
                                    if (object.labels) {
                                        if (typeof object.labels !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.labels: object expected");
                                        message.labels = {};
                                        for (let keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                            message.labels[keys[i]] = String(object.labels[keys[i]]);
                                    }
                                    if (object.annotations) {
                                        if (typeof object.annotations !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.annotations: object expected");
                                        message.annotations = {};
                                        for (let keys = Object.keys(object.annotations), i = 0; i < keys.length; ++i)
                                            message.annotations[keys[i]] = String(object.annotations[keys[i]]);
                                    }
                                    if (object.ownerReferences) {
                                        if (!Array.isArray(object.ownerReferences))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.ownerReferences: array expected");
                                        message.ownerReferences = [];
                                        for (let i = 0; i < object.ownerReferences.length; ++i) {
                                            if (typeof object.ownerReferences[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.ownerReferences: object expected");
                                            message.ownerReferences[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference.fromObject(object.ownerReferences[i]);
                                        }
                                    }
                                    if (object.finalizers) {
                                        if (!Array.isArray(object.finalizers))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.finalizers: array expected");
                                        message.finalizers = [];
                                        for (let i = 0; i < object.finalizers.length; ++i)
                                            message.finalizers[i] = String(object.finalizers[i]);
                                    }
                                    if (object.clusterName != null)
                                        message.clusterName = String(object.clusterName);
                                    if (object.managedFields) {
                                        if (!Array.isArray(object.managedFields))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.managedFields: array expected");
                                        message.managedFields = [];
                                        for (let i = 0; i < object.managedFields.length; ++i) {
                                            if (typeof object.managedFields[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.managedFields: object expected");
                                            message.managedFields[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.fromObject(object.managedFields[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an ObjectMeta message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta} message ObjectMeta
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ObjectMeta.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults) {
                                        object.ownerReferences = [];
                                        object.finalizers = [];
                                        object.managedFields = [];
                                    }
                                    if (options.objects || options.defaults) {
                                        object.labels = {};
                                        object.annotations = {};
                                    }
                                    if (options.defaults) {
                                        object.name = "";
                                        object.generateName = "";
                                        object.namespace = "";
                                        object.selfLink = "";
                                        object.uid = "";
                                        object.resourceVersion = "";
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.generation = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.generation = options.longs === String ? "0" : 0;
                                        object.creationTimestamp = null;
                                        object.deletionTimestamp = null;
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.deletionGracePeriodSeconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.deletionGracePeriodSeconds = options.longs === String ? "0" : 0;
                                        object.clusterName = "";
                                    }
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.generateName != null && message.hasOwnProperty("generateName"))
                                        object.generateName = message.generateName;
                                    if (message.namespace != null && message.hasOwnProperty("namespace"))
                                        object.namespace = message.namespace;
                                    if (message.selfLink != null && message.hasOwnProperty("selfLink"))
                                        object.selfLink = message.selfLink;
                                    if (message.uid != null && message.hasOwnProperty("uid"))
                                        object.uid = message.uid;
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        object.resourceVersion = message.resourceVersion;
                                    if (message.generation != null && message.hasOwnProperty("generation"))
                                        if (typeof message.generation === "number")
                                            object.generation = options.longs === String ? String(message.generation) : message.generation;
                                        else
                                            object.generation = options.longs === String ? $util.Long.prototype.toString.call(message.generation) : options.longs === Number ? new $util.LongBits(message.generation.low >>> 0, message.generation.high >>> 0).toNumber() : message.generation;
                                    if (message.creationTimestamp != null && message.hasOwnProperty("creationTimestamp"))
                                        object.creationTimestamp = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.toObject(message.creationTimestamp, options);
                                    if (message.deletionTimestamp != null && message.hasOwnProperty("deletionTimestamp"))
                                        object.deletionTimestamp = $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time.toObject(message.deletionTimestamp, options);
                                    if (message.deletionGracePeriodSeconds != null && message.hasOwnProperty("deletionGracePeriodSeconds"))
                                        if (typeof message.deletionGracePeriodSeconds === "number")
                                            object.deletionGracePeriodSeconds = options.longs === String ? String(message.deletionGracePeriodSeconds) : message.deletionGracePeriodSeconds;
                                        else
                                            object.deletionGracePeriodSeconds = options.longs === String ? $util.Long.prototype.toString.call(message.deletionGracePeriodSeconds) : options.longs === Number ? new $util.LongBits(message.deletionGracePeriodSeconds.low >>> 0, message.deletionGracePeriodSeconds.high >>> 0).toNumber() : message.deletionGracePeriodSeconds;
                                    let keys2;
                                    if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                        object.labels = {};
                                        for (let j = 0; j < keys2.length; ++j)
                                            object.labels[keys2[j]] = message.labels[keys2[j]];
                                    }
                                    if (message.annotations && (keys2 = Object.keys(message.annotations)).length) {
                                        object.annotations = {};
                                        for (let j = 0; j < keys2.length; ++j)
                                            object.annotations[keys2[j]] = message.annotations[keys2[j]];
                                    }
                                    if (message.ownerReferences && message.ownerReferences.length) {
                                        object.ownerReferences = [];
                                        for (let j = 0; j < message.ownerReferences.length; ++j)
                                            object.ownerReferences[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference.toObject(message.ownerReferences[j], options);
                                    }
                                    if (message.finalizers && message.finalizers.length) {
                                        object.finalizers = [];
                                        for (let j = 0; j < message.finalizers.length; ++j)
                                            object.finalizers[j] = message.finalizers[j];
                                    }
                                    if (message.clusterName != null && message.hasOwnProperty("clusterName"))
                                        object.clusterName = message.clusterName;
                                    if (message.managedFields && message.managedFields.length) {
                                        object.managedFields = [];
                                        for (let j = 0; j < message.managedFields.length; ++j)
                                            object.managedFields[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry.toObject(message.managedFields[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this ObjectMeta to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ObjectMeta.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for ObjectMeta
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                ObjectMeta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta";
                                };

                                return ObjectMeta;
                            })();

                            v1.OwnerReference = (function() {

                                /**
                                 * Properties of an OwnerReference.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IOwnerReference
                                 * @property {string|null} [apiVersion] OwnerReference apiVersion
                                 * @property {string|null} [kind] OwnerReference kind
                                 * @property {string|null} [name] OwnerReference name
                                 * @property {string|null} [uid] OwnerReference uid
                                 * @property {boolean|null} [controller] OwnerReference controller
                                 * @property {boolean|null} [blockOwnerDeletion] OwnerReference blockOwnerDeletion
                                 */

                                /**
                                 * Constructs a new OwnerReference.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents an OwnerReference.
                                 * @implements IOwnerReference
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IOwnerReference=} [properties] Properties to set
                                 */
                                function OwnerReference(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * OwnerReference apiVersion.
                                 * @member {string} apiVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @instance
                                 */
                                OwnerReference.prototype.apiVersion = "";

                                /**
                                 * OwnerReference kind.
                                 * @member {string} kind
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @instance
                                 */
                                OwnerReference.prototype.kind = "";

                                /**
                                 * OwnerReference name.
                                 * @member {string} name
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @instance
                                 */
                                OwnerReference.prototype.name = "";

                                /**
                                 * OwnerReference uid.
                                 * @member {string} uid
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @instance
                                 */
                                OwnerReference.prototype.uid = "";

                                /**
                                 * OwnerReference controller.
                                 * @member {boolean} controller
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @instance
                                 */
                                OwnerReference.prototype.controller = false;

                                /**
                                 * OwnerReference blockOwnerDeletion.
                                 * @member {boolean} blockOwnerDeletion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @instance
                                 */
                                OwnerReference.prototype.blockOwnerDeletion = false;

                                /**
                                 * Creates a new OwnerReference instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IOwnerReference=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference} OwnerReference instance
                                 */
                                OwnerReference.create = function create(properties) {
                                    return new OwnerReference(properties);
                                };

                                /**
                                 * Encodes the specified OwnerReference message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IOwnerReference} message OwnerReference message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OwnerReference.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                                    if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.uid);
                                    if (message.apiVersion != null && Object.hasOwnProperty.call(message, "apiVersion"))
                                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.apiVersion);
                                    if (message.controller != null && Object.hasOwnProperty.call(message, "controller"))
                                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.controller);
                                    if (message.blockOwnerDeletion != null && Object.hasOwnProperty.call(message, "blockOwnerDeletion"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.blockOwnerDeletion);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified OwnerReference message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IOwnerReference} message OwnerReference message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OwnerReference.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an OwnerReference message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference} OwnerReference
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OwnerReference.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 5: {
                                                message.apiVersion = reader.string();
                                                break;
                                            }
                                        case 1: {
                                                message.kind = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.name = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.uid = reader.string();
                                                break;
                                            }
                                        case 6: {
                                                message.controller = reader.bool();
                                                break;
                                            }
                                        case 7: {
                                                message.blockOwnerDeletion = reader.bool();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an OwnerReference message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference} OwnerReference
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OwnerReference.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an OwnerReference message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                OwnerReference.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                        if (!$util.isString(message.apiVersion))
                                            return "apiVersion: string expected";
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        if (!$util.isString(message.kind))
                                            return "kind: string expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.uid != null && message.hasOwnProperty("uid"))
                                        if (!$util.isString(message.uid))
                                            return "uid: string expected";
                                    if (message.controller != null && message.hasOwnProperty("controller"))
                                        if (typeof message.controller !== "boolean")
                                            return "controller: boolean expected";
                                    if (message.blockOwnerDeletion != null && message.hasOwnProperty("blockOwnerDeletion"))
                                        if (typeof message.blockOwnerDeletion !== "boolean")
                                            return "blockOwnerDeletion: boolean expected";
                                    return null;
                                };

                                /**
                                 * Creates an OwnerReference message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference} OwnerReference
                                 */
                                OwnerReference.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference();
                                    if (object.apiVersion != null)
                                        message.apiVersion = String(object.apiVersion);
                                    if (object.kind != null)
                                        message.kind = String(object.kind);
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.uid != null)
                                        message.uid = String(object.uid);
                                    if (object.controller != null)
                                        message.controller = Boolean(object.controller);
                                    if (object.blockOwnerDeletion != null)
                                        message.blockOwnerDeletion = Boolean(object.blockOwnerDeletion);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an OwnerReference message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference} message OwnerReference
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                OwnerReference.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.kind = "";
                                        object.name = "";
                                        object.uid = "";
                                        object.apiVersion = "";
                                        object.controller = false;
                                        object.blockOwnerDeletion = false;
                                    }
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        object.kind = message.kind;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.uid != null && message.hasOwnProperty("uid"))
                                        object.uid = message.uid;
                                    if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                        object.apiVersion = message.apiVersion;
                                    if (message.controller != null && message.hasOwnProperty("controller"))
                                        object.controller = message.controller;
                                    if (message.blockOwnerDeletion != null && message.hasOwnProperty("blockOwnerDeletion"))
                                        object.blockOwnerDeletion = message.blockOwnerDeletion;
                                    return object;
                                };

                                /**
                                 * Converts this OwnerReference to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                OwnerReference.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for OwnerReference
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                OwnerReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference";
                                };

                                return OwnerReference;
                            })();

                            v1.PartialObjectMetadata = (function() {

                                /**
                                 * Properties of a PartialObjectMetadata.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IPartialObjectMetadata
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null} [metadata] PartialObjectMetadata metadata
                                 */

                                /**
                                 * Constructs a new PartialObjectMetadata.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a PartialObjectMetadata.
                                 * @implements IPartialObjectMetadata
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadata=} [properties] Properties to set
                                 */
                                function PartialObjectMetadata(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PartialObjectMetadata metadata.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IObjectMeta|null|undefined} metadata
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @instance
                                 */
                                PartialObjectMetadata.prototype.metadata = null;

                                /**
                                 * Creates a new PartialObjectMetadata instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadata=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata} PartialObjectMetadata instance
                                 */
                                PartialObjectMetadata.create = function create(properties) {
                                    return new PartialObjectMetadata(properties);
                                };

                                /**
                                 * Encodes the specified PartialObjectMetadata message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadata} message PartialObjectMetadata message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PartialObjectMetadata.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PartialObjectMetadata message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadata} message PartialObjectMetadata message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PartialObjectMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PartialObjectMetadata message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata} PartialObjectMetadata
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PartialObjectMetadata.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.decode(reader, reader.uint32());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PartialObjectMetadata message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata} PartialObjectMetadata
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PartialObjectMetadata.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PartialObjectMetadata message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PartialObjectMetadata.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.verify(message.metadata);
                                        if (error)
                                            return "metadata." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a PartialObjectMetadata message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata} PartialObjectMetadata
                                 */
                                PartialObjectMetadata.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata();
                                    if (object.metadata != null) {
                                        if (typeof object.metadata !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata.metadata: object expected");
                                        message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.fromObject(object.metadata);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PartialObjectMetadata message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata} message PartialObjectMetadata
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PartialObjectMetadata.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults)
                                        object.metadata = null;
                                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                                        object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.toObject(message.metadata, options);
                                    return object;
                                };

                                /**
                                 * Converts this PartialObjectMetadata to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PartialObjectMetadata.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for PartialObjectMetadata
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                PartialObjectMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata";
                                };

                                return PartialObjectMetadata;
                            })();

                            v1.PartialObjectMetadataList = (function() {

                                /**
                                 * Properties of a PartialObjectMetadataList.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IPartialObjectMetadataList
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null} [metadata] PartialObjectMetadataList metadata
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadata>|null} [items] PartialObjectMetadataList items
                                 */

                                /**
                                 * Constructs a new PartialObjectMetadataList.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a PartialObjectMetadataList.
                                 * @implements IPartialObjectMetadataList
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadataList=} [properties] Properties to set
                                 */
                                function PartialObjectMetadataList(properties) {
                                    this.items = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PartialObjectMetadataList metadata.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null|undefined} metadata
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @instance
                                 */
                                PartialObjectMetadataList.prototype.metadata = null;

                                /**
                                 * PartialObjectMetadataList items.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadata>} items
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @instance
                                 */
                                PartialObjectMetadataList.prototype.items = $util.emptyArray;

                                /**
                                 * Creates a new PartialObjectMetadataList instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadataList=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList} PartialObjectMetadataList instance
                                 */
                                PartialObjectMetadataList.create = function create(properties) {
                                    return new PartialObjectMetadataList(properties);
                                };

                                /**
                                 * Encodes the specified PartialObjectMetadataList message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadataList} message PartialObjectMetadataList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PartialObjectMetadataList.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.items != null && message.items.length)
                                        for (let i = 0; i < message.items.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PartialObjectMetadataList message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPartialObjectMetadataList} message PartialObjectMetadataList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PartialObjectMetadataList.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PartialObjectMetadataList message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList} PartialObjectMetadataList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PartialObjectMetadataList.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 2: {
                                                if (!(message.items && message.items.length))
                                                    message.items = [];
                                                message.items.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PartialObjectMetadataList message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList} PartialObjectMetadataList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PartialObjectMetadataList.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PartialObjectMetadataList message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PartialObjectMetadataList.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify(message.metadata);
                                        if (error)
                                            return "metadata." + error;
                                    }
                                    if (message.items != null && message.hasOwnProperty("items")) {
                                        if (!Array.isArray(message.items))
                                            return "items: array expected";
                                        for (let i = 0; i < message.items.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata.verify(message.items[i]);
                                            if (error)
                                                return "items." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a PartialObjectMetadataList message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList} PartialObjectMetadataList
                                 */
                                PartialObjectMetadataList.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList();
                                    if (object.metadata != null) {
                                        if (typeof object.metadata !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList.metadata: object expected");
                                        message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.fromObject(object.metadata);
                                    }
                                    if (object.items) {
                                        if (!Array.isArray(object.items))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList.items: array expected");
                                        message.items = [];
                                        for (let i = 0; i < object.items.length; ++i) {
                                            if (typeof object.items[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList.items: object expected");
                                            message.items[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata.fromObject(object.items[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PartialObjectMetadataList message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList} message PartialObjectMetadataList
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PartialObjectMetadataList.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.items = [];
                                    if (options.defaults)
                                        object.metadata = null;
                                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                                        object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.toObject(message.metadata, options);
                                    if (message.items && message.items.length) {
                                        object.items = [];
                                        for (let j = 0; j < message.items.length; ++j)
                                            object.items[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata.toObject(message.items[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this PartialObjectMetadataList to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PartialObjectMetadataList.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for PartialObjectMetadataList
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                PartialObjectMetadataList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList";
                                };

                                return PartialObjectMetadataList;
                            })();

                            v1.Patch = (function() {

                                /**
                                 * Properties of a Patch.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IPatch
                                 */

                                /**
                                 * Constructs a new Patch.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a Patch.
                                 * @implements IPatch
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPatch=} [properties] Properties to set
                                 */
                                function Patch(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Creates a new Patch instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPatch=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Patch} Patch instance
                                 */
                                Patch.create = function create(properties) {
                                    return new Patch(properties);
                                };

                                /**
                                 * Encodes the specified Patch message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Patch.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPatch} message Patch message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Patch.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Patch message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Patch.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPatch} message Patch message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Patch.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Patch message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Patch} Patch
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Patch.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Patch();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Patch message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Patch} Patch
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Patch.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Patch message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Patch.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    return null;
                                };

                                /**
                                 * Creates a Patch message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Patch} Patch
                                 */
                                Patch.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.Patch)
                                        return object;
                                    return new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Patch();
                                };

                                /**
                                 * Creates a plain object from a Patch message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.Patch} message Patch
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Patch.toObject = function toObject() {
                                    return {};
                                };

                                /**
                                 * Converts this Patch to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Patch.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Patch
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Patch
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Patch.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.Patch";
                                };

                                return Patch;
                            })();

                            v1.PatchOptions = (function() {

                                /**
                                 * Properties of a PatchOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IPatchOptions
                                 * @property {Array.<string>|null} [dryRun] PatchOptions dryRun
                                 * @property {boolean|null} [force] PatchOptions force
                                 * @property {string|null} [fieldManager] PatchOptions fieldManager
                                 * @property {string|null} [fieldValidation] PatchOptions fieldValidation
                                 */

                                /**
                                 * Constructs a new PatchOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a PatchOptions.
                                 * @implements IPatchOptions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPatchOptions=} [properties] Properties to set
                                 */
                                function PatchOptions(properties) {
                                    this.dryRun = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PatchOptions dryRun.
                                 * @member {Array.<string>} dryRun
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @instance
                                 */
                                PatchOptions.prototype.dryRun = $util.emptyArray;

                                /**
                                 * PatchOptions force.
                                 * @member {boolean} force
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @instance
                                 */
                                PatchOptions.prototype.force = false;

                                /**
                                 * PatchOptions fieldManager.
                                 * @member {string} fieldManager
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @instance
                                 */
                                PatchOptions.prototype.fieldManager = "";

                                /**
                                 * PatchOptions fieldValidation.
                                 * @member {string} fieldValidation
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @instance
                                 */
                                PatchOptions.prototype.fieldValidation = "";

                                /**
                                 * Creates a new PatchOptions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPatchOptions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions} PatchOptions instance
                                 */
                                PatchOptions.create = function create(properties) {
                                    return new PatchOptions(properties);
                                };

                                /**
                                 * Encodes the specified PatchOptions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPatchOptions} message PatchOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PatchOptions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.dryRun != null && message.dryRun.length)
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dryRun[i]);
                                    if (message.force != null && Object.hasOwnProperty.call(message, "force"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.force);
                                    if (message.fieldManager != null && Object.hasOwnProperty.call(message, "fieldManager"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.fieldManager);
                                    if (message.fieldValidation != null && Object.hasOwnProperty.call(message, "fieldValidation"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.fieldValidation);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PatchOptions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPatchOptions} message PatchOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PatchOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PatchOptions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions} PatchOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PatchOptions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (!(message.dryRun && message.dryRun.length))
                                                    message.dryRun = [];
                                                message.dryRun.push(reader.string());
                                                break;
                                            }
                                        case 2: {
                                                message.force = reader.bool();
                                                break;
                                            }
                                        case 3: {
                                                message.fieldManager = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.fieldValidation = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PatchOptions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions} PatchOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PatchOptions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PatchOptions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PatchOptions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.dryRun != null && message.hasOwnProperty("dryRun")) {
                                        if (!Array.isArray(message.dryRun))
                                            return "dryRun: array expected";
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            if (!$util.isString(message.dryRun[i]))
                                                return "dryRun: string[] expected";
                                    }
                                    if (message.force != null && message.hasOwnProperty("force"))
                                        if (typeof message.force !== "boolean")
                                            return "force: boolean expected";
                                    if (message.fieldManager != null && message.hasOwnProperty("fieldManager"))
                                        if (!$util.isString(message.fieldManager))
                                            return "fieldManager: string expected";
                                    if (message.fieldValidation != null && message.hasOwnProperty("fieldValidation"))
                                        if (!$util.isString(message.fieldValidation))
                                            return "fieldValidation: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a PatchOptions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions} PatchOptions
                                 */
                                PatchOptions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions();
                                    if (object.dryRun) {
                                        if (!Array.isArray(object.dryRun))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions.dryRun: array expected");
                                        message.dryRun = [];
                                        for (let i = 0; i < object.dryRun.length; ++i)
                                            message.dryRun[i] = String(object.dryRun[i]);
                                    }
                                    if (object.force != null)
                                        message.force = Boolean(object.force);
                                    if (object.fieldManager != null)
                                        message.fieldManager = String(object.fieldManager);
                                    if (object.fieldValidation != null)
                                        message.fieldValidation = String(object.fieldValidation);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PatchOptions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions} message PatchOptions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PatchOptions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.dryRun = [];
                                    if (options.defaults) {
                                        object.force = false;
                                        object.fieldManager = "";
                                        object.fieldValidation = "";
                                    }
                                    if (message.dryRun && message.dryRun.length) {
                                        object.dryRun = [];
                                        for (let j = 0; j < message.dryRun.length; ++j)
                                            object.dryRun[j] = message.dryRun[j];
                                    }
                                    if (message.force != null && message.hasOwnProperty("force"))
                                        object.force = message.force;
                                    if (message.fieldManager != null && message.hasOwnProperty("fieldManager"))
                                        object.fieldManager = message.fieldManager;
                                    if (message.fieldValidation != null && message.hasOwnProperty("fieldValidation"))
                                        object.fieldValidation = message.fieldValidation;
                                    return object;
                                };

                                /**
                                 * Converts this PatchOptions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PatchOptions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for PatchOptions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                PatchOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.PatchOptions";
                                };

                                return PatchOptions;
                            })();

                            v1.Preconditions = (function() {

                                /**
                                 * Properties of a Preconditions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IPreconditions
                                 * @property {string|null} [uid] Preconditions uid
                                 * @property {string|null} [resourceVersion] Preconditions resourceVersion
                                 */

                                /**
                                 * Constructs a new Preconditions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a Preconditions.
                                 * @implements IPreconditions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPreconditions=} [properties] Properties to set
                                 */
                                function Preconditions(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Preconditions uid.
                                 * @member {string} uid
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @instance
                                 */
                                Preconditions.prototype.uid = "";

                                /**
                                 * Preconditions resourceVersion.
                                 * @member {string} resourceVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @instance
                                 */
                                Preconditions.prototype.resourceVersion = "";

                                /**
                                 * Creates a new Preconditions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPreconditions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions} Preconditions instance
                                 */
                                Preconditions.create = function create(properties) {
                                    return new Preconditions(properties);
                                };

                                /**
                                 * Encodes the specified Preconditions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPreconditions} message Preconditions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Preconditions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);
                                    if (message.resourceVersion != null && Object.hasOwnProperty.call(message, "resourceVersion"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.resourceVersion);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Preconditions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IPreconditions} message Preconditions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Preconditions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Preconditions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions} Preconditions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Preconditions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.uid = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.resourceVersion = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Preconditions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions} Preconditions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Preconditions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Preconditions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Preconditions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.uid != null && message.hasOwnProperty("uid"))
                                        if (!$util.isString(message.uid))
                                            return "uid: string expected";
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        if (!$util.isString(message.resourceVersion))
                                            return "resourceVersion: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a Preconditions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions} Preconditions
                                 */
                                Preconditions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions();
                                    if (object.uid != null)
                                        message.uid = String(object.uid);
                                    if (object.resourceVersion != null)
                                        message.resourceVersion = String(object.resourceVersion);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Preconditions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions} message Preconditions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Preconditions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.uid = "";
                                        object.resourceVersion = "";
                                    }
                                    if (message.uid != null && message.hasOwnProperty("uid"))
                                        object.uid = message.uid;
                                    if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                                        object.resourceVersion = message.resourceVersion;
                                    return object;
                                };

                                /**
                                 * Converts this Preconditions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Preconditions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Preconditions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Preconditions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions";
                                };

                                return Preconditions;
                            })();

                            v1.RootPaths = (function() {

                                /**
                                 * Properties of a RootPaths.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IRootPaths
                                 * @property {Array.<string>|null} [paths] RootPaths paths
                                 */

                                /**
                                 * Constructs a new RootPaths.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a RootPaths.
                                 * @implements IRootPaths
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IRootPaths=} [properties] Properties to set
                                 */
                                function RootPaths(properties) {
                                    this.paths = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * RootPaths paths.
                                 * @member {Array.<string>} paths
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @instance
                                 */
                                RootPaths.prototype.paths = $util.emptyArray;

                                /**
                                 * Creates a new RootPaths instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IRootPaths=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths} RootPaths instance
                                 */
                                RootPaths.create = function create(properties) {
                                    return new RootPaths(properties);
                                };

                                /**
                                 * Encodes the specified RootPaths message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IRootPaths} message RootPaths message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RootPaths.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.paths != null && message.paths.length)
                                        for (let i = 0; i < message.paths.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified RootPaths message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IRootPaths} message RootPaths message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RootPaths.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a RootPaths message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths} RootPaths
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RootPaths.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (!(message.paths && message.paths.length))
                                                    message.paths = [];
                                                message.paths.push(reader.string());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a RootPaths message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths} RootPaths
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RootPaths.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a RootPaths message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                RootPaths.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.paths != null && message.hasOwnProperty("paths")) {
                                        if (!Array.isArray(message.paths))
                                            return "paths: array expected";
                                        for (let i = 0; i < message.paths.length; ++i)
                                            if (!$util.isString(message.paths[i]))
                                                return "paths: string[] expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a RootPaths message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths} RootPaths
                                 */
                                RootPaths.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths();
                                    if (object.paths) {
                                        if (!Array.isArray(object.paths))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths.paths: array expected");
                                        message.paths = [];
                                        for (let i = 0; i < object.paths.length; ++i)
                                            message.paths[i] = String(object.paths[i]);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a RootPaths message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths} message RootPaths
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                RootPaths.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.paths = [];
                                    if (message.paths && message.paths.length) {
                                        object.paths = [];
                                        for (let j = 0; j < message.paths.length; ++j)
                                            object.paths[j] = message.paths[j];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this RootPaths to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                RootPaths.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for RootPaths
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                RootPaths.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths";
                                };

                                return RootPaths;
                            })();

                            v1.ServerAddressByClientCIDR = (function() {

                                /**
                                 * Properties of a ServerAddressByClientCIDR.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IServerAddressByClientCIDR
                                 * @property {string|null} [clientCIDR] ServerAddressByClientCIDR clientCIDR
                                 * @property {string|null} [serverAddress] ServerAddressByClientCIDR serverAddress
                                 */

                                /**
                                 * Constructs a new ServerAddressByClientCIDR.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a ServerAddressByClientCIDR.
                                 * @implements IServerAddressByClientCIDR
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IServerAddressByClientCIDR=} [properties] Properties to set
                                 */
                                function ServerAddressByClientCIDR(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ServerAddressByClientCIDR clientCIDR.
                                 * @member {string} clientCIDR
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @instance
                                 */
                                ServerAddressByClientCIDR.prototype.clientCIDR = "";

                                /**
                                 * ServerAddressByClientCIDR serverAddress.
                                 * @member {string} serverAddress
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @instance
                                 */
                                ServerAddressByClientCIDR.prototype.serverAddress = "";

                                /**
                                 * Creates a new ServerAddressByClientCIDR instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IServerAddressByClientCIDR=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR} ServerAddressByClientCIDR instance
                                 */
                                ServerAddressByClientCIDR.create = function create(properties) {
                                    return new ServerAddressByClientCIDR(properties);
                                };

                                /**
                                 * Encodes the specified ServerAddressByClientCIDR message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IServerAddressByClientCIDR} message ServerAddressByClientCIDR message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerAddressByClientCIDR.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.clientCIDR != null && Object.hasOwnProperty.call(message, "clientCIDR"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.clientCIDR);
                                    if (message.serverAddress != null && Object.hasOwnProperty.call(message, "serverAddress"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.serverAddress);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ServerAddressByClientCIDR message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IServerAddressByClientCIDR} message ServerAddressByClientCIDR message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerAddressByClientCIDR.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ServerAddressByClientCIDR message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR} ServerAddressByClientCIDR
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerAddressByClientCIDR.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.clientCIDR = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.serverAddress = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ServerAddressByClientCIDR message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR} ServerAddressByClientCIDR
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerAddressByClientCIDR.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ServerAddressByClientCIDR message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ServerAddressByClientCIDR.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.clientCIDR != null && message.hasOwnProperty("clientCIDR"))
                                        if (!$util.isString(message.clientCIDR))
                                            return "clientCIDR: string expected";
                                    if (message.serverAddress != null && message.hasOwnProperty("serverAddress"))
                                        if (!$util.isString(message.serverAddress))
                                            return "serverAddress: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a ServerAddressByClientCIDR message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR} ServerAddressByClientCIDR
                                 */
                                ServerAddressByClientCIDR.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR();
                                    if (object.clientCIDR != null)
                                        message.clientCIDR = String(object.clientCIDR);
                                    if (object.serverAddress != null)
                                        message.serverAddress = String(object.serverAddress);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ServerAddressByClientCIDR message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR} message ServerAddressByClientCIDR
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ServerAddressByClientCIDR.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.clientCIDR = "";
                                        object.serverAddress = "";
                                    }
                                    if (message.clientCIDR != null && message.hasOwnProperty("clientCIDR"))
                                        object.clientCIDR = message.clientCIDR;
                                    if (message.serverAddress != null && message.hasOwnProperty("serverAddress"))
                                        object.serverAddress = message.serverAddress;
                                    return object;
                                };

                                /**
                                 * Converts this ServerAddressByClientCIDR to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ServerAddressByClientCIDR.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for ServerAddressByClientCIDR
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                ServerAddressByClientCIDR.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR";
                                };

                                return ServerAddressByClientCIDR;
                            })();

                            v1.Status = (function() {

                                /**
                                 * Properties of a Status.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IStatus
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null} [metadata] Status metadata
                                 * @property {string|null} [status] Status status
                                 * @property {string|null} [message] Status message
                                 * @property {string|null} [reason] Status reason
                                 * @property {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusDetails|null} [details] Status details
                                 * @property {number|null} [code] Status code
                                 */

                                /**
                                 * Constructs a new Status.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a Status.
                                 * @implements IStatus
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatus=} [properties] Properties to set
                                 */
                                function Status(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Status metadata.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IListMeta|null|undefined} metadata
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @instance
                                 */
                                Status.prototype.metadata = null;

                                /**
                                 * Status status.
                                 * @member {string} status
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @instance
                                 */
                                Status.prototype.status = "";

                                /**
                                 * Status message.
                                 * @member {string} message
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @instance
                                 */
                                Status.prototype.message = "";

                                /**
                                 * Status reason.
                                 * @member {string} reason
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @instance
                                 */
                                Status.prototype.reason = "";

                                /**
                                 * Status details.
                                 * @member {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusDetails|null|undefined} details
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @instance
                                 */
                                Status.prototype.details = null;

                                /**
                                 * Status code.
                                 * @member {number} code
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @instance
                                 */
                                Status.prototype.code = 0;

                                /**
                                 * Creates a new Status instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatus=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Status} Status instance
                                 */
                                Status.create = function create(properties) {
                                    return new Status(properties);
                                };

                                /**
                                 * Encodes the specified Status message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Status.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatus} message Status message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Status.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.status);
                                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
                                    if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.reason);
                                    if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                                        $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.encode(message.details, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.code);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Status message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Status.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatus} message Status message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Status.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Status message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Status} Status
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Status.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Status();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 2: {
                                                message.status = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.message = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.reason = reader.string();
                                                break;
                                            }
                                        case 5: {
                                                message.details = $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 6: {
                                                message.code = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Status message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Status} Status
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Status.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Status message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Status.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.verify(message.metadata);
                                        if (error)
                                            return "metadata." + error;
                                    }
                                    if (message.status != null && message.hasOwnProperty("status"))
                                        if (!$util.isString(message.status))
                                            return "status: string expected";
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    if (message.reason != null && message.hasOwnProperty("reason"))
                                        if (!$util.isString(message.reason))
                                            return "reason: string expected";
                                    if (message.details != null && message.hasOwnProperty("details")) {
                                        let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.verify(message.details);
                                        if (error)
                                            return "details." + error;
                                    }
                                    if (message.code != null && message.hasOwnProperty("code"))
                                        if (!$util.isInteger(message.code))
                                            return "code: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Status} Status
                                 */
                                Status.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.Status)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Status();
                                    if (object.metadata != null) {
                                        if (typeof object.metadata !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.Status.metadata: object expected");
                                        message.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.fromObject(object.metadata);
                                    }
                                    if (object.status != null)
                                        message.status = String(object.status);
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    if (object.reason != null)
                                        message.reason = String(object.reason);
                                    if (object.details != null) {
                                        if (typeof object.details !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.Status.details: object expected");
                                        message.details = $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.fromObject(object.details);
                                    }
                                    if (object.code != null)
                                        message.code = object.code | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.Status} message Status
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Status.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.metadata = null;
                                        object.status = "";
                                        object.message = "";
                                        object.reason = "";
                                        object.details = null;
                                        object.code = 0;
                                    }
                                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                                        object.metadata = $root.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta.toObject(message.metadata, options);
                                    if (message.status != null && message.hasOwnProperty("status"))
                                        object.status = message.status;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    if (message.reason != null && message.hasOwnProperty("reason"))
                                        object.reason = message.reason;
                                    if (message.details != null && message.hasOwnProperty("details"))
                                        object.details = $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.toObject(message.details, options);
                                    if (message.code != null && message.hasOwnProperty("code"))
                                        object.code = message.code;
                                    return object;
                                };

                                /**
                                 * Converts this Status to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Status.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Status
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Status
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.Status";
                                };

                                return Status;
                            })();

                            v1.StatusCause = (function() {

                                /**
                                 * Properties of a StatusCause.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IStatusCause
                                 * @property {string|null} [reason] StatusCause reason
                                 * @property {string|null} [message] StatusCause message
                                 * @property {string|null} [field] StatusCause field
                                 */

                                /**
                                 * Constructs a new StatusCause.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a StatusCause.
                                 * @implements IStatusCause
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusCause=} [properties] Properties to set
                                 */
                                function StatusCause(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * StatusCause reason.
                                 * @member {string} reason
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @instance
                                 */
                                StatusCause.prototype.reason = "";

                                /**
                                 * StatusCause message.
                                 * @member {string} message
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @instance
                                 */
                                StatusCause.prototype.message = "";

                                /**
                                 * StatusCause field.
                                 * @member {string} field
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @instance
                                 */
                                StatusCause.prototype.field = "";

                                /**
                                 * Creates a new StatusCause instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusCause=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause} StatusCause instance
                                 */
                                StatusCause.create = function create(properties) {
                                    return new StatusCause(properties);
                                };

                                /**
                                 * Encodes the specified StatusCause message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusCause} message StatusCause message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                StatusCause.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);
                                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                                    if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.field);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified StatusCause message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusCause} message StatusCause message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                StatusCause.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a StatusCause message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause} StatusCause
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                StatusCause.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.reason = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.message = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.field = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a StatusCause message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause} StatusCause
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                StatusCause.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a StatusCause message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                StatusCause.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.reason != null && message.hasOwnProperty("reason"))
                                        if (!$util.isString(message.reason))
                                            return "reason: string expected";
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    if (message.field != null && message.hasOwnProperty("field"))
                                        if (!$util.isString(message.field))
                                            return "field: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a StatusCause message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause} StatusCause
                                 */
                                StatusCause.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause();
                                    if (object.reason != null)
                                        message.reason = String(object.reason);
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    if (object.field != null)
                                        message.field = String(object.field);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a StatusCause message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause} message StatusCause
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                StatusCause.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.reason = "";
                                        object.message = "";
                                        object.field = "";
                                    }
                                    if (message.reason != null && message.hasOwnProperty("reason"))
                                        object.reason = message.reason;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    if (message.field != null && message.hasOwnProperty("field"))
                                        object.field = message.field;
                                    return object;
                                };

                                /**
                                 * Converts this StatusCause to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                StatusCause.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for StatusCause
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                StatusCause.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause";
                                };

                                return StatusCause;
                            })();

                            v1.StatusDetails = (function() {

                                /**
                                 * Properties of a StatusDetails.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IStatusDetails
                                 * @property {string|null} [name] StatusDetails name
                                 * @property {string|null} [group] StatusDetails group
                                 * @property {string|null} [kind] StatusDetails kind
                                 * @property {string|null} [uid] StatusDetails uid
                                 * @property {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IStatusCause>|null} [causes] StatusDetails causes
                                 * @property {number|null} [retryAfterSeconds] StatusDetails retryAfterSeconds
                                 */

                                /**
                                 * Constructs a new StatusDetails.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a StatusDetails.
                                 * @implements IStatusDetails
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusDetails=} [properties] Properties to set
                                 */
                                function StatusDetails(properties) {
                                    this.causes = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * StatusDetails name.
                                 * @member {string} name
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @instance
                                 */
                                StatusDetails.prototype.name = "";

                                /**
                                 * StatusDetails group.
                                 * @member {string} group
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @instance
                                 */
                                StatusDetails.prototype.group = "";

                                /**
                                 * StatusDetails kind.
                                 * @member {string} kind
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @instance
                                 */
                                StatusDetails.prototype.kind = "";

                                /**
                                 * StatusDetails uid.
                                 * @member {string} uid
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @instance
                                 */
                                StatusDetails.prototype.uid = "";

                                /**
                                 * StatusDetails causes.
                                 * @member {Array.<k8s.io.apimachinery.pkg.apis.meta.v1.IStatusCause>} causes
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @instance
                                 */
                                StatusDetails.prototype.causes = $util.emptyArray;

                                /**
                                 * StatusDetails retryAfterSeconds.
                                 * @member {number} retryAfterSeconds
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @instance
                                 */
                                StatusDetails.prototype.retryAfterSeconds = 0;

                                /**
                                 * Creates a new StatusDetails instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusDetails=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails} StatusDetails instance
                                 */
                                StatusDetails.create = function create(properties) {
                                    return new StatusDetails(properties);
                                };

                                /**
                                 * Encodes the specified StatusDetails message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusDetails} message StatusDetails message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                StatusDetails.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                    if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.group);
                                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.kind);
                                    if (message.causes != null && message.causes.length)
                                        for (let i = 0; i < message.causes.length; ++i)
                                            $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause.encode(message.causes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.retryAfterSeconds != null && Object.hasOwnProperty.call(message, "retryAfterSeconds"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.retryAfterSeconds);
                                    if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.uid);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified StatusDetails message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IStatusDetails} message StatusDetails message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                StatusDetails.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a StatusDetails message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails} StatusDetails
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                StatusDetails.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.name = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.group = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.kind = reader.string();
                                                break;
                                            }
                                        case 6: {
                                                message.uid = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                if (!(message.causes && message.causes.length))
                                                    message.causes = [];
                                                message.causes.push($root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        case 5: {
                                                message.retryAfterSeconds = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a StatusDetails message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails} StatusDetails
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                StatusDetails.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a StatusDetails message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                StatusDetails.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        if (!$util.isString(message.group))
                                            return "group: string expected";
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        if (!$util.isString(message.kind))
                                            return "kind: string expected";
                                    if (message.uid != null && message.hasOwnProperty("uid"))
                                        if (!$util.isString(message.uid))
                                            return "uid: string expected";
                                    if (message.causes != null && message.hasOwnProperty("causes")) {
                                        if (!Array.isArray(message.causes))
                                            return "causes: array expected";
                                        for (let i = 0; i < message.causes.length; ++i) {
                                            let error = $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause.verify(message.causes[i]);
                                            if (error)
                                                return "causes." + error;
                                        }
                                    }
                                    if (message.retryAfterSeconds != null && message.hasOwnProperty("retryAfterSeconds"))
                                        if (!$util.isInteger(message.retryAfterSeconds))
                                            return "retryAfterSeconds: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a StatusDetails message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails} StatusDetails
                                 */
                                StatusDetails.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails();
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.group != null)
                                        message.group = String(object.group);
                                    if (object.kind != null)
                                        message.kind = String(object.kind);
                                    if (object.uid != null)
                                        message.uid = String(object.uid);
                                    if (object.causes) {
                                        if (!Array.isArray(object.causes))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.causes: array expected");
                                        message.causes = [];
                                        for (let i = 0; i < object.causes.length; ++i) {
                                            if (typeof object.causes[i] !== "object")
                                                throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails.causes: object expected");
                                            message.causes[i] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause.fromObject(object.causes[i]);
                                        }
                                    }
                                    if (object.retryAfterSeconds != null)
                                        message.retryAfterSeconds = object.retryAfterSeconds | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a StatusDetails message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails} message StatusDetails
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                StatusDetails.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.causes = [];
                                    if (options.defaults) {
                                        object.name = "";
                                        object.group = "";
                                        object.kind = "";
                                        object.retryAfterSeconds = 0;
                                        object.uid = "";
                                    }
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.group != null && message.hasOwnProperty("group"))
                                        object.group = message.group;
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        object.kind = message.kind;
                                    if (message.causes && message.causes.length) {
                                        object.causes = [];
                                        for (let j = 0; j < message.causes.length; ++j)
                                            object.causes[j] = $root.k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause.toObject(message.causes[j], options);
                                    }
                                    if (message.retryAfterSeconds != null && message.hasOwnProperty("retryAfterSeconds"))
                                        object.retryAfterSeconds = message.retryAfterSeconds;
                                    if (message.uid != null && message.hasOwnProperty("uid"))
                                        object.uid = message.uid;
                                    return object;
                                };

                                /**
                                 * Converts this StatusDetails to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                StatusDetails.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for StatusDetails
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                StatusDetails.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails";
                                };

                                return StatusDetails;
                            })();

                            v1.TableOptions = (function() {

                                /**
                                 * Properties of a TableOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface ITableOptions
                                 * @property {string|null} [includeObject] TableOptions includeObject
                                 */

                                /**
                                 * Constructs a new TableOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a TableOptions.
                                 * @implements ITableOptions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITableOptions=} [properties] Properties to set
                                 */
                                function TableOptions(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * TableOptions includeObject.
                                 * @member {string} includeObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @instance
                                 */
                                TableOptions.prototype.includeObject = "";

                                /**
                                 * Creates a new TableOptions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITableOptions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions} TableOptions instance
                                 */
                                TableOptions.create = function create(properties) {
                                    return new TableOptions(properties);
                                };

                                /**
                                 * Encodes the specified TableOptions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITableOptions} message TableOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                TableOptions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.includeObject != null && Object.hasOwnProperty.call(message, "includeObject"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.includeObject);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified TableOptions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITableOptions} message TableOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                TableOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a TableOptions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions} TableOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                TableOptions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.includeObject = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a TableOptions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions} TableOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                TableOptions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a TableOptions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                TableOptions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.includeObject != null && message.hasOwnProperty("includeObject"))
                                        if (!$util.isString(message.includeObject))
                                            return "includeObject: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a TableOptions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions} TableOptions
                                 */
                                TableOptions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions();
                                    if (object.includeObject != null)
                                        message.includeObject = String(object.includeObject);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a TableOptions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions} message TableOptions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                TableOptions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults)
                                        object.includeObject = "";
                                    if (message.includeObject != null && message.hasOwnProperty("includeObject"))
                                        object.includeObject = message.includeObject;
                                    return object;
                                };

                                /**
                                 * Converts this TableOptions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                TableOptions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for TableOptions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                TableOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.TableOptions";
                                };

                                return TableOptions;
                            })();

                            v1.Time = (function() {

                                /**
                                 * Properties of a Time.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface ITime
                                 * @property {number|Long|null} [seconds] Time seconds
                                 * @property {number|null} [nanos] Time nanos
                                 */

                                /**
                                 * Constructs a new Time.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a Time.
                                 * @implements ITime
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITime=} [properties] Properties to set
                                 */
                                function Time(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Time seconds.
                                 * @member {number|Long} seconds
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @instance
                                 */
                                Time.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Time nanos.
                                 * @member {number} nanos
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @instance
                                 */
                                Time.prototype.nanos = 0;

                                /**
                                 * Creates a new Time instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITime=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Time} Time instance
                                 */
                                Time.create = function create(properties) {
                                    return new Time(properties);
                                };

                                /**
                                 * Encodes the specified Time message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Time.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITime} message Time message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Time.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Time message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Time.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITime} message Time message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Time.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Time message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Time} Time
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Time.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.seconds = reader.int64();
                                                break;
                                            }
                                        case 2: {
                                                message.nanos = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Time message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Time} Time
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Time.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Time message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Time.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                                            return "seconds: integer|Long expected";
                                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                                        if (!$util.isInteger(message.nanos))
                                            return "nanos: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Time message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Time} Time
                                 */
                                Time.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Time();
                                    if (object.seconds != null)
                                        if ($util.Long)
                                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                                        else if (typeof object.seconds === "string")
                                            message.seconds = parseInt(object.seconds, 10);
                                        else if (typeof object.seconds === "number")
                                            message.seconds = object.seconds;
                                        else if (typeof object.seconds === "object")
                                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                                    if (object.nanos != null)
                                        message.nanos = object.nanos | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Time message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.Time} message Time
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Time.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.seconds = options.longs === String ? "0" : 0;
                                        object.nanos = 0;
                                    }
                                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                                        if (typeof message.seconds === "number")
                                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                                        else
                                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                                        object.nanos = message.nanos;
                                    return object;
                                };

                                /**
                                 * Converts this Time to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Time.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Time
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Time
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Time.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.Time";
                                };

                                return Time;
                            })();

                            v1.Timestamp = (function() {

                                /**
                                 * Properties of a Timestamp.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface ITimestamp
                                 * @property {number|Long|null} [seconds] Timestamp seconds
                                 * @property {number|null} [nanos] Timestamp nanos
                                 */

                                /**
                                 * Constructs a new Timestamp.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a Timestamp.
                                 * @implements ITimestamp
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITimestamp=} [properties] Properties to set
                                 */
                                function Timestamp(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Timestamp seconds.
                                 * @member {number|Long} seconds
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @instance
                                 */
                                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Timestamp nanos.
                                 * @member {number} nanos
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @instance
                                 */
                                Timestamp.prototype.nanos = 0;

                                /**
                                 * Creates a new Timestamp instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITimestamp=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp} Timestamp instance
                                 */
                                Timestamp.create = function create(properties) {
                                    return new Timestamp(properties);
                                };

                                /**
                                 * Encodes the specified Timestamp message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITimestamp} message Timestamp message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Timestamp.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITimestamp} message Timestamp message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Timestamp message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp} Timestamp
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Timestamp.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.seconds = reader.int64();
                                                break;
                                            }
                                        case 2: {
                                                message.nanos = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp} Timestamp
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Timestamp message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Timestamp.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                                            return "seconds: integer|Long expected";
                                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                                        if (!$util.isInteger(message.nanos))
                                            return "nanos: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp} Timestamp
                                 */
                                Timestamp.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp();
                                    if (object.seconds != null)
                                        if ($util.Long)
                                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                                        else if (typeof object.seconds === "string")
                                            message.seconds = parseInt(object.seconds, 10);
                                        else if (typeof object.seconds === "number")
                                            message.seconds = object.seconds;
                                        else if (typeof object.seconds === "object")
                                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                                    if (object.nanos != null)
                                        message.nanos = object.nanos | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp} message Timestamp
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Timestamp.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            let long = new $util.Long(0, 0, false);
                                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.seconds = options.longs === String ? "0" : 0;
                                        object.nanos = 0;
                                    }
                                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                                        if (typeof message.seconds === "number")
                                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                                        else
                                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                                        object.nanos = message.nanos;
                                    return object;
                                };

                                /**
                                 * Converts this Timestamp to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Timestamp.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Timestamp
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp";
                                };

                                return Timestamp;
                            })();

                            v1.TypeMeta = (function() {

                                /**
                                 * Properties of a TypeMeta.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface ITypeMeta
                                 * @property {string|null} [kind] TypeMeta kind
                                 * @property {string|null} [apiVersion] TypeMeta apiVersion
                                 */

                                /**
                                 * Constructs a new TypeMeta.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a TypeMeta.
                                 * @implements ITypeMeta
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITypeMeta=} [properties] Properties to set
                                 */
                                function TypeMeta(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * TypeMeta kind.
                                 * @member {string} kind
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @instance
                                 */
                                TypeMeta.prototype.kind = "";

                                /**
                                 * TypeMeta apiVersion.
                                 * @member {string} apiVersion
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @instance
                                 */
                                TypeMeta.prototype.apiVersion = "";

                                /**
                                 * Creates a new TypeMeta instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITypeMeta=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta} TypeMeta instance
                                 */
                                TypeMeta.create = function create(properties) {
                                    return new TypeMeta(properties);
                                };

                                /**
                                 * Encodes the specified TypeMeta message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITypeMeta} message TypeMeta message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                TypeMeta.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                                    if (message.apiVersion != null && Object.hasOwnProperty.call(message, "apiVersion"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.apiVersion);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified TypeMeta message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.ITypeMeta} message TypeMeta message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                TypeMeta.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a TypeMeta message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta} TypeMeta
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                TypeMeta.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.kind = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.apiVersion = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a TypeMeta message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta} TypeMeta
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                TypeMeta.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a TypeMeta message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                TypeMeta.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        if (!$util.isString(message.kind))
                                            return "kind: string expected";
                                    if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                        if (!$util.isString(message.apiVersion))
                                            return "apiVersion: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a TypeMeta message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta} TypeMeta
                                 */
                                TypeMeta.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta();
                                    if (object.kind != null)
                                        message.kind = String(object.kind);
                                    if (object.apiVersion != null)
                                        message.apiVersion = String(object.apiVersion);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a TypeMeta message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta} message TypeMeta
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                TypeMeta.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.kind = "";
                                        object.apiVersion = "";
                                    }
                                    if (message.kind != null && message.hasOwnProperty("kind"))
                                        object.kind = message.kind;
                                    if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                        object.apiVersion = message.apiVersion;
                                    return object;
                                };

                                /**
                                 * Converts this TypeMeta to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                TypeMeta.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for TypeMeta
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                TypeMeta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta";
                                };

                                return TypeMeta;
                            })();

                            v1.UpdateOptions = (function() {

                                /**
                                 * Properties of an UpdateOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IUpdateOptions
                                 * @property {Array.<string>|null} [dryRun] UpdateOptions dryRun
                                 * @property {string|null} [fieldManager] UpdateOptions fieldManager
                                 * @property {string|null} [fieldValidation] UpdateOptions fieldValidation
                                 */

                                /**
                                 * Constructs a new UpdateOptions.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents an UpdateOptions.
                                 * @implements IUpdateOptions
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IUpdateOptions=} [properties] Properties to set
                                 */
                                function UpdateOptions(properties) {
                                    this.dryRun = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * UpdateOptions dryRun.
                                 * @member {Array.<string>} dryRun
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @instance
                                 */
                                UpdateOptions.prototype.dryRun = $util.emptyArray;

                                /**
                                 * UpdateOptions fieldManager.
                                 * @member {string} fieldManager
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @instance
                                 */
                                UpdateOptions.prototype.fieldManager = "";

                                /**
                                 * UpdateOptions fieldValidation.
                                 * @member {string} fieldValidation
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @instance
                                 */
                                UpdateOptions.prototype.fieldValidation = "";

                                /**
                                 * Creates a new UpdateOptions instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IUpdateOptions=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions} UpdateOptions instance
                                 */
                                UpdateOptions.create = function create(properties) {
                                    return new UpdateOptions(properties);
                                };

                                /**
                                 * Encodes the specified UpdateOptions message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IUpdateOptions} message UpdateOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                UpdateOptions.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.dryRun != null && message.dryRun.length)
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dryRun[i]);
                                    if (message.fieldManager != null && Object.hasOwnProperty.call(message, "fieldManager"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.fieldManager);
                                    if (message.fieldValidation != null && Object.hasOwnProperty.call(message, "fieldValidation"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.fieldValidation);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified UpdateOptions message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IUpdateOptions} message UpdateOptions message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                UpdateOptions.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an UpdateOptions message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions} UpdateOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                UpdateOptions.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (!(message.dryRun && message.dryRun.length))
                                                    message.dryRun = [];
                                                message.dryRun.push(reader.string());
                                                break;
                                            }
                                        case 2: {
                                                message.fieldManager = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.fieldValidation = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an UpdateOptions message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions} UpdateOptions
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                UpdateOptions.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an UpdateOptions message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                UpdateOptions.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.dryRun != null && message.hasOwnProperty("dryRun")) {
                                        if (!Array.isArray(message.dryRun))
                                            return "dryRun: array expected";
                                        for (let i = 0; i < message.dryRun.length; ++i)
                                            if (!$util.isString(message.dryRun[i]))
                                                return "dryRun: string[] expected";
                                    }
                                    if (message.fieldManager != null && message.hasOwnProperty("fieldManager"))
                                        if (!$util.isString(message.fieldManager))
                                            return "fieldManager: string expected";
                                    if (message.fieldValidation != null && message.hasOwnProperty("fieldValidation"))
                                        if (!$util.isString(message.fieldValidation))
                                            return "fieldValidation: string expected";
                                    return null;
                                };

                                /**
                                 * Creates an UpdateOptions message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions} UpdateOptions
                                 */
                                UpdateOptions.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions();
                                    if (object.dryRun) {
                                        if (!Array.isArray(object.dryRun))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions.dryRun: array expected");
                                        message.dryRun = [];
                                        for (let i = 0; i < object.dryRun.length; ++i)
                                            message.dryRun[i] = String(object.dryRun[i]);
                                    }
                                    if (object.fieldManager != null)
                                        message.fieldManager = String(object.fieldManager);
                                    if (object.fieldValidation != null)
                                        message.fieldValidation = String(object.fieldValidation);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an UpdateOptions message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions} message UpdateOptions
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                UpdateOptions.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.dryRun = [];
                                    if (options.defaults) {
                                        object.fieldManager = "";
                                        object.fieldValidation = "";
                                    }
                                    if (message.dryRun && message.dryRun.length) {
                                        object.dryRun = [];
                                        for (let j = 0; j < message.dryRun.length; ++j)
                                            object.dryRun[j] = message.dryRun[j];
                                    }
                                    if (message.fieldManager != null && message.hasOwnProperty("fieldManager"))
                                        object.fieldManager = message.fieldManager;
                                    if (message.fieldValidation != null && message.hasOwnProperty("fieldValidation"))
                                        object.fieldValidation = message.fieldValidation;
                                    return object;
                                };

                                /**
                                 * Converts this UpdateOptions to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                UpdateOptions.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for UpdateOptions
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                UpdateOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions";
                                };

                                return UpdateOptions;
                            })();

                            v1.Verbs = (function() {

                                /**
                                 * Properties of a Verbs.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IVerbs
                                 * @property {Array.<string>|null} [items] Verbs items
                                 */

                                /**
                                 * Constructs a new Verbs.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a Verbs.
                                 * @implements IVerbs
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IVerbs=} [properties] Properties to set
                                 */
                                function Verbs(properties) {
                                    this.items = [];
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Verbs items.
                                 * @member {Array.<string>} items
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @instance
                                 */
                                Verbs.prototype.items = $util.emptyArray;

                                /**
                                 * Creates a new Verbs instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IVerbs=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Verbs} Verbs instance
                                 */
                                Verbs.create = function create(properties) {
                                    return new Verbs(properties);
                                };

                                /**
                                 * Encodes the specified Verbs message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IVerbs} message Verbs message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Verbs.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.items != null && message.items.length)
                                        for (let i = 0; i < message.items.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.items[i]);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Verbs message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IVerbs} message Verbs message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Verbs.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Verbs message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Verbs} Verbs
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Verbs.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Verbs();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                if (!(message.items && message.items.length))
                                                    message.items = [];
                                                message.items.push(reader.string());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Verbs message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Verbs} Verbs
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Verbs.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Verbs message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Verbs.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.items != null && message.hasOwnProperty("items")) {
                                        if (!Array.isArray(message.items))
                                            return "items: array expected";
                                        for (let i = 0; i < message.items.length; ++i)
                                            if (!$util.isString(message.items[i]))
                                                return "items: string[] expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a Verbs message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.Verbs} Verbs
                                 */
                                Verbs.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.Verbs)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.Verbs();
                                    if (object.items) {
                                        if (!Array.isArray(object.items))
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.Verbs.items: array expected");
                                        message.items = [];
                                        for (let i = 0; i < object.items.length; ++i)
                                            message.items[i] = String(object.items[i]);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Verbs message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.Verbs} message Verbs
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Verbs.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.arrays || options.defaults)
                                        object.items = [];
                                    if (message.items && message.items.length) {
                                        object.items = [];
                                        for (let j = 0; j < message.items.length; ++j)
                                            object.items[j] = message.items[j];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this Verbs to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Verbs.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for Verbs
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.Verbs
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Verbs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.Verbs";
                                };

                                return Verbs;
                            })();

                            v1.WatchEvent = (function() {

                                /**
                                 * Properties of a WatchEvent.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @interface IWatchEvent
                                 * @property {string|null} [type] WatchEvent type
                                 * @property {k8s.io.apimachinery.pkg.runtime.IRawExtension|null} [object] WatchEvent object
                                 */

                                /**
                                 * Constructs a new WatchEvent.
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1
                                 * @classdesc Represents a WatchEvent.
                                 * @implements IWatchEvent
                                 * @constructor
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IWatchEvent=} [properties] Properties to set
                                 */
                                function WatchEvent(properties) {
                                    if (properties)
                                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * WatchEvent type.
                                 * @member {string} type
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @instance
                                 */
                                WatchEvent.prototype.type = "";

                                /**
                                 * WatchEvent object.
                                 * @member {k8s.io.apimachinery.pkg.runtime.IRawExtension|null|undefined} object
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @instance
                                 */
                                WatchEvent.prototype.object = null;

                                /**
                                 * Creates a new WatchEvent instance using the specified properties.
                                 * @function create
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IWatchEvent=} [properties] Properties to set
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent} WatchEvent instance
                                 */
                                WatchEvent.create = function create(properties) {
                                    return new WatchEvent(properties);
                                };

                                /**
                                 * Encodes the specified WatchEvent message. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent.verify|verify} messages.
                                 * @function encode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IWatchEvent} message WatchEvent message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                WatchEvent.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                                    if (message.object != null && Object.hasOwnProperty.call(message, "object"))
                                        $root.k8s.io.apimachinery.pkg.runtime.RawExtension.encode(message.object, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified WatchEvent message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.IWatchEvent} message WatchEvent message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                WatchEvent.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a WatchEvent message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent} WatchEvent
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                WatchEvent.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent();
                                    while (reader.pos < end) {
                                        let tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.type = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.object = $root.k8s.io.apimachinery.pkg.runtime.RawExtension.decode(reader, reader.uint32());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a WatchEvent message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent} WatchEvent
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                WatchEvent.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a WatchEvent message.
                                 * @function verify
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                WatchEvent.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isString(message.type))
                                            return "type: string expected";
                                    if (message.object != null && message.hasOwnProperty("object")) {
                                        let error = $root.k8s.io.apimachinery.pkg.runtime.RawExtension.verify(message.object);
                                        if (error)
                                            return "object." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a WatchEvent message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent} WatchEvent
                                 */
                                WatchEvent.fromObject = function fromObject(object) {
                                    if (object instanceof $root.k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent)
                                        return object;
                                    let message = new $root.k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent();
                                    if (object.type != null)
                                        message.type = String(object.type);
                                    if (object.object != null) {
                                        if (typeof object.object !== "object")
                                            throw TypeError(".k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent.object: object expected");
                                        message.object = $root.k8s.io.apimachinery.pkg.runtime.RawExtension.fromObject(object.object);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a WatchEvent message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent} message WatchEvent
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                WatchEvent.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    let object = {};
                                    if (options.defaults) {
                                        object.type = "";
                                        object.object = null;
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    if (message.object != null && message.hasOwnProperty("object"))
                                        object.object = $root.k8s.io.apimachinery.pkg.runtime.RawExtension.toObject(message.object, options);
                                    return object;
                                };

                                /**
                                 * Converts this WatchEvent to JSON.
                                 * @function toJSON
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                WatchEvent.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * Gets the default type url for WatchEvent
                                 * @function getTypeUrl
                                 * @memberof k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                WatchEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent";
                                };

                                return WatchEvent;
                            })();

                            return v1;
                        })();

                        return meta;
                    })();

                    return apis;
                })();

                pkg.runtime = (function() {

                    /**
                     * Namespace runtime.
                     * @memberof k8s.io.apimachinery.pkg
                     * @namespace
                     */
                    const runtime = {};

                    runtime.RawExtension = (function() {

                        /**
                         * Properties of a RawExtension.
                         * @memberof k8s.io.apimachinery.pkg.runtime
                         * @interface IRawExtension
                         * @property {Uint8Array|null} [raw] RawExtension raw
                         */

                        /**
                         * Constructs a new RawExtension.
                         * @memberof k8s.io.apimachinery.pkg.runtime
                         * @classdesc Represents a RawExtension.
                         * @implements IRawExtension
                         * @constructor
                         * @param {k8s.io.apimachinery.pkg.runtime.IRawExtension=} [properties] Properties to set
                         */
                        function RawExtension(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * RawExtension raw.
                         * @member {Uint8Array} raw
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @instance
                         */
                        RawExtension.prototype.raw = $util.newBuffer([]);

                        /**
                         * Creates a new RawExtension instance using the specified properties.
                         * @function create
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.IRawExtension=} [properties] Properties to set
                         * @returns {k8s.io.apimachinery.pkg.runtime.RawExtension} RawExtension instance
                         */
                        RawExtension.create = function create(properties) {
                            return new RawExtension(properties);
                        };

                        /**
                         * Encodes the specified RawExtension message. Does not implicitly {@link k8s.io.apimachinery.pkg.runtime.RawExtension.verify|verify} messages.
                         * @function encode
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.IRawExtension} message RawExtension message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RawExtension.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.raw != null && Object.hasOwnProperty.call(message, "raw"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.raw);
                            return writer;
                        };

                        /**
                         * Encodes the specified RawExtension message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.runtime.RawExtension.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.IRawExtension} message RawExtension message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RawExtension.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RawExtension message from the specified reader or buffer.
                         * @function decode
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {k8s.io.apimachinery.pkg.runtime.RawExtension} RawExtension
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RawExtension.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.runtime.RawExtension();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.raw = reader.bytes();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RawExtension message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {k8s.io.apimachinery.pkg.runtime.RawExtension} RawExtension
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RawExtension.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RawExtension message.
                         * @function verify
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RawExtension.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.raw != null && message.hasOwnProperty("raw"))
                                if (!(message.raw && typeof message.raw.length === "number" || $util.isString(message.raw)))
                                    return "raw: buffer expected";
                            return null;
                        };

                        /**
                         * Creates a RawExtension message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {k8s.io.apimachinery.pkg.runtime.RawExtension} RawExtension
                         */
                        RawExtension.fromObject = function fromObject(object) {
                            if (object instanceof $root.k8s.io.apimachinery.pkg.runtime.RawExtension)
                                return object;
                            let message = new $root.k8s.io.apimachinery.pkg.runtime.RawExtension();
                            if (object.raw != null)
                                if (typeof object.raw === "string")
                                    $util.base64.decode(object.raw, message.raw = $util.newBuffer($util.base64.length(object.raw)), 0);
                                else if (object.raw.length >= 0)
                                    message.raw = object.raw;
                            return message;
                        };

                        /**
                         * Creates a plain object from a RawExtension message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.RawExtension} message RawExtension
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RawExtension.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                if (options.bytes === String)
                                    object.raw = "";
                                else {
                                    object.raw = [];
                                    if (options.bytes !== Array)
                                        object.raw = $util.newBuffer(object.raw);
                                }
                            if (message.raw != null && message.hasOwnProperty("raw"))
                                object.raw = options.bytes === String ? $util.base64.encode(message.raw, 0, message.raw.length) : options.bytes === Array ? Array.prototype.slice.call(message.raw) : message.raw;
                            return object;
                        };

                        /**
                         * Converts this RawExtension to JSON.
                         * @function toJSON
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RawExtension.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for RawExtension
                         * @function getTypeUrl
                         * @memberof k8s.io.apimachinery.pkg.runtime.RawExtension
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        RawExtension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/k8s.io.apimachinery.pkg.runtime.RawExtension";
                        };

                        return RawExtension;
                    })();

                    runtime.TypeMeta = (function() {

                        /**
                         * Properties of a TypeMeta.
                         * @memberof k8s.io.apimachinery.pkg.runtime
                         * @interface ITypeMeta
                         * @property {string|null} [apiVersion] TypeMeta apiVersion
                         * @property {string|null} [kind] TypeMeta kind
                         */

                        /**
                         * Constructs a new TypeMeta.
                         * @memberof k8s.io.apimachinery.pkg.runtime
                         * @classdesc Represents a TypeMeta.
                         * @implements ITypeMeta
                         * @constructor
                         * @param {k8s.io.apimachinery.pkg.runtime.ITypeMeta=} [properties] Properties to set
                         */
                        function TypeMeta(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * TypeMeta apiVersion.
                         * @member {string} apiVersion
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @instance
                         */
                        TypeMeta.prototype.apiVersion = "";

                        /**
                         * TypeMeta kind.
                         * @member {string} kind
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @instance
                         */
                        TypeMeta.prototype.kind = "";

                        /**
                         * Creates a new TypeMeta instance using the specified properties.
                         * @function create
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.ITypeMeta=} [properties] Properties to set
                         * @returns {k8s.io.apimachinery.pkg.runtime.TypeMeta} TypeMeta instance
                         */
                        TypeMeta.create = function create(properties) {
                            return new TypeMeta(properties);
                        };

                        /**
                         * Encodes the specified TypeMeta message. Does not implicitly {@link k8s.io.apimachinery.pkg.runtime.TypeMeta.verify|verify} messages.
                         * @function encode
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.ITypeMeta} message TypeMeta message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TypeMeta.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.apiVersion != null && Object.hasOwnProperty.call(message, "apiVersion"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.apiVersion);
                            if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.kind);
                            return writer;
                        };

                        /**
                         * Encodes the specified TypeMeta message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.runtime.TypeMeta.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.ITypeMeta} message TypeMeta message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TypeMeta.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a TypeMeta message from the specified reader or buffer.
                         * @function decode
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {k8s.io.apimachinery.pkg.runtime.TypeMeta} TypeMeta
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TypeMeta.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.runtime.TypeMeta();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.apiVersion = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.kind = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a TypeMeta message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {k8s.io.apimachinery.pkg.runtime.TypeMeta} TypeMeta
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TypeMeta.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a TypeMeta message.
                         * @function verify
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TypeMeta.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                if (!$util.isString(message.apiVersion))
                                    return "apiVersion: string expected";
                            if (message.kind != null && message.hasOwnProperty("kind"))
                                if (!$util.isString(message.kind))
                                    return "kind: string expected";
                            return null;
                        };

                        /**
                         * Creates a TypeMeta message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {k8s.io.apimachinery.pkg.runtime.TypeMeta} TypeMeta
                         */
                        TypeMeta.fromObject = function fromObject(object) {
                            if (object instanceof $root.k8s.io.apimachinery.pkg.runtime.TypeMeta)
                                return object;
                            let message = new $root.k8s.io.apimachinery.pkg.runtime.TypeMeta();
                            if (object.apiVersion != null)
                                message.apiVersion = String(object.apiVersion);
                            if (object.kind != null)
                                message.kind = String(object.kind);
                            return message;
                        };

                        /**
                         * Creates a plain object from a TypeMeta message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.TypeMeta} message TypeMeta
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TypeMeta.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.apiVersion = "";
                                object.kind = "";
                            }
                            if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                object.apiVersion = message.apiVersion;
                            if (message.kind != null && message.hasOwnProperty("kind"))
                                object.kind = message.kind;
                            return object;
                        };

                        /**
                         * Converts this TypeMeta to JSON.
                         * @function toJSON
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TypeMeta.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for TypeMeta
                         * @function getTypeUrl
                         * @memberof k8s.io.apimachinery.pkg.runtime.TypeMeta
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TypeMeta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/k8s.io.apimachinery.pkg.runtime.TypeMeta";
                        };

                        return TypeMeta;
                    })();

                    runtime.Unknown = (function() {

                        /**
                         * Properties of an Unknown.
                         * @memberof k8s.io.apimachinery.pkg.runtime
                         * @interface IUnknown
                         * @property {k8s.io.apimachinery.pkg.runtime.ITypeMeta|null} [typeMeta] Unknown typeMeta
                         * @property {Uint8Array|null} [raw] Unknown raw
                         * @property {string|null} [contentEncoding] Unknown contentEncoding
                         * @property {string|null} [contentType] Unknown contentType
                         */

                        /**
                         * Constructs a new Unknown.
                         * @memberof k8s.io.apimachinery.pkg.runtime
                         * @classdesc Represents an Unknown.
                         * @implements IUnknown
                         * @constructor
                         * @param {k8s.io.apimachinery.pkg.runtime.IUnknown=} [properties] Properties to set
                         */
                        function Unknown(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Unknown typeMeta.
                         * @member {k8s.io.apimachinery.pkg.runtime.ITypeMeta|null|undefined} typeMeta
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @instance
                         */
                        Unknown.prototype.typeMeta = null;

                        /**
                         * Unknown raw.
                         * @member {Uint8Array} raw
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @instance
                         */
                        Unknown.prototype.raw = $util.newBuffer([]);

                        /**
                         * Unknown contentEncoding.
                         * @member {string} contentEncoding
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @instance
                         */
                        Unknown.prototype.contentEncoding = "";

                        /**
                         * Unknown contentType.
                         * @member {string} contentType
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @instance
                         */
                        Unknown.prototype.contentType = "";

                        /**
                         * Creates a new Unknown instance using the specified properties.
                         * @function create
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.IUnknown=} [properties] Properties to set
                         * @returns {k8s.io.apimachinery.pkg.runtime.Unknown} Unknown instance
                         */
                        Unknown.create = function create(properties) {
                            return new Unknown(properties);
                        };

                        /**
                         * Encodes the specified Unknown message. Does not implicitly {@link k8s.io.apimachinery.pkg.runtime.Unknown.verify|verify} messages.
                         * @function encode
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.IUnknown} message Unknown message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Unknown.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.typeMeta != null && Object.hasOwnProperty.call(message, "typeMeta"))
                                $root.k8s.io.apimachinery.pkg.runtime.TypeMeta.encode(message.typeMeta, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.raw != null && Object.hasOwnProperty.call(message, "raw"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.raw);
                            if (message.contentEncoding != null && Object.hasOwnProperty.call(message, "contentEncoding"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.contentEncoding);
                            if (message.contentType != null && Object.hasOwnProperty.call(message, "contentType"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.contentType);
                            return writer;
                        };

                        /**
                         * Encodes the specified Unknown message, length delimited. Does not implicitly {@link k8s.io.apimachinery.pkg.runtime.Unknown.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.IUnknown} message Unknown message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Unknown.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Unknown message from the specified reader or buffer.
                         * @function decode
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {k8s.io.apimachinery.pkg.runtime.Unknown} Unknown
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Unknown.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.k8s.io.apimachinery.pkg.runtime.Unknown();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.typeMeta = $root.k8s.io.apimachinery.pkg.runtime.TypeMeta.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.raw = reader.bytes();
                                        break;
                                    }
                                case 3: {
                                        message.contentEncoding = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.contentType = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Unknown message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {k8s.io.apimachinery.pkg.runtime.Unknown} Unknown
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Unknown.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Unknown message.
                         * @function verify
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Unknown.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.typeMeta != null && message.hasOwnProperty("typeMeta")) {
                                let error = $root.k8s.io.apimachinery.pkg.runtime.TypeMeta.verify(message.typeMeta);
                                if (error)
                                    return "typeMeta." + error;
                            }
                            if (message.raw != null && message.hasOwnProperty("raw"))
                                if (!(message.raw && typeof message.raw.length === "number" || $util.isString(message.raw)))
                                    return "raw: buffer expected";
                            if (message.contentEncoding != null && message.hasOwnProperty("contentEncoding"))
                                if (!$util.isString(message.contentEncoding))
                                    return "contentEncoding: string expected";
                            if (message.contentType != null && message.hasOwnProperty("contentType"))
                                if (!$util.isString(message.contentType))
                                    return "contentType: string expected";
                            return null;
                        };

                        /**
                         * Creates an Unknown message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {k8s.io.apimachinery.pkg.runtime.Unknown} Unknown
                         */
                        Unknown.fromObject = function fromObject(object) {
                            if (object instanceof $root.k8s.io.apimachinery.pkg.runtime.Unknown)
                                return object;
                            let message = new $root.k8s.io.apimachinery.pkg.runtime.Unknown();
                            if (object.typeMeta != null) {
                                if (typeof object.typeMeta !== "object")
                                    throw TypeError(".k8s.io.apimachinery.pkg.runtime.Unknown.typeMeta: object expected");
                                message.typeMeta = $root.k8s.io.apimachinery.pkg.runtime.TypeMeta.fromObject(object.typeMeta);
                            }
                            if (object.raw != null)
                                if (typeof object.raw === "string")
                                    $util.base64.decode(object.raw, message.raw = $util.newBuffer($util.base64.length(object.raw)), 0);
                                else if (object.raw.length >= 0)
                                    message.raw = object.raw;
                            if (object.contentEncoding != null)
                                message.contentEncoding = String(object.contentEncoding);
                            if (object.contentType != null)
                                message.contentType = String(object.contentType);
                            return message;
                        };

                        /**
                         * Creates a plain object from an Unknown message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {k8s.io.apimachinery.pkg.runtime.Unknown} message Unknown
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Unknown.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.typeMeta = null;
                                if (options.bytes === String)
                                    object.raw = "";
                                else {
                                    object.raw = [];
                                    if (options.bytes !== Array)
                                        object.raw = $util.newBuffer(object.raw);
                                }
                                object.contentEncoding = "";
                                object.contentType = "";
                            }
                            if (message.typeMeta != null && message.hasOwnProperty("typeMeta"))
                                object.typeMeta = $root.k8s.io.apimachinery.pkg.runtime.TypeMeta.toObject(message.typeMeta, options);
                            if (message.raw != null && message.hasOwnProperty("raw"))
                                object.raw = options.bytes === String ? $util.base64.encode(message.raw, 0, message.raw.length) : options.bytes === Array ? Array.prototype.slice.call(message.raw) : message.raw;
                            if (message.contentEncoding != null && message.hasOwnProperty("contentEncoding"))
                                object.contentEncoding = message.contentEncoding;
                            if (message.contentType != null && message.hasOwnProperty("contentType"))
                                object.contentType = message.contentType;
                            return object;
                        };

                        /**
                         * Converts this Unknown to JSON.
                         * @function toJSON
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Unknown.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Unknown
                         * @function getTypeUrl
                         * @memberof k8s.io.apimachinery.pkg.runtime.Unknown
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Unknown.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/k8s.io.apimachinery.pkg.runtime.Unknown";
                        };

                        return Unknown;
                    })();

                    runtime.schema = (function() {

                        /**
                         * Namespace schema.
                         * @memberof k8s.io.apimachinery.pkg.runtime
                         * @namespace
                         */
                        const schema = {};

                        return schema;
                    })();

                    return runtime;
                })();

                return pkg;
            })();

            return apimachinery;
        })();

        return io;
    })();

    return k8s;
})();

export { $root as default };
